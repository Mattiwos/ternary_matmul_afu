// msgdma_bbb_dispatcher.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module msgdma_bbb_dispatcher (
		input  wire         clk,                    //                clock.clk
		input  wire         reset,                  //          clock_reset.reset
		input  wire [31:0]  csr_writedata,          //                  CSR.writedata
		input  wire         csr_write,              //                     .write
		input  wire [3:0]   csr_byteenable,         //                     .byteenable
		output wire [31:0]  csr_readdata,           //                     .readdata
		input  wire         csr_read,               //                     .read
		input  wire [2:0]   csr_address,            //                     .address
		output wire [255:0] src_response_data,      //      Response_Source.data
		output wire         src_response_valid,     //                     .valid
		input  wire         src_response_ready,     //                     .ready
		input  wire [255:0] snk_descriptor_data,    //      Descriptor_Sink.data
		input  wire         snk_descriptor_valid,   //                     .valid
		output wire         snk_descriptor_ready,   //                     .ready
		output wire [255:0] src_write_master_data,  // Write_Command_Source.data
		output wire         src_write_master_valid, //                     .valid
		input  wire         src_write_master_ready, //                     .ready
		input  wire [255:0] snk_write_master_data,  //  Write_Response_Sink.data
		input  wire         snk_write_master_valid, //                     .valid
		output wire         snk_write_master_ready, //                     .ready
		output wire [255:0] src_read_master_data,   //  Read_Command_Source.data
		output wire         src_read_master_valid,  //                     .valid
		input  wire         src_read_master_ready,  //                     .ready
		input  wire [255:0] snk_read_master_data,   //   Read_Response_Sink.data
		input  wire         snk_read_master_valid,  //                     .valid
		output wire         snk_read_master_ready   //                     .ready
	);

	dcp_dispatcher #(
		.PREFETCHER_USE_CASE           (1),
		.MODE                          (0),
		.RESPONSE_PORT                 (1),
		.DESCRIPTOR_INTERFACE          (1),
		.DESCRIPTOR_FIFO_DEPTH         (128),
		.ENHANCED_FEATURES             (1),
		.DESCRIPTOR_WIDTH              (256),
		.DESCRIPTOR_BYTEENABLE_WIDTH   (32),
		.DATA_WIDTH_DERIVED            (2),
		.DATA_FIFO_DEPTH_DERIVED       (1),
		.MAX_BYTE_DERIVED              (0),
		.TRANSFER_TYPE_DERIVED         (1),
		.BURST_ENABLE                  (0),
		.MAX_BURST_COUNT_DERIVED       (0),
		.BURST_WRAPPING_SUPPORT        (0),
		.STRIDE_ENABLE_DERIVED         (0),
		.MAX_STRIDE_DERIVED            (0),
		.PROGRAMMABLE_BURST_ENABLE     (0),
		.CHANNEL_ENABLE                (0),
		.CHANNEL_WIDTH_DERIVED         (7),
		.ERROR_ENABLE                  (0),
		.ERROR_WIDTH_DERIVED           (7),
		.PACKET_ENABLE                 (0),
		.DESCRIPTOR_FIFO_DEPTH_DERIVED (4)
	) msgdma_bbb_dispatcher (
		.clk                     (clk),                                                                                                                                                                                                                                                                   //   input,    width = 1,                clock.clk
		.reset                   (reset),                                                                                                                                                                                                                                                                 //   input,    width = 1,          clock_reset.reset
		.csr_writedata           (csr_writedata),                                                                                                                                                                                                                                                         //   input,   width = 32,                  CSR.writedata
		.csr_write               (csr_write),                                                                                                                                                                                                                                                             //   input,    width = 1,                     .write
		.csr_byteenable          (csr_byteenable),                                                                                                                                                                                                                                                        //   input,    width = 4,                     .byteenable
		.csr_readdata            (csr_readdata),                                                                                                                                                                                                                                                          //  output,   width = 32,                     .readdata
		.csr_read                (csr_read),                                                                                                                                                                                                                                                              //   input,    width = 1,                     .read
		.csr_address             (csr_address),                                                                                                                                                                                                                                                           //   input,    width = 3,                     .address
		.src_response_data       (src_response_data),                                                                                                                                                                                                                                                     //  output,  width = 256,      Response_Source.data
		.src_response_valid      (src_response_valid),                                                                                                                                                                                                                                                    //  output,    width = 1,                     .valid
		.src_response_ready      (src_response_ready),                                                                                                                                                                                                                                                    //   input,    width = 1,                     .ready
		.snk_descriptor_data     (snk_descriptor_data),                                                                                                                                                                                                                                                   //   input,  width = 256,      Descriptor_Sink.data
		.snk_descriptor_valid    (snk_descriptor_valid),                                                                                                                                                                                                                                                  //   input,    width = 1,                     .valid
		.snk_descriptor_ready    (snk_descriptor_ready),                                                                                                                                                                                                                                                  //  output,    width = 1,                     .ready
		.src_write_master_data   (src_write_master_data),                                                                                                                                                                                                                                                 //  output,  width = 256, Write_Command_Source.data
		.src_write_master_valid  (src_write_master_valid),                                                                                                                                                                                                                                                //  output,    width = 1,                     .valid
		.src_write_master_ready  (src_write_master_ready),                                                                                                                                                                                                                                                //   input,    width = 1,                     .ready
		.snk_write_master_data   (snk_write_master_data),                                                                                                                                                                                                                                                 //   input,  width = 256,  Write_Response_Sink.data
		.snk_write_master_valid  (snk_write_master_valid),                                                                                                                                                                                                                                                //   input,    width = 1,                     .valid
		.snk_write_master_ready  (snk_write_master_ready),                                                                                                                                                                                                                                                //  output,    width = 1,                     .ready
		.src_read_master_data    (src_read_master_data),                                                                                                                                                                                                                                                  //  output,  width = 256,  Read_Command_Source.data
		.src_read_master_valid   (src_read_master_valid),                                                                                                                                                                                                                                                 //  output,    width = 1,                     .valid
		.src_read_master_ready   (src_read_master_ready),                                                                                                                                                                                                                                                 //   input,    width = 1,                     .ready
		.snk_read_master_data    (snk_read_master_data),                                                                                                                                                                                                                                                  //   input,  width = 256,   Read_Response_Sink.data
		.snk_read_master_valid   (snk_read_master_valid),                                                                                                                                                                                                                                                 //   input,    width = 1,                     .valid
		.snk_read_master_ready   (snk_read_master_ready),                                                                                                                                                                                                                                                 //  output,    width = 1,                     .ready
		.descriptor_write        (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                    
		.descriptor_waitrequest  (),                                                                                                                                                                                                                                                                      // (terminated),                                    
		.descriptor_writedata    (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated),                                    
		.descriptor_byteenable   (32'b00000000000000000000000000000000),                                                                                                                                                                                                                                  // (terminated),                                    
		.mm_response_waitrequest (),                                                                                                                                                                                                                                                                      // (terminated),                                    
		.mm_response_byteenable  (4'b0000),                                                                                                                                                                                                                                                               // (terminated),                                    
		.mm_response_address     (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                    
		.mm_response_readdata    (),                                                                                                                                                                                                                                                                      // (terminated),                                    
		.mm_response_read        (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                    
		.csr_irq                 ()                                                                                                                                                                                                                                                                       // (terminated),                                    
	);

endmodule
