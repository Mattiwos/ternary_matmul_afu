// msgdma_bbb.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module msgdma_bbb (
		input  wire         clk_clk,                       //            clk.clk
		input  wire [7:0]   csr_address,                   //            csr.address
		input  wire [63:0]  csr_writedata,                 //               .writedata
		input  wire [7:0]   csr_byteenable,                //               .byteenable
		input  wire         csr_write,                     //               .write
		input  wire         csr_read,                      //               .read
		output wire [63:0]  csr_readdata,                  //               .readdata
		output wire         csr_readdatavalid,             //               .readdatavalid
		output wire         csr_waitrequest,               //               .waitrequest
		input  wire [0:0]   csr_burstcount,                //               .burstcount
		output wire [47:0]  host_read_address,             //      host_read.address
		output wire [63:0]  host_read_byteenable,          //               .byteenable
		output wire [2:0]   host_read_burstcount,          //               .burstcount
		output wire         host_read_read,                //               .read
		input  wire [511:0] host_read_readdata,            //               .readdata
		input  wire         host_read_readdatavalid,       //               .readdatavalid
		input  wire         host_read_waitrequest,         //               .waitrequest
		output wire [47:0]  host_write_address,            //     host_write.address
		output wire [511:0] host_write_writedata,          //               .writedata
		output wire [63:0]  host_write_byteenable,         //               .byteenable
		output wire [2:0]   host_write_burstcount,         //               .burstcount
		output wire         host_write_write,              //               .write
		input  wire [1:0]   host_write_response,           //               .response
		input  wire         host_write_writeresponsevalid, //               .writeresponsevalid
		input  wire         host_write_waitrequest,        //               .waitrequest
		output wire [47:0]  mem_read_write_address,        // mem_read_write.address
		output wire [511:0] mem_read_write_writedata,      //               .writedata
		output wire [63:0]  mem_read_write_byteenable,     //               .byteenable
		output wire [2:0]   mem_read_write_burstcount,     //               .burstcount
		output wire         mem_read_write_write,          //               .write
		output wire         mem_read_write_read,           //               .read
		input  wire [511:0] mem_read_write_readdata,       //               .readdata
		input  wire         mem_read_write_readdatavalid,  //               .readdatavalid
		input  wire         mem_read_write_waitrequest,    //               .waitrequest
		input  wire         reset_reset                    //          reset.reset
	);

	wire          msgdma_bbb_read_master_data_source_valid;                                // msgdma_bbb_read_master:src_valid -> msgdma_bbb_write_master:snk_valid
	wire  [511:0] msgdma_bbb_read_master_data_source_data;                                 // msgdma_bbb_read_master:src_data -> msgdma_bbb_write_master:snk_data
	wire          msgdma_bbb_read_master_data_source_ready;                                // msgdma_bbb_write_master:snk_ready -> msgdma_bbb_read_master:src_ready
	wire          msgdma_bbb_dispatcher_read_command_source_valid;                         // msgdma_bbb_dispatcher:src_read_master_valid -> msgdma_bbb_read_master:snk_command_valid
	wire  [255:0] msgdma_bbb_dispatcher_read_command_source_data;                          // msgdma_bbb_dispatcher:src_read_master_data -> msgdma_bbb_read_master:snk_command_data
	wire          msgdma_bbb_dispatcher_read_command_source_ready;                         // msgdma_bbb_read_master:snk_command_ready -> msgdma_bbb_dispatcher:src_read_master_ready
	wire          msgdma_bbb_read_master_response_source_valid;                            // msgdma_bbb_read_master:src_response_valid -> msgdma_bbb_dispatcher:snk_read_master_valid
	wire  [255:0] msgdma_bbb_read_master_response_source_data;                             // msgdma_bbb_read_master:src_response_data -> msgdma_bbb_dispatcher:snk_read_master_data
	wire          msgdma_bbb_read_master_response_source_ready;                            // msgdma_bbb_dispatcher:snk_read_master_ready -> msgdma_bbb_read_master:src_response_ready
	wire          msgdma_bbb_write_master_response_source_valid;                           // msgdma_bbb_write_master:src_response_valid -> msgdma_bbb_dispatcher:snk_write_master_valid
	wire  [255:0] msgdma_bbb_write_master_response_source_data;                            // msgdma_bbb_write_master:src_response_data -> msgdma_bbb_dispatcher:snk_write_master_data
	wire          msgdma_bbb_write_master_response_source_ready;                           // msgdma_bbb_dispatcher:snk_write_master_ready -> msgdma_bbb_write_master:src_response_ready
	wire          msgdma_bbb_dispatcher_response_source_valid;                             // msgdma_bbb_dispatcher:src_response_valid -> msgdma_bbb_frontend:snk_response_valid
	wire  [255:0] msgdma_bbb_dispatcher_response_source_data;                              // msgdma_bbb_dispatcher:src_response_data -> msgdma_bbb_frontend:snk_response_data
	wire          msgdma_bbb_dispatcher_response_source_ready;                             // msgdma_bbb_frontend:snk_response_ready -> msgdma_bbb_dispatcher:src_response_ready
	wire          msgdma_bbb_dispatcher_write_command_source_valid;                        // msgdma_bbb_dispatcher:src_write_master_valid -> msgdma_bbb_write_master:snk_command_valid
	wire  [255:0] msgdma_bbb_dispatcher_write_command_source_data;                         // msgdma_bbb_dispatcher:src_write_master_data -> msgdma_bbb_write_master:snk_command_data
	wire          msgdma_bbb_dispatcher_write_command_source_ready;                        // msgdma_bbb_write_master:snk_command_ready -> msgdma_bbb_dispatcher:src_write_master_ready
	wire          msgdma_bbb_frontend_descriptor_source_valid;                             // msgdma_bbb_frontend:src_descriptor_valid -> msgdma_bbb_dispatcher:snk_descriptor_valid
	wire  [255:0] msgdma_bbb_frontend_descriptor_source_data;                              // msgdma_bbb_frontend:src_descriptor_data -> msgdma_bbb_dispatcher:snk_descriptor_data
	wire          msgdma_bbb_frontend_descriptor_source_ready;                             // msgdma_bbb_dispatcher:snk_descriptor_ready -> msgdma_bbb_frontend:src_descriptor_ready
	wire          msgdma_bbb_clk_out_clk_clk;                                              // msgdma_bbb_clk:out_clk -> [mm_interconnect_0:msgdma_bbb_clk_out_clk_clk, mm_interconnect_1:msgdma_bbb_clk_out_clk_clk, msgdma_bbb_csr:s_clk, msgdma_bbb_dfh:clk, msgdma_bbb_dispatcher:clk, msgdma_bbb_frontend:clk, msgdma_bbb_host_read_bridge:s_clk, msgdma_bbb_host_write_bridge:s_clk, msgdma_bbb_mem_bridge:s_clk, msgdma_bbb_read_master:clk, msgdma_bbb_reset:clk, msgdma_bbb_write_master:clk]
	wire          msgdma_bbb_reset_out_reset_reset;                                        // msgdma_bbb_reset:out_reset -> [mm_interconnect_0:msgdma_bbb_read_master_Data_Read_Master_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_1:msgdma_bbb_csr_master_translator_reset_reset_bridge_in_reset_reset, msgdma_bbb_csr:reset, msgdma_bbb_dfh:reset, msgdma_bbb_dispatcher:reset, msgdma_bbb_frontend:reset, msgdma_bbb_host_read_bridge:reset, msgdma_bbb_host_write_bridge:reset, msgdma_bbb_mem_bridge:reset, msgdma_bbb_read_master:reset, msgdma_bbb_write_master:reset]
	wire  [511:0] msgdma_bbb_read_master_data_read_master_readdata;                        // mm_interconnect_0:msgdma_bbb_read_master_Data_Read_Master_readdata -> msgdma_bbb_read_master:master_readdata
	wire          msgdma_bbb_read_master_data_read_master_waitrequest;                     // mm_interconnect_0:msgdma_bbb_read_master_Data_Read_Master_waitrequest -> msgdma_bbb_read_master:master_waitrequest
	wire   [48:0] msgdma_bbb_read_master_data_read_master_address;                         // msgdma_bbb_read_master:master_address -> mm_interconnect_0:msgdma_bbb_read_master_Data_Read_Master_address
	wire          msgdma_bbb_read_master_data_read_master_read;                            // msgdma_bbb_read_master:master_read -> mm_interconnect_0:msgdma_bbb_read_master_Data_Read_Master_read
	wire   [63:0] msgdma_bbb_read_master_data_read_master_byteenable;                      // msgdma_bbb_read_master:master_byteenable -> mm_interconnect_0:msgdma_bbb_read_master_Data_Read_Master_byteenable
	wire          msgdma_bbb_read_master_data_read_master_readdatavalid;                   // mm_interconnect_0:msgdma_bbb_read_master_Data_Read_Master_readdatavalid -> msgdma_bbb_read_master:master_readdatavalid
	wire    [2:0] msgdma_bbb_read_master_data_read_master_burstcount;                      // msgdma_bbb_read_master:master_burstcount -> mm_interconnect_0:msgdma_bbb_read_master_Data_Read_Master_burstcount
	wire  [511:0] msgdma_bbb_frontend_descriptor_fetch_master_readdata;                    // mm_interconnect_0:msgdma_bbb_frontend_descriptor_fetch_master_readdata -> msgdma_bbb_frontend:m_fetch_readdata
	wire          msgdma_bbb_frontend_descriptor_fetch_master_waitrequest;                 // mm_interconnect_0:msgdma_bbb_frontend_descriptor_fetch_master_waitrequest -> msgdma_bbb_frontend:m_fetch_waitrequest
	wire   [48:0] msgdma_bbb_frontend_descriptor_fetch_master_address;                     // msgdma_bbb_frontend:m_fetch_address -> mm_interconnect_0:msgdma_bbb_frontend_descriptor_fetch_master_address
	wire   [63:0] msgdma_bbb_frontend_descriptor_fetch_master_byteenable;                  // msgdma_bbb_frontend:m_fetch_byteenable -> mm_interconnect_0:msgdma_bbb_frontend_descriptor_fetch_master_byteenable
	wire          msgdma_bbb_frontend_descriptor_fetch_master_read;                        // msgdma_bbb_frontend:m_fetch_read -> mm_interconnect_0:msgdma_bbb_frontend_descriptor_fetch_master_read
	wire          msgdma_bbb_frontend_descriptor_fetch_master_readdatavalid;               // mm_interconnect_0:msgdma_bbb_frontend_descriptor_fetch_master_readdatavalid -> msgdma_bbb_frontend:m_fetch_readdatavalid
	wire    [2:0] msgdma_bbb_frontend_descriptor_fetch_master_burstcount;                  // msgdma_bbb_frontend:m_fetch_burst -> mm_interconnect_0:msgdma_bbb_frontend_descriptor_fetch_master_burstcount
	wire          msgdma_bbb_write_master_data_write_master_waitrequest;                   // mm_interconnect_0:msgdma_bbb_write_master_Data_Write_Master_waitrequest -> msgdma_bbb_write_master:master_waitrequest
	wire   [48:0] msgdma_bbb_write_master_data_write_master_address;                       // msgdma_bbb_write_master:master_address -> mm_interconnect_0:msgdma_bbb_write_master_Data_Write_Master_address
	wire   [63:0] msgdma_bbb_write_master_data_write_master_byteenable;                    // msgdma_bbb_write_master:master_byteenable -> mm_interconnect_0:msgdma_bbb_write_master_Data_Write_Master_byteenable
	wire    [1:0] msgdma_bbb_write_master_data_write_master_response;                      // mm_interconnect_0:msgdma_bbb_write_master_Data_Write_Master_response -> msgdma_bbb_write_master:master_response
	wire          msgdma_bbb_write_master_data_write_master_write;                         // msgdma_bbb_write_master:master_write -> mm_interconnect_0:msgdma_bbb_write_master_Data_Write_Master_write
	wire  [511:0] msgdma_bbb_write_master_data_write_master_writedata;                     // msgdma_bbb_write_master:master_writedata -> mm_interconnect_0:msgdma_bbb_write_master_Data_Write_Master_writedata
	wire          msgdma_bbb_write_master_data_write_master_writeresponsevalid;            // mm_interconnect_0:msgdma_bbb_write_master_Data_Write_Master_writeresponsevalid -> msgdma_bbb_write_master:master_writeresponsevalid
	wire    [2:0] msgdma_bbb_write_master_data_write_master_burstcount;                    // msgdma_bbb_write_master:master_burstcount -> mm_interconnect_0:msgdma_bbb_write_master_Data_Write_Master_burstcount
	wire          msgdma_bbb_frontend_descriptor_store_master_waitrequest;                 // mm_interconnect_0:msgdma_bbb_frontend_descriptor_store_master_waitrequest -> msgdma_bbb_frontend:m_store_waitrequest
	wire   [48:0] msgdma_bbb_frontend_descriptor_store_master_address;                     // msgdma_bbb_frontend:m_store_address -> mm_interconnect_0:msgdma_bbb_frontend_descriptor_store_master_address
	wire   [63:0] msgdma_bbb_frontend_descriptor_store_master_byteenable;                  // msgdma_bbb_frontend:m_store_byteenable -> mm_interconnect_0:msgdma_bbb_frontend_descriptor_store_master_byteenable
	wire          msgdma_bbb_frontend_descriptor_store_master_write;                       // msgdma_bbb_frontend:m_store_write -> mm_interconnect_0:msgdma_bbb_frontend_descriptor_store_master_write
	wire  [511:0] msgdma_bbb_frontend_descriptor_store_master_writedata;                   // msgdma_bbb_frontend:m_store_writedata -> mm_interconnect_0:msgdma_bbb_frontend_descriptor_store_master_writedata
	wire    [2:0] msgdma_bbb_frontend_descriptor_store_master_burstcount;                  // msgdma_bbb_frontend:m_store_burst -> mm_interconnect_0:msgdma_bbb_frontend_descriptor_store_master_burstcount
	wire  [511:0] mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_readdata;            // msgdma_bbb_host_read_bridge:s_readdata -> mm_interconnect_0:msgdma_bbb_host_read_bridge_slave_readdata
	wire          mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_waitrequest;         // msgdma_bbb_host_read_bridge:s_waitrequest -> mm_interconnect_0:msgdma_bbb_host_read_bridge_slave_waitrequest
	wire   [47:0] mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_address;             // mm_interconnect_0:msgdma_bbb_host_read_bridge_slave_address -> msgdma_bbb_host_read_bridge:s_address
	wire          mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_read;                // mm_interconnect_0:msgdma_bbb_host_read_bridge_slave_read -> msgdma_bbb_host_read_bridge:s_read
	wire   [63:0] mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_byteenable;          // mm_interconnect_0:msgdma_bbb_host_read_bridge_slave_byteenable -> msgdma_bbb_host_read_bridge:s_byteenable
	wire          mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_readdatavalid;       // msgdma_bbb_host_read_bridge:s_readdatavalid -> mm_interconnect_0:msgdma_bbb_host_read_bridge_slave_readdatavalid
	wire    [2:0] mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_burstcount;          // mm_interconnect_0:msgdma_bbb_host_read_bridge_slave_burstcount -> msgdma_bbb_host_read_bridge:s_burst
	wire  [511:0] mm_interconnect_0_msgdma_bbb_mem_bridge_slave_readdata;                  // msgdma_bbb_mem_bridge:s_readdata -> mm_interconnect_0:msgdma_bbb_mem_bridge_slave_readdata
	wire          mm_interconnect_0_msgdma_bbb_mem_bridge_slave_waitrequest;               // msgdma_bbb_mem_bridge:s_waitrequest -> mm_interconnect_0:msgdma_bbb_mem_bridge_slave_waitrequest
	wire   [47:0] mm_interconnect_0_msgdma_bbb_mem_bridge_slave_address;                   // mm_interconnect_0:msgdma_bbb_mem_bridge_slave_address -> msgdma_bbb_mem_bridge:s_address
	wire          mm_interconnect_0_msgdma_bbb_mem_bridge_slave_read;                      // mm_interconnect_0:msgdma_bbb_mem_bridge_slave_read -> msgdma_bbb_mem_bridge:s_read
	wire   [63:0] mm_interconnect_0_msgdma_bbb_mem_bridge_slave_byteenable;                // mm_interconnect_0:msgdma_bbb_mem_bridge_slave_byteenable -> msgdma_bbb_mem_bridge:s_byteenable
	wire          mm_interconnect_0_msgdma_bbb_mem_bridge_slave_readdatavalid;             // msgdma_bbb_mem_bridge:s_readdatavalid -> mm_interconnect_0:msgdma_bbb_mem_bridge_slave_readdatavalid
	wire          mm_interconnect_0_msgdma_bbb_mem_bridge_slave_write;                     // mm_interconnect_0:msgdma_bbb_mem_bridge_slave_write -> msgdma_bbb_mem_bridge:s_write
	wire  [511:0] mm_interconnect_0_msgdma_bbb_mem_bridge_slave_writedata;                 // mm_interconnect_0:msgdma_bbb_mem_bridge_slave_writedata -> msgdma_bbb_mem_bridge:s_writedata
	wire    [2:0] mm_interconnect_0_msgdma_bbb_mem_bridge_slave_burstcount;                // mm_interconnect_0:msgdma_bbb_mem_bridge_slave_burstcount -> msgdma_bbb_mem_bridge:s_burst
	wire          mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_waitrequest;        // msgdma_bbb_host_write_bridge:s_waitrequest -> mm_interconnect_0:msgdma_bbb_host_write_bridge_slave_waitrequest
	wire   [47:0] mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_address;            // mm_interconnect_0:msgdma_bbb_host_write_bridge_slave_address -> msgdma_bbb_host_write_bridge:s_address
	wire   [63:0] mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_byteenable;         // mm_interconnect_0:msgdma_bbb_host_write_bridge_slave_byteenable -> msgdma_bbb_host_write_bridge:s_byteenable
	wire    [1:0] mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_response;           // msgdma_bbb_host_write_bridge:s_response -> mm_interconnect_0:msgdma_bbb_host_write_bridge_slave_response
	wire          mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_write;              // mm_interconnect_0:msgdma_bbb_host_write_bridge_slave_write -> msgdma_bbb_host_write_bridge:s_write
	wire  [511:0] mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_writedata;          // mm_interconnect_0:msgdma_bbb_host_write_bridge_slave_writedata -> msgdma_bbb_host_write_bridge:s_writedata
	wire          mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_writeresponsevalid; // msgdma_bbb_host_write_bridge:s_writeresponsevalid -> mm_interconnect_0:msgdma_bbb_host_write_bridge_slave_writeresponsevalid
	wire    [2:0] mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_burstcount;         // mm_interconnect_0:msgdma_bbb_host_write_bridge_slave_burstcount -> msgdma_bbb_host_write_bridge:s_burst
	wire   [63:0] msgdma_bbb_csr_master_readdata;                                          // mm_interconnect_1:msgdma_bbb_csr_master_readdata -> msgdma_bbb_csr:m_readdata
	wire          msgdma_bbb_csr_master_waitrequest;                                       // mm_interconnect_1:msgdma_bbb_csr_master_waitrequest -> msgdma_bbb_csr:m_waitrequest
	wire    [7:0] msgdma_bbb_csr_master_address;                                           // msgdma_bbb_csr:m_address -> mm_interconnect_1:msgdma_bbb_csr_master_address
	wire    [7:0] msgdma_bbb_csr_master_byteenable;                                        // msgdma_bbb_csr:m_byteenable -> mm_interconnect_1:msgdma_bbb_csr_master_byteenable
	wire          msgdma_bbb_csr_master_read;                                              // msgdma_bbb_csr:m_read -> mm_interconnect_1:msgdma_bbb_csr_master_read
	wire          msgdma_bbb_csr_master_readdatavalid;                                     // mm_interconnect_1:msgdma_bbb_csr_master_readdatavalid -> msgdma_bbb_csr:m_readdatavalid
	wire   [63:0] msgdma_bbb_csr_master_writedata;                                         // msgdma_bbb_csr:m_writedata -> mm_interconnect_1:msgdma_bbb_csr_master_writedata
	wire          msgdma_bbb_csr_master_write;                                             // msgdma_bbb_csr:m_write -> mm_interconnect_1:msgdma_bbb_csr_master_write
	wire    [0:0] msgdma_bbb_csr_master_burstcount;                                        // msgdma_bbb_csr:m_burst -> mm_interconnect_1:msgdma_bbb_csr_master_burstcount
	wire   [31:0] mm_interconnect_1_msgdma_bbb_dispatcher_csr_readdata;                    // msgdma_bbb_dispatcher:csr_readdata -> mm_interconnect_1:msgdma_bbb_dispatcher_CSR_readdata
	wire    [2:0] mm_interconnect_1_msgdma_bbb_dispatcher_csr_address;                     // mm_interconnect_1:msgdma_bbb_dispatcher_CSR_address -> msgdma_bbb_dispatcher:csr_address
	wire          mm_interconnect_1_msgdma_bbb_dispatcher_csr_read;                        // mm_interconnect_1:msgdma_bbb_dispatcher_CSR_read -> msgdma_bbb_dispatcher:csr_read
	wire    [3:0] mm_interconnect_1_msgdma_bbb_dispatcher_csr_byteenable;                  // mm_interconnect_1:msgdma_bbb_dispatcher_CSR_byteenable -> msgdma_bbb_dispatcher:csr_byteenable
	wire          mm_interconnect_1_msgdma_bbb_dispatcher_csr_write;                       // mm_interconnect_1:msgdma_bbb_dispatcher_CSR_write -> msgdma_bbb_dispatcher:csr_write
	wire   [31:0] mm_interconnect_1_msgdma_bbb_dispatcher_csr_writedata;                   // mm_interconnect_1:msgdma_bbb_dispatcher_CSR_writedata -> msgdma_bbb_dispatcher:csr_writedata
	wire   [63:0] mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_readdata;                 // msgdma_bbb_dfh:avmm_readdata -> mm_interconnect_1:msgdma_bbb_dfh_afu_cfg_slave_readdata
	wire    [2:0] mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_address;                  // mm_interconnect_1:msgdma_bbb_dfh_afu_cfg_slave_address -> msgdma_bbb_dfh:avmm_address
	wire          mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_read;                     // mm_interconnect_1:msgdma_bbb_dfh_afu_cfg_slave_read -> msgdma_bbb_dfh:avmm_read
	wire          mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_write;                    // mm_interconnect_1:msgdma_bbb_dfh_afu_cfg_slave_write -> msgdma_bbb_dfh:avmm_write
	wire   [63:0] mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_writedata;                // mm_interconnect_1:msgdma_bbb_dfh_afu_cfg_slave_writedata -> msgdma_bbb_dfh:avmm_writedata
	wire   [63:0] mm_interconnect_1_msgdma_bbb_frontend_csr_slave_readdata;                // msgdma_bbb_frontend:s_readdata -> mm_interconnect_1:msgdma_bbb_frontend_csr_slave_readdata
	wire    [2:0] mm_interconnect_1_msgdma_bbb_frontend_csr_slave_address;                 // mm_interconnect_1:msgdma_bbb_frontend_csr_slave_address -> msgdma_bbb_frontend:s_address
	wire          mm_interconnect_1_msgdma_bbb_frontend_csr_slave_read;                    // mm_interconnect_1:msgdma_bbb_frontend_csr_slave_read -> msgdma_bbb_frontend:s_read
	wire    [7:0] mm_interconnect_1_msgdma_bbb_frontend_csr_slave_byteenable;              // mm_interconnect_1:msgdma_bbb_frontend_csr_slave_byteenable -> msgdma_bbb_frontend:s_byteenable
	wire          mm_interconnect_1_msgdma_bbb_frontend_csr_slave_write;                   // mm_interconnect_1:msgdma_bbb_frontend_csr_slave_write -> msgdma_bbb_frontend:s_write
	wire   [63:0] mm_interconnect_1_msgdma_bbb_frontend_csr_slave_writedata;               // mm_interconnect_1:msgdma_bbb_frontend_csr_slave_writedata -> msgdma_bbb_frontend:s_writedata

	msgdma_bbb_clk msgdma_bbb_clk (
		.in_clk  (clk_clk),                    //   input,  width = 1,  in_clk.clk
		.out_clk (msgdma_bbb_clk_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	msgdma_bbb_csr msgdma_bbb_csr (
		.s_clk           (msgdma_bbb_clk_out_clk_clk),          //   input,   width = 1,    clk.clk
		.m_address       (msgdma_bbb_csr_master_address),       //  output,   width = 8, master.address
		.m_writedata     (msgdma_bbb_csr_master_writedata),     //  output,  width = 64,       .writedata
		.m_byteenable    (msgdma_bbb_csr_master_byteenable),    //  output,   width = 8,       .byteenable
		.m_burst         (msgdma_bbb_csr_master_burstcount),    //  output,   width = 1,       .burstcount
		.m_write         (msgdma_bbb_csr_master_write),         //  output,   width = 1,       .write
		.m_read          (msgdma_bbb_csr_master_read),          //  output,   width = 1,       .read
		.m_readdata      (msgdma_bbb_csr_master_readdata),      //   input,  width = 64,       .readdata
		.m_readdatavalid (msgdma_bbb_csr_master_readdatavalid), //   input,   width = 1,       .readdatavalid
		.m_waitrequest   (msgdma_bbb_csr_master_waitrequest),   //   input,   width = 1,       .waitrequest
		.reset           (msgdma_bbb_reset_out_reset_reset),    //   input,   width = 1,  reset.reset
		.s_address       (csr_address),                         //   input,   width = 8,  slave.address
		.s_writedata     (csr_writedata),                       //   input,  width = 64,       .writedata
		.s_byteenable    (csr_byteenable),                      //   input,   width = 8,       .byteenable
		.s_write         (csr_write),                           //   input,   width = 1,       .write
		.s_read          (csr_read),                            //   input,   width = 1,       .read
		.s_readdata      (csr_readdata),                        //  output,  width = 64,       .readdata
		.s_readdatavalid (csr_readdatavalid),                   //  output,   width = 1,       .readdatavalid
		.s_waitrequest   (csr_waitrequest),                     //  output,   width = 1,       .waitrequest
		.s_burst         (csr_burstcount)                       //   input,   width = 1,       .burstcount
	);

	msgdma_bbb_dfh msgdma_bbb_dfh (
		.avmm_readdata  (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_readdata),  //  output,  width = 64, afu_cfg_slave.readdata
		.avmm_writedata (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_writedata), //   input,  width = 64,              .writedata
		.avmm_address   (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_address),   //   input,   width = 3,              .address
		.avmm_write     (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_write),     //   input,   width = 1,              .write
		.avmm_read      (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_read),      //   input,   width = 1,              .read
		.clk            (msgdma_bbb_clk_out_clk_clk),                               //   input,   width = 1,         clock.clk
		.reset          (msgdma_bbb_reset_out_reset_reset)                          //   input,   width = 1,         reset.reset
	);

	msgdma_bbb_dispatcher msgdma_bbb_dispatcher (
		.csr_writedata          (mm_interconnect_1_msgdma_bbb_dispatcher_csr_writedata),  //   input,   width = 32,                  CSR.writedata
		.csr_write              (mm_interconnect_1_msgdma_bbb_dispatcher_csr_write),      //   input,    width = 1,                     .write
		.csr_byteenable         (mm_interconnect_1_msgdma_bbb_dispatcher_csr_byteenable), //   input,    width = 4,                     .byteenable
		.csr_readdata           (mm_interconnect_1_msgdma_bbb_dispatcher_csr_readdata),   //  output,   width = 32,                     .readdata
		.csr_read               (mm_interconnect_1_msgdma_bbb_dispatcher_csr_read),       //   input,    width = 1,                     .read
		.csr_address            (mm_interconnect_1_msgdma_bbb_dispatcher_csr_address),    //   input,    width = 3,                     .address
		.snk_descriptor_data    (msgdma_bbb_frontend_descriptor_source_data),             //   input,  width = 256,      Descriptor_Sink.data
		.snk_descriptor_valid   (msgdma_bbb_frontend_descriptor_source_valid),            //   input,    width = 1,                     .valid
		.snk_descriptor_ready   (msgdma_bbb_frontend_descriptor_source_ready),            //  output,    width = 1,                     .ready
		.src_read_master_data   (msgdma_bbb_dispatcher_read_command_source_data),         //  output,  width = 256,  Read_Command_Source.data
		.src_read_master_valid  (msgdma_bbb_dispatcher_read_command_source_valid),        //  output,    width = 1,                     .valid
		.src_read_master_ready  (msgdma_bbb_dispatcher_read_command_source_ready),        //   input,    width = 1,                     .ready
		.snk_read_master_data   (msgdma_bbb_read_master_response_source_data),            //   input,  width = 256,   Read_Response_Sink.data
		.snk_read_master_valid  (msgdma_bbb_read_master_response_source_valid),           //   input,    width = 1,                     .valid
		.snk_read_master_ready  (msgdma_bbb_read_master_response_source_ready),           //  output,    width = 1,                     .ready
		.src_response_data      (msgdma_bbb_dispatcher_response_source_data),             //  output,  width = 256,      Response_Source.data
		.src_response_valid     (msgdma_bbb_dispatcher_response_source_valid),            //  output,    width = 1,                     .valid
		.src_response_ready     (msgdma_bbb_dispatcher_response_source_ready),            //   input,    width = 1,                     .ready
		.src_write_master_data  (msgdma_bbb_dispatcher_write_command_source_data),        //  output,  width = 256, Write_Command_Source.data
		.src_write_master_valid (msgdma_bbb_dispatcher_write_command_source_valid),       //  output,    width = 1,                     .valid
		.src_write_master_ready (msgdma_bbb_dispatcher_write_command_source_ready),       //   input,    width = 1,                     .ready
		.snk_write_master_data  (msgdma_bbb_write_master_response_source_data),           //   input,  width = 256,  Write_Response_Sink.data
		.snk_write_master_valid (msgdma_bbb_write_master_response_source_valid),          //   input,    width = 1,                     .valid
		.snk_write_master_ready (msgdma_bbb_write_master_response_source_ready),          //  output,    width = 1,                     .ready
		.clk                    (msgdma_bbb_clk_out_clk_clk),                             //   input,    width = 1,                clock.clk
		.reset                  (msgdma_bbb_reset_out_reset_reset)                        //   input,    width = 1,          clock_reset.reset
	);

	msgdma_bbb_frontend msgdma_bbb_frontend (
		.clk                   (msgdma_bbb_clk_out_clk_clk),                                 //   input,    width = 1,                   clock.clk
		.s_address             (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_address),    //   input,    width = 3,               csr_slave.address
		.s_read                (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_read),       //   input,    width = 1,                        .read
		.s_readdata            (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_readdata),   //  output,   width = 64,                        .readdata
		.s_write               (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_write),      //   input,    width = 1,                        .write
		.s_writedata           (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_writedata),  //   input,   width = 64,                        .writedata
		.s_byteenable          (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_byteenable), //   input,    width = 8,                        .byteenable
		.m_fetch_address       (msgdma_bbb_frontend_descriptor_fetch_master_address),        //  output,   width = 49, descriptor_fetch_master.address
		.m_fetch_burst         (msgdma_bbb_frontend_descriptor_fetch_master_burstcount),     //  output,    width = 3,                        .burstcount
		.m_fetch_byteenable    (msgdma_bbb_frontend_descriptor_fetch_master_byteenable),     //  output,   width = 64,                        .byteenable
		.m_fetch_read          (msgdma_bbb_frontend_descriptor_fetch_master_read),           //  output,    width = 1,                        .read
		.m_fetch_readdata      (msgdma_bbb_frontend_descriptor_fetch_master_readdata),       //   input,  width = 512,                        .readdata
		.m_fetch_readdatavalid (msgdma_bbb_frontend_descriptor_fetch_master_readdatavalid),  //   input,    width = 1,                        .readdatavalid
		.m_fetch_waitrequest   (msgdma_bbb_frontend_descriptor_fetch_master_waitrequest),    //   input,    width = 1,                        .waitrequest
		.src_descriptor_data   (msgdma_bbb_frontend_descriptor_source_data),                 //  output,  width = 256,       descriptor_source.data
		.src_descriptor_ready  (msgdma_bbb_frontend_descriptor_source_ready),                //   input,    width = 1,                        .ready
		.src_descriptor_valid  (msgdma_bbb_frontend_descriptor_source_valid),                //  output,    width = 1,                        .valid
		.m_store_address       (msgdma_bbb_frontend_descriptor_store_master_address),        //  output,   width = 49, descriptor_store_master.address
		.m_store_burst         (msgdma_bbb_frontend_descriptor_store_master_burstcount),     //  output,    width = 3,                        .burstcount
		.m_store_byteenable    (msgdma_bbb_frontend_descriptor_store_master_byteenable),     //  output,   width = 64,                        .byteenable
		.m_store_waitrequest   (msgdma_bbb_frontend_descriptor_store_master_waitrequest),    //   input,    width = 1,                        .waitrequest
		.m_store_write         (msgdma_bbb_frontend_descriptor_store_master_write),          //  output,    width = 1,                        .write
		.m_store_writedata     (msgdma_bbb_frontend_descriptor_store_master_writedata),      //  output,  width = 512,                        .writedata
		.reset                 (msgdma_bbb_reset_out_reset_reset),                           //   input,    width = 1,                   reset.reset
		.snk_response_data     (msgdma_bbb_dispatcher_response_source_data),                 //   input,  width = 256,           response_sink.data
		.snk_response_ready    (msgdma_bbb_dispatcher_response_source_ready),                //  output,    width = 1,                        .ready
		.snk_response_valid    (msgdma_bbb_dispatcher_response_source_valid)                 //   input,    width = 1,                        .valid
	);

	msgdma_bbb_host_read_bridge msgdma_bbb_host_read_bridge (
		.s_clk           (msgdma_bbb_clk_out_clk_clk),                                        //   input,    width = 1,    clk.clk
		.m_address       (host_read_address),                                                 //  output,   width = 48, master.address
		.m_byteenable    (host_read_byteenable),                                              //  output,   width = 64,       .byteenable
		.m_burst         (host_read_burstcount),                                              //  output,    width = 3,       .burstcount
		.m_read          (host_read_read),                                                    //  output,    width = 1,       .read
		.m_readdata      (host_read_readdata),                                                //   input,  width = 512,       .readdata
		.m_readdatavalid (host_read_readdatavalid),                                           //   input,    width = 1,       .readdatavalid
		.m_waitrequest   (host_read_waitrequest),                                             //   input,    width = 1,       .waitrequest
		.reset           (msgdma_bbb_reset_out_reset_reset),                                  //   input,    width = 1,  reset.reset
		.s_address       (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_address),       //   input,   width = 48,  slave.address
		.s_byteenable    (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_byteenable),    //   input,   width = 64,       .byteenable
		.s_read          (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_read),          //   input,    width = 1,       .read
		.s_readdata      (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_readdata),      //  output,  width = 512,       .readdata
		.s_readdatavalid (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_readdatavalid), //  output,    width = 1,       .readdatavalid
		.s_waitrequest   (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_waitrequest),   //  output,    width = 1,       .waitrequest
		.s_burst         (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_burstcount)     //   input,    width = 3,       .burstcount
	);

	msgdma_bbb_host_write_bridge msgdma_bbb_host_write_bridge (
		.s_clk                (msgdma_bbb_clk_out_clk_clk),                                              //   input,    width = 1,    clk.clk
		.m_address            (host_write_address),                                                      //  output,   width = 48, master.address
		.m_writedata          (host_write_writedata),                                                    //  output,  width = 512,       .writedata
		.m_byteenable         (host_write_byteenable),                                                   //  output,   width = 64,       .byteenable
		.m_burst              (host_write_burstcount),                                                   //  output,    width = 3,       .burstcount
		.m_write              (host_write_write),                                                        //  output,    width = 1,       .write
		.m_response           (host_write_response),                                                     //   input,    width = 2,       .response
		.m_writeresponsevalid (host_write_writeresponsevalid),                                           //   input,    width = 1,       .writeresponsevalid
		.m_waitrequest        (host_write_waitrequest),                                                  //   input,    width = 1,       .waitrequest
		.reset                (msgdma_bbb_reset_out_reset_reset),                                        //   input,    width = 1,  reset.reset
		.s_address            (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_address),            //   input,   width = 48,  slave.address
		.s_writedata          (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_writedata),          //   input,  width = 512,       .writedata
		.s_byteenable         (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_byteenable),         //   input,   width = 64,       .byteenable
		.s_write              (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_write),              //   input,    width = 1,       .write
		.s_response           (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_response),           //  output,    width = 2,       .response
		.s_writeresponsevalid (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_writeresponsevalid), //  output,    width = 1,       .writeresponsevalid
		.s_waitrequest        (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_waitrequest),        //  output,    width = 1,       .waitrequest
		.s_burst              (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_burstcount)          //   input,    width = 3,       .burstcount
	);

	msgdma_bbb_mem_bridge msgdma_bbb_mem_bridge (
		.s_clk           (msgdma_bbb_clk_out_clk_clk),                                  //   input,    width = 1,    clk.clk
		.m_address       (mem_read_write_address),                                      //  output,   width = 48, master.address
		.m_writedata     (mem_read_write_writedata),                                    //  output,  width = 512,       .writedata
		.m_byteenable    (mem_read_write_byteenable),                                   //  output,   width = 64,       .byteenable
		.m_burst         (mem_read_write_burstcount),                                   //  output,    width = 3,       .burstcount
		.m_write         (mem_read_write_write),                                        //  output,    width = 1,       .write
		.m_read          (mem_read_write_read),                                         //  output,    width = 1,       .read
		.m_readdata      (mem_read_write_readdata),                                     //   input,  width = 512,       .readdata
		.m_readdatavalid (mem_read_write_readdatavalid),                                //   input,    width = 1,       .readdatavalid
		.m_waitrequest   (mem_read_write_waitrequest),                                  //   input,    width = 1,       .waitrequest
		.reset           (msgdma_bbb_reset_out_reset_reset),                            //   input,    width = 1,  reset.reset
		.s_address       (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_address),       //   input,   width = 48,  slave.address
		.s_writedata     (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_writedata),     //   input,  width = 512,       .writedata
		.s_byteenable    (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_byteenable),    //   input,   width = 64,       .byteenable
		.s_write         (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_write),         //   input,    width = 1,       .write
		.s_read          (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_read),          //   input,    width = 1,       .read
		.s_readdata      (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_readdata),      //  output,  width = 512,       .readdata
		.s_readdatavalid (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_readdatavalid), //  output,    width = 1,       .readdatavalid
		.s_waitrequest   (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_waitrequest),   //  output,    width = 1,       .waitrequest
		.s_burst         (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_burstcount)     //   input,    width = 3,       .burstcount
	);

	msgdma_bbb_read_master msgdma_bbb_read_master (
		.clk                  (msgdma_bbb_clk_out_clk_clk),                            //   input,    width = 1,            Clock.clk
		.reset                (msgdma_bbb_reset_out_reset_reset),                      //   input,    width = 1,      Clock_reset.reset
		.snk_command_data     (msgdma_bbb_dispatcher_read_command_source_data),        //   input,  width = 256,     Command_Sink.data
		.snk_command_valid    (msgdma_bbb_dispatcher_read_command_source_valid),       //   input,    width = 1,                 .valid
		.snk_command_ready    (msgdma_bbb_dispatcher_read_command_source_ready),       //  output,    width = 1,                 .ready
		.master_address       (msgdma_bbb_read_master_data_read_master_address),       //  output,   width = 49, Data_Read_Master.address
		.master_read          (msgdma_bbb_read_master_data_read_master_read),          //  output,    width = 1,                 .read
		.master_byteenable    (msgdma_bbb_read_master_data_read_master_byteenable),    //  output,   width = 64,                 .byteenable
		.master_readdata      (msgdma_bbb_read_master_data_read_master_readdata),      //   input,  width = 512,                 .readdata
		.master_waitrequest   (msgdma_bbb_read_master_data_read_master_waitrequest),   //   input,    width = 1,                 .waitrequest
		.master_readdatavalid (msgdma_bbb_read_master_data_read_master_readdatavalid), //   input,    width = 1,                 .readdatavalid
		.master_burstcount    (msgdma_bbb_read_master_data_read_master_burstcount),    //  output,    width = 3,                 .burstcount
		.src_data             (msgdma_bbb_read_master_data_source_data),               //  output,  width = 512,      Data_Source.data
		.src_valid            (msgdma_bbb_read_master_data_source_valid),              //  output,    width = 1,                 .valid
		.src_ready            (msgdma_bbb_read_master_data_source_ready),              //   input,    width = 1,                 .ready
		.src_response_data    (msgdma_bbb_read_master_response_source_data),           //  output,  width = 256,  Response_Source.data
		.src_response_valid   (msgdma_bbb_read_master_response_source_valid),          //  output,    width = 1,                 .valid
		.src_response_ready   (msgdma_bbb_read_master_response_source_ready)           //   input,    width = 1,                 .ready
	);

	msgdma_bbb_reset msgdma_bbb_reset (
		.clk       (msgdma_bbb_clk_out_clk_clk),       //   input,  width = 1,       clk.clk
		.in_reset  (reset_reset),                      //   input,  width = 1,  in_reset.reset
		.out_reset (msgdma_bbb_reset_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	msgdma_bbb_write_master msgdma_bbb_write_master (
		.clk                       (msgdma_bbb_clk_out_clk_clk),                                   //   input,    width = 1,             Clock.clk
		.reset                     (msgdma_bbb_reset_out_reset_reset),                             //   input,    width = 1,       Clock_reset.reset
		.snk_command_data          (msgdma_bbb_dispatcher_write_command_source_data),              //   input,  width = 256,      Command_Sink.data
		.snk_command_valid         (msgdma_bbb_dispatcher_write_command_source_valid),             //   input,    width = 1,                  .valid
		.snk_command_ready         (msgdma_bbb_dispatcher_write_command_source_ready),             //  output,    width = 1,                  .ready
		.snk_data                  (msgdma_bbb_read_master_data_source_data),                      //   input,  width = 512,         Data_Sink.data
		.snk_valid                 (msgdma_bbb_read_master_data_source_valid),                     //   input,    width = 1,                  .valid
		.snk_ready                 (msgdma_bbb_read_master_data_source_ready),                     //  output,    width = 1,                  .ready
		.master_address            (msgdma_bbb_write_master_data_write_master_address),            //  output,   width = 49, Data_Write_Master.address
		.master_write              (msgdma_bbb_write_master_data_write_master_write),              //  output,    width = 1,                  .write
		.master_byteenable         (msgdma_bbb_write_master_data_write_master_byteenable),         //  output,   width = 64,                  .byteenable
		.master_writedata          (msgdma_bbb_write_master_data_write_master_writedata),          //  output,  width = 512,                  .writedata
		.master_waitrequest        (msgdma_bbb_write_master_data_write_master_waitrequest),        //   input,    width = 1,                  .waitrequest
		.master_burstcount         (msgdma_bbb_write_master_data_write_master_burstcount),         //  output,    width = 3,                  .burstcount
		.master_response           (msgdma_bbb_write_master_data_write_master_response),           //   input,    width = 2,                  .response
		.master_writeresponsevalid (msgdma_bbb_write_master_data_write_master_writeresponsevalid), //   input,    width = 1,                  .writeresponsevalid
		.src_response_data         (msgdma_bbb_write_master_response_source_data),                 //  output,  width = 256,   Response_Source.data
		.src_response_valid        (msgdma_bbb_write_master_response_source_valid),                //  output,    width = 1,                  .valid
		.src_response_ready        (msgdma_bbb_write_master_response_source_ready)                 //   input,    width = 1,                  .ready
	);

	msgdma_bbb_altera_mm_interconnect_191_vsftzoi mm_interconnect_0 (
		.msgdma_bbb_read_master_Data_Read_Master_address                                      (msgdma_bbb_read_master_data_read_master_address),                         //   input,   width = 49,                                        msgdma_bbb_read_master_Data_Read_Master.address
		.msgdma_bbb_read_master_Data_Read_Master_waitrequest                                  (msgdma_bbb_read_master_data_read_master_waitrequest),                     //  output,    width = 1,                                                                               .waitrequest
		.msgdma_bbb_read_master_Data_Read_Master_burstcount                                   (msgdma_bbb_read_master_data_read_master_burstcount),                      //   input,    width = 3,                                                                               .burstcount
		.msgdma_bbb_read_master_Data_Read_Master_byteenable                                   (msgdma_bbb_read_master_data_read_master_byteenable),                      //   input,   width = 64,                                                                               .byteenable
		.msgdma_bbb_read_master_Data_Read_Master_read                                         (msgdma_bbb_read_master_data_read_master_read),                            //   input,    width = 1,                                                                               .read
		.msgdma_bbb_read_master_Data_Read_Master_readdata                                     (msgdma_bbb_read_master_data_read_master_readdata),                        //  output,  width = 512,                                                                               .readdata
		.msgdma_bbb_read_master_Data_Read_Master_readdatavalid                                (msgdma_bbb_read_master_data_read_master_readdatavalid),                   //  output,    width = 1,                                                                               .readdatavalid
		.msgdma_bbb_frontend_descriptor_fetch_master_address                                  (msgdma_bbb_frontend_descriptor_fetch_master_address),                     //   input,   width = 49,                                    msgdma_bbb_frontend_descriptor_fetch_master.address
		.msgdma_bbb_frontend_descriptor_fetch_master_waitrequest                              (msgdma_bbb_frontend_descriptor_fetch_master_waitrequest),                 //  output,    width = 1,                                                                               .waitrequest
		.msgdma_bbb_frontend_descriptor_fetch_master_burstcount                               (msgdma_bbb_frontend_descriptor_fetch_master_burstcount),                  //   input,    width = 3,                                                                               .burstcount
		.msgdma_bbb_frontend_descriptor_fetch_master_byteenable                               (msgdma_bbb_frontend_descriptor_fetch_master_byteenable),                  //   input,   width = 64,                                                                               .byteenable
		.msgdma_bbb_frontend_descriptor_fetch_master_read                                     (msgdma_bbb_frontend_descriptor_fetch_master_read),                        //   input,    width = 1,                                                                               .read
		.msgdma_bbb_frontend_descriptor_fetch_master_readdata                                 (msgdma_bbb_frontend_descriptor_fetch_master_readdata),                    //  output,  width = 512,                                                                               .readdata
		.msgdma_bbb_frontend_descriptor_fetch_master_readdatavalid                            (msgdma_bbb_frontend_descriptor_fetch_master_readdatavalid),               //  output,    width = 1,                                                                               .readdatavalid
		.msgdma_bbb_write_master_Data_Write_Master_address                                    (msgdma_bbb_write_master_data_write_master_address),                       //   input,   width = 49,                                      msgdma_bbb_write_master_Data_Write_Master.address
		.msgdma_bbb_write_master_Data_Write_Master_waitrequest                                (msgdma_bbb_write_master_data_write_master_waitrequest),                   //  output,    width = 1,                                                                               .waitrequest
		.msgdma_bbb_write_master_Data_Write_Master_burstcount                                 (msgdma_bbb_write_master_data_write_master_burstcount),                    //   input,    width = 3,                                                                               .burstcount
		.msgdma_bbb_write_master_Data_Write_Master_byteenable                                 (msgdma_bbb_write_master_data_write_master_byteenable),                    //   input,   width = 64,                                                                               .byteenable
		.msgdma_bbb_write_master_Data_Write_Master_write                                      (msgdma_bbb_write_master_data_write_master_write),                         //   input,    width = 1,                                                                               .write
		.msgdma_bbb_write_master_Data_Write_Master_writedata                                  (msgdma_bbb_write_master_data_write_master_writedata),                     //   input,  width = 512,                                                                               .writedata
		.msgdma_bbb_write_master_Data_Write_Master_response                                   (msgdma_bbb_write_master_data_write_master_response),                      //  output,    width = 2,                                                                               .response
		.msgdma_bbb_write_master_Data_Write_Master_writeresponsevalid                         (msgdma_bbb_write_master_data_write_master_writeresponsevalid),            //  output,    width = 1,                                                                               .writeresponsevalid
		.msgdma_bbb_frontend_descriptor_store_master_address                                  (msgdma_bbb_frontend_descriptor_store_master_address),                     //   input,   width = 49,                                    msgdma_bbb_frontend_descriptor_store_master.address
		.msgdma_bbb_frontend_descriptor_store_master_waitrequest                              (msgdma_bbb_frontend_descriptor_store_master_waitrequest),                 //  output,    width = 1,                                                                               .waitrequest
		.msgdma_bbb_frontend_descriptor_store_master_burstcount                               (msgdma_bbb_frontend_descriptor_store_master_burstcount),                  //   input,    width = 3,                                                                               .burstcount
		.msgdma_bbb_frontend_descriptor_store_master_byteenable                               (msgdma_bbb_frontend_descriptor_store_master_byteenable),                  //   input,   width = 64,                                                                               .byteenable
		.msgdma_bbb_frontend_descriptor_store_master_write                                    (msgdma_bbb_frontend_descriptor_store_master_write),                       //   input,    width = 1,                                                                               .write
		.msgdma_bbb_frontend_descriptor_store_master_writedata                                (msgdma_bbb_frontend_descriptor_store_master_writedata),                   //   input,  width = 512,                                                                               .writedata
		.msgdma_bbb_host_read_bridge_slave_address                                            (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_address),             //  output,   width = 48,                                              msgdma_bbb_host_read_bridge_slave.address
		.msgdma_bbb_host_read_bridge_slave_read                                               (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_read),                //  output,    width = 1,                                                                               .read
		.msgdma_bbb_host_read_bridge_slave_readdata                                           (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_readdata),            //   input,  width = 512,                                                                               .readdata
		.msgdma_bbb_host_read_bridge_slave_burstcount                                         (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_burstcount),          //  output,    width = 3,                                                                               .burstcount
		.msgdma_bbb_host_read_bridge_slave_byteenable                                         (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_byteenable),          //  output,   width = 64,                                                                               .byteenable
		.msgdma_bbb_host_read_bridge_slave_readdatavalid                                      (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_readdatavalid),       //   input,    width = 1,                                                                               .readdatavalid
		.msgdma_bbb_host_read_bridge_slave_waitrequest                                        (mm_interconnect_0_msgdma_bbb_host_read_bridge_slave_waitrequest),         //   input,    width = 1,                                                                               .waitrequest
		.msgdma_bbb_mem_bridge_slave_address                                                  (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_address),                   //  output,   width = 48,                                                    msgdma_bbb_mem_bridge_slave.address
		.msgdma_bbb_mem_bridge_slave_write                                                    (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_write),                     //  output,    width = 1,                                                                               .write
		.msgdma_bbb_mem_bridge_slave_read                                                     (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_read),                      //  output,    width = 1,                                                                               .read
		.msgdma_bbb_mem_bridge_slave_readdata                                                 (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_readdata),                  //   input,  width = 512,                                                                               .readdata
		.msgdma_bbb_mem_bridge_slave_writedata                                                (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_writedata),                 //  output,  width = 512,                                                                               .writedata
		.msgdma_bbb_mem_bridge_slave_burstcount                                               (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_burstcount),                //  output,    width = 3,                                                                               .burstcount
		.msgdma_bbb_mem_bridge_slave_byteenable                                               (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_byteenable),                //  output,   width = 64,                                                                               .byteenable
		.msgdma_bbb_mem_bridge_slave_readdatavalid                                            (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_readdatavalid),             //   input,    width = 1,                                                                               .readdatavalid
		.msgdma_bbb_mem_bridge_slave_waitrequest                                              (mm_interconnect_0_msgdma_bbb_mem_bridge_slave_waitrequest),               //   input,    width = 1,                                                                               .waitrequest
		.msgdma_bbb_host_write_bridge_slave_address                                           (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_address),            //  output,   width = 48,                                             msgdma_bbb_host_write_bridge_slave.address
		.msgdma_bbb_host_write_bridge_slave_write                                             (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_write),              //  output,    width = 1,                                                                               .write
		.msgdma_bbb_host_write_bridge_slave_writedata                                         (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_writedata),          //  output,  width = 512,                                                                               .writedata
		.msgdma_bbb_host_write_bridge_slave_burstcount                                        (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_burstcount),         //  output,    width = 3,                                                                               .burstcount
		.msgdma_bbb_host_write_bridge_slave_byteenable                                        (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_byteenable),         //  output,   width = 64,                                                                               .byteenable
		.msgdma_bbb_host_write_bridge_slave_waitrequest                                       (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_waitrequest),        //   input,    width = 1,                                                                               .waitrequest
		.msgdma_bbb_host_write_bridge_slave_response                                          (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_response),           //   input,    width = 2,                                                                               .response
		.msgdma_bbb_host_write_bridge_slave_writeresponsevalid                                (mm_interconnect_0_msgdma_bbb_host_write_bridge_slave_writeresponsevalid), //   input,    width = 1,                                                                               .writeresponsevalid
		.msgdma_bbb_read_master_Data_Read_Master_translator_reset_reset_bridge_in_reset_reset (msgdma_bbb_reset_out_reset_reset),                                        //   input,    width = 1, msgdma_bbb_read_master_Data_Read_Master_translator_reset_reset_bridge_in_reset.reset
		.msgdma_bbb_clk_out_clk_clk                                                           (msgdma_bbb_clk_out_clk_clk)                                               //   input,    width = 1,                                                         msgdma_bbb_clk_out_clk.clk
	);

	msgdma_bbb_altera_mm_interconnect_191_ovqvmwq mm_interconnect_1 (
		.msgdma_bbb_csr_master_address                                      (msgdma_bbb_csr_master_address),                              //   input,   width = 8,                                        msgdma_bbb_csr_master.address
		.msgdma_bbb_csr_master_waitrequest                                  (msgdma_bbb_csr_master_waitrequest),                          //  output,   width = 1,                                                             .waitrequest
		.msgdma_bbb_csr_master_burstcount                                   (msgdma_bbb_csr_master_burstcount),                           //   input,   width = 1,                                                             .burstcount
		.msgdma_bbb_csr_master_byteenable                                   (msgdma_bbb_csr_master_byteenable),                           //   input,   width = 8,                                                             .byteenable
		.msgdma_bbb_csr_master_read                                         (msgdma_bbb_csr_master_read),                                 //   input,   width = 1,                                                             .read
		.msgdma_bbb_csr_master_readdata                                     (msgdma_bbb_csr_master_readdata),                             //  output,  width = 64,                                                             .readdata
		.msgdma_bbb_csr_master_readdatavalid                                (msgdma_bbb_csr_master_readdatavalid),                        //  output,   width = 1,                                                             .readdatavalid
		.msgdma_bbb_csr_master_write                                        (msgdma_bbb_csr_master_write),                                //   input,   width = 1,                                                             .write
		.msgdma_bbb_csr_master_writedata                                    (msgdma_bbb_csr_master_writedata),                            //   input,  width = 64,                                                             .writedata
		.msgdma_bbb_dispatcher_CSR_address                                  (mm_interconnect_1_msgdma_bbb_dispatcher_csr_address),        //  output,   width = 3,                                    msgdma_bbb_dispatcher_CSR.address
		.msgdma_bbb_dispatcher_CSR_write                                    (mm_interconnect_1_msgdma_bbb_dispatcher_csr_write),          //  output,   width = 1,                                                             .write
		.msgdma_bbb_dispatcher_CSR_read                                     (mm_interconnect_1_msgdma_bbb_dispatcher_csr_read),           //  output,   width = 1,                                                             .read
		.msgdma_bbb_dispatcher_CSR_readdata                                 (mm_interconnect_1_msgdma_bbb_dispatcher_csr_readdata),       //   input,  width = 32,                                                             .readdata
		.msgdma_bbb_dispatcher_CSR_writedata                                (mm_interconnect_1_msgdma_bbb_dispatcher_csr_writedata),      //  output,  width = 32,                                                             .writedata
		.msgdma_bbb_dispatcher_CSR_byteenable                               (mm_interconnect_1_msgdma_bbb_dispatcher_csr_byteenable),     //  output,   width = 4,                                                             .byteenable
		.msgdma_bbb_dfh_afu_cfg_slave_address                               (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_address),     //  output,   width = 3,                                 msgdma_bbb_dfh_afu_cfg_slave.address
		.msgdma_bbb_dfh_afu_cfg_slave_write                                 (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_write),       //  output,   width = 1,                                                             .write
		.msgdma_bbb_dfh_afu_cfg_slave_read                                  (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_read),        //  output,   width = 1,                                                             .read
		.msgdma_bbb_dfh_afu_cfg_slave_readdata                              (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_readdata),    //   input,  width = 64,                                                             .readdata
		.msgdma_bbb_dfh_afu_cfg_slave_writedata                             (mm_interconnect_1_msgdma_bbb_dfh_afu_cfg_slave_writedata),   //  output,  width = 64,                                                             .writedata
		.msgdma_bbb_frontend_csr_slave_address                              (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_address),    //  output,   width = 3,                                msgdma_bbb_frontend_csr_slave.address
		.msgdma_bbb_frontend_csr_slave_write                                (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_write),      //  output,   width = 1,                                                             .write
		.msgdma_bbb_frontend_csr_slave_read                                 (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_read),       //  output,   width = 1,                                                             .read
		.msgdma_bbb_frontend_csr_slave_readdata                             (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_readdata),   //   input,  width = 64,                                                             .readdata
		.msgdma_bbb_frontend_csr_slave_writedata                            (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_writedata),  //  output,  width = 64,                                                             .writedata
		.msgdma_bbb_frontend_csr_slave_byteenable                           (mm_interconnect_1_msgdma_bbb_frontend_csr_slave_byteenable), //  output,   width = 8,                                                             .byteenable
		.msgdma_bbb_csr_master_translator_reset_reset_bridge_in_reset_reset (msgdma_bbb_reset_out_reset_reset),                           //   input,   width = 1, msgdma_bbb_csr_master_translator_reset_reset_bridge_in_reset.reset
		.msgdma_bbb_clk_out_clk_clk                                         (msgdma_bbb_clk_out_clk_clk)                                  //   input,   width = 1,                                       msgdma_bbb_clk_out_clk.clk
	);

endmodule
