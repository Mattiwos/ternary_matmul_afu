// matmul_afu_system_fixed_altera_mm_interconnect_191_mph7jaq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module matmul_afu_system_fixed_altera_mm_interconnect_191_mph7jaq (
		input  wire [32:0]  matmul_afu_matmul_ddr4a_bridge_m0_address,                        //                          matmul_afu_matmul_ddr4a_bridge_m0.address
		output wire         matmul_afu_matmul_ddr4a_bridge_m0_waitrequest,                    //                                                           .waitrequest
		input  wire [0:0]   matmul_afu_matmul_ddr4a_bridge_m0_burstcount,                     //                                                           .burstcount
		input  wire [0:0]   matmul_afu_matmul_ddr4a_bridge_m0_byteenable,                     //                                                           .byteenable
		input  wire         matmul_afu_matmul_ddr4a_bridge_m0_read,                           //                                                           .read
		output wire [7:0]   matmul_afu_matmul_ddr4a_bridge_m0_readdata,                       //                                                           .readdata
		output wire         matmul_afu_matmul_ddr4a_bridge_m0_readdatavalid,                  //                                                           .readdatavalid
		input  wire         matmul_afu_matmul_ddr4a_bridge_m0_write,                          //                                                           .write
		input  wire [7:0]   matmul_afu_matmul_ddr4a_bridge_m0_writedata,                      //                                                           .writedata
		input  wire         matmul_afu_matmul_ddr4a_bridge_m0_debugaccess,                    //                                                           .debugaccess
		input  wire [47:0]  msgdma_bbb_mem_read_write_address,                                //                                  msgdma_bbb_mem_read_write.address
		output wire         msgdma_bbb_mem_read_write_waitrequest,                            //                                                           .waitrequest
		input  wire [2:0]   msgdma_bbb_mem_read_write_burstcount,                             //                                                           .burstcount
		input  wire [63:0]  msgdma_bbb_mem_read_write_byteenable,                             //                                                           .byteenable
		input  wire         msgdma_bbb_mem_read_write_read,                                   //                                                           .read
		output wire [511:0] msgdma_bbb_mem_read_write_readdata,                               //                                                           .readdata
		output wire         msgdma_bbb_mem_read_write_readdatavalid,                          //                                                           .readdatavalid
		input  wire         msgdma_bbb_mem_read_write_write,                                  //                                                           .write
		input  wire [511:0] msgdma_bbb_mem_read_write_writedata,                              //                                                           .writedata
		output wire [32:0]  matmul_afu_ddr4_bridge_s0_address,                                //                                  matmul_afu_ddr4_bridge_s0.address
		output wire         matmul_afu_ddr4_bridge_s0_write,                                  //                                                           .write
		output wire         matmul_afu_ddr4_bridge_s0_read,                                   //                                                           .read
		input  wire [511:0] matmul_afu_ddr4_bridge_s0_readdata,                               //                                                           .readdata
		output wire [511:0] matmul_afu_ddr4_bridge_s0_writedata,                              //                                                           .writedata
		output wire [2:0]   matmul_afu_ddr4_bridge_s0_burstcount,                             //                                                           .burstcount
		output wire [63:0]  matmul_afu_ddr4_bridge_s0_byteenable,                             //                                                           .byteenable
		input  wire         matmul_afu_ddr4_bridge_s0_readdatavalid,                          //                                                           .readdatavalid
		input  wire         matmul_afu_ddr4_bridge_s0_waitrequest,                            //                                                           .waitrequest
		output wire         matmul_afu_ddr4_bridge_s0_debugaccess,                            //                                                           .debugaccess
		input  wire         matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset, // matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset.reset
		input  wire         msgdma_bbb_reset_reset_bridge_in_reset_reset,                     //                     msgdma_bbb_reset_reset_bridge_in_reset.reset
		input  wire         matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset,         //         matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset.reset
		input  wire         async_fifo_in_clk_reset_reset_bridge_in_reset_reset,              //              async_fifo_in_clk_reset_reset_bridge_in_reset.reset
		input  wire         matmul_afu_matmul_clock_out_clk_clk,                              //                            matmul_afu_matmul_clock_out_clk.clk
		input  wire         matmul_afu_dma_clock_out_clk_clk                                  //                               matmul_afu_dma_clock_out_clk.clk
	);

	wire          matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_waitrequest;                              // matmul_afu_matmul_ddr4a_bridge_m0_agent:av_waitrequest -> matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_waitrequest
	wire    [7:0] matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_readdata;                                 // matmul_afu_matmul_ddr4a_bridge_m0_agent:av_readdata -> matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_readdata
	wire          matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_debugaccess;                              // matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_debugaccess -> matmul_afu_matmul_ddr4a_bridge_m0_agent:av_debugaccess
	wire   [47:0] matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_address;                                  // matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_address -> matmul_afu_matmul_ddr4a_bridge_m0_agent:av_address
	wire          matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_read;                                     // matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_read -> matmul_afu_matmul_ddr4a_bridge_m0_agent:av_read
	wire    [0:0] matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_byteenable;                               // matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_byteenable -> matmul_afu_matmul_ddr4a_bridge_m0_agent:av_byteenable
	wire          matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_readdatavalid;                            // matmul_afu_matmul_ddr4a_bridge_m0_agent:av_readdatavalid -> matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_readdatavalid
	wire          matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_lock;                                     // matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_lock -> matmul_afu_matmul_ddr4a_bridge_m0_agent:av_lock
	wire          matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_write;                                    // matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_write -> matmul_afu_matmul_ddr4a_bridge_m0_agent:av_write
	wire    [7:0] matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_writedata;                                // matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_writedata -> matmul_afu_matmul_ddr4a_bridge_m0_agent:av_writedata
	wire    [0:0] matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_burstcount;                               // matmul_afu_matmul_ddr4a_bridge_m0_translator:uav_burstcount -> matmul_afu_matmul_ddr4a_bridge_m0_agent:av_burstcount
	wire          msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_waitrequest;                                      // msgdma_bbb_mem_read_write_agent:av_waitrequest -> msgdma_bbb_mem_read_write_translator:uav_waitrequest
	wire  [511:0] msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_readdata;                                         // msgdma_bbb_mem_read_write_agent:av_readdata -> msgdma_bbb_mem_read_write_translator:uav_readdata
	wire          msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_debugaccess;                                      // msgdma_bbb_mem_read_write_translator:uav_debugaccess -> msgdma_bbb_mem_read_write_agent:av_debugaccess
	wire   [47:0] msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_address;                                          // msgdma_bbb_mem_read_write_translator:uav_address -> msgdma_bbb_mem_read_write_agent:av_address
	wire          msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_read;                                             // msgdma_bbb_mem_read_write_translator:uav_read -> msgdma_bbb_mem_read_write_agent:av_read
	wire   [63:0] msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_byteenable;                                       // msgdma_bbb_mem_read_write_translator:uav_byteenable -> msgdma_bbb_mem_read_write_agent:av_byteenable
	wire          msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_readdatavalid;                                    // msgdma_bbb_mem_read_write_agent:av_readdatavalid -> msgdma_bbb_mem_read_write_translator:uav_readdatavalid
	wire          msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_lock;                                             // msgdma_bbb_mem_read_write_translator:uav_lock -> msgdma_bbb_mem_read_write_agent:av_lock
	wire          msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_write;                                            // msgdma_bbb_mem_read_write_translator:uav_write -> msgdma_bbb_mem_read_write_agent:av_write
	wire  [511:0] msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_writedata;                                        // msgdma_bbb_mem_read_write_translator:uav_writedata -> msgdma_bbb_mem_read_write_agent:av_writedata
	wire    [8:0] msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_burstcount;                                       // msgdma_bbb_mem_read_write_translator:uav_burstcount -> msgdma_bbb_mem_read_write_agent:av_burstcount
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awburst;                                             // domain_0_default_slave_axi_error_if_agent:awburst -> domain_0_default_slave:awburst
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlen;                                               // domain_0_default_slave_axi_error_if_agent:arlen -> domain_0_default_slave:arlen
	wire   [15:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_wstrb;                                               // domain_0_default_slave_axi_error_if_agent:wstrb -> domain_0_default_slave:wstrb
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_wready;                                              // domain_0_default_slave:wready -> domain_0_default_slave_axi_error_if_agent:wready
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_rid;                                                 // domain_0_default_slave:rid -> domain_0_default_slave_axi_error_if_agent:rid
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_rready;                                              // domain_0_default_slave_axi_error_if_agent:rready -> domain_0_default_slave:rready
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlen;                                               // domain_0_default_slave_axi_error_if_agent:awlen -> domain_0_default_slave:awlen
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_wid;                                                 // domain_0_default_slave_axi_error_if_agent:wid -> domain_0_default_slave:wid
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arcache;                                             // domain_0_default_slave_axi_error_if_agent:arcache -> domain_0_default_slave:arcache
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_wvalid;                                              // domain_0_default_slave_axi_error_if_agent:wvalid -> domain_0_default_slave:wvalid
	wire   [47:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_araddr;                                              // domain_0_default_slave_axi_error_if_agent:araddr -> domain_0_default_slave:araddr
	wire    [2:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arprot;                                              // domain_0_default_slave_axi_error_if_agent:arprot -> domain_0_default_slave:arprot
	wire    [2:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awprot;                                              // domain_0_default_slave_axi_error_if_agent:awprot -> domain_0_default_slave:awprot
	wire  [127:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_wdata;                                               // domain_0_default_slave_axi_error_if_agent:wdata -> domain_0_default_slave:wdata
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_arvalid;                                             // domain_0_default_slave_axi_error_if_agent:arvalid -> domain_0_default_slave:arvalid
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awcache;                                             // domain_0_default_slave_axi_error_if_agent:awcache -> domain_0_default_slave:awcache
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arid;                                                // domain_0_default_slave_axi_error_if_agent:arid -> domain_0_default_slave:arid
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlock;                                              // domain_0_default_slave_axi_error_if_agent:arlock -> domain_0_default_slave:arlock
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlock;                                              // domain_0_default_slave_axi_error_if_agent:awlock -> domain_0_default_slave:awlock
	wire   [47:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awaddr;                                              // domain_0_default_slave_axi_error_if_agent:awaddr -> domain_0_default_slave:awaddr
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_bresp;                                               // domain_0_default_slave:bresp -> domain_0_default_slave_axi_error_if_agent:bresp
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_arready;                                             // domain_0_default_slave:arready -> domain_0_default_slave_axi_error_if_agent:arready
	wire  [127:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_rdata;                                               // domain_0_default_slave:rdata -> domain_0_default_slave_axi_error_if_agent:rdata
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_awready;                                             // domain_0_default_slave:awready -> domain_0_default_slave_axi_error_if_agent:awready
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arburst;                                             // domain_0_default_slave_axi_error_if_agent:arburst -> domain_0_default_slave:arburst
	wire    [2:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arsize;                                              // domain_0_default_slave_axi_error_if_agent:arsize -> domain_0_default_slave:arsize
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_bready;                                              // domain_0_default_slave_axi_error_if_agent:bready -> domain_0_default_slave:bready
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_rlast;                                               // domain_0_default_slave:rlast -> domain_0_default_slave_axi_error_if_agent:rlast
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_wlast;                                               // domain_0_default_slave_axi_error_if_agent:wlast -> domain_0_default_slave:wlast
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_rresp;                                               // domain_0_default_slave:rresp -> domain_0_default_slave_axi_error_if_agent:rresp
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awid;                                                // domain_0_default_slave_axi_error_if_agent:awid -> domain_0_default_slave:awid
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_bid;                                                 // domain_0_default_slave:bid -> domain_0_default_slave_axi_error_if_agent:bid
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_bvalid;                                              // domain_0_default_slave:bvalid -> domain_0_default_slave_axi_error_if_agent:bvalid
	wire    [2:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awsize;                                              // domain_0_default_slave_axi_error_if_agent:awsize -> domain_0_default_slave:awsize
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_awvalid;                                             // domain_0_default_slave_axi_error_if_agent:awvalid -> domain_0_default_slave:awvalid
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_rvalid;                                              // domain_0_default_slave:rvalid -> domain_0_default_slave_axi_error_if_agent:rvalid
	wire          cmd_mux_src_valid;                                                                                               // cmd_mux:src_valid -> domain_0_default_slave_axi_error_if_agent:write_cp_valid
	wire  [248:0] cmd_mux_src_data;                                                                                                // cmd_mux:src_data -> domain_0_default_slave_axi_error_if_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                                                               // domain_0_default_slave_axi_error_if_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                                                             // cmd_mux:src_channel -> domain_0_default_slave_axi_error_if_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                                                                       // cmd_mux:src_startofpacket -> domain_0_default_slave_axi_error_if_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                                         // cmd_mux:src_endofpacket -> domain_0_default_slave_axi_error_if_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                           // cmd_mux_001:src_valid -> domain_0_default_slave_axi_error_if_agent:read_cp_valid
	wire  [248:0] cmd_mux_001_src_data;                                                                                            // cmd_mux_001:src_data -> domain_0_default_slave_axi_error_if_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                                                           // domain_0_default_slave_axi_error_if_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                                                                         // cmd_mux_001:src_channel -> domain_0_default_slave_axi_error_if_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                                                   // cmd_mux_001:src_startofpacket -> domain_0_default_slave_axi_error_if_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                                     // cmd_mux_001:src_endofpacket -> domain_0_default_slave_axi_error_if_agent:read_cp_endofpacket
	wire  [511:0] matmul_afu_ddr4_bridge_s0_agent_m0_readdata;                                                                     // matmul_afu_ddr4_bridge_s0_translator:uav_readdata -> matmul_afu_ddr4_bridge_s0_agent:m0_readdata
	wire          matmul_afu_ddr4_bridge_s0_agent_m0_waitrequest;                                                                  // matmul_afu_ddr4_bridge_s0_translator:uav_waitrequest -> matmul_afu_ddr4_bridge_s0_agent:m0_waitrequest
	wire          matmul_afu_ddr4_bridge_s0_agent_m0_debugaccess;                                                                  // matmul_afu_ddr4_bridge_s0_agent:m0_debugaccess -> matmul_afu_ddr4_bridge_s0_translator:uav_debugaccess
	wire   [47:0] matmul_afu_ddr4_bridge_s0_agent_m0_address;                                                                      // matmul_afu_ddr4_bridge_s0_agent:m0_address -> matmul_afu_ddr4_bridge_s0_translator:uav_address
	wire   [63:0] matmul_afu_ddr4_bridge_s0_agent_m0_byteenable;                                                                   // matmul_afu_ddr4_bridge_s0_agent:m0_byteenable -> matmul_afu_ddr4_bridge_s0_translator:uav_byteenable
	wire          matmul_afu_ddr4_bridge_s0_agent_m0_read;                                                                         // matmul_afu_ddr4_bridge_s0_agent:m0_read -> matmul_afu_ddr4_bridge_s0_translator:uav_read
	wire          matmul_afu_ddr4_bridge_s0_agent_m0_readdatavalid;                                                                // matmul_afu_ddr4_bridge_s0_translator:uav_readdatavalid -> matmul_afu_ddr4_bridge_s0_agent:m0_readdatavalid
	wire          matmul_afu_ddr4_bridge_s0_agent_m0_lock;                                                                         // matmul_afu_ddr4_bridge_s0_agent:m0_lock -> matmul_afu_ddr4_bridge_s0_translator:uav_lock
	wire  [511:0] matmul_afu_ddr4_bridge_s0_agent_m0_writedata;                                                                    // matmul_afu_ddr4_bridge_s0_agent:m0_writedata -> matmul_afu_ddr4_bridge_s0_translator:uav_writedata
	wire          matmul_afu_ddr4_bridge_s0_agent_m0_write;                                                                        // matmul_afu_ddr4_bridge_s0_agent:m0_write -> matmul_afu_ddr4_bridge_s0_translator:uav_write
	wire    [8:0] matmul_afu_ddr4_bridge_s0_agent_m0_burstcount;                                                                   // matmul_afu_ddr4_bridge_s0_agent:m0_burstcount -> matmul_afu_ddr4_bridge_s0_translator:uav_burstcount
	wire          matmul_afu_ddr4_bridge_s0_agent_rf_source_valid;                                                                 // matmul_afu_ddr4_bridge_s0_agent:rf_source_valid -> matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:in_valid
	wire  [681:0] matmul_afu_ddr4_bridge_s0_agent_rf_source_data;                                                                  // matmul_afu_ddr4_bridge_s0_agent:rf_source_data -> matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:in_data
	wire          matmul_afu_ddr4_bridge_s0_agent_rf_source_ready;                                                                 // matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:in_ready -> matmul_afu_ddr4_bridge_s0_agent:rf_source_ready
	wire          matmul_afu_ddr4_bridge_s0_agent_rf_source_startofpacket;                                                         // matmul_afu_ddr4_bridge_s0_agent:rf_source_startofpacket -> matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire          matmul_afu_ddr4_bridge_s0_agent_rf_source_endofpacket;                                                           // matmul_afu_ddr4_bridge_s0_agent:rf_source_endofpacket -> matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_valid;                                                              // matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:out_valid -> matmul_afu_ddr4_bridge_s0_agent:rf_sink_valid
	wire  [681:0] matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_data;                                                               // matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:out_data -> matmul_afu_ddr4_bridge_s0_agent:rf_sink_data
	wire          matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_ready;                                                              // matmul_afu_ddr4_bridge_s0_agent:rf_sink_ready -> matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:out_ready
	wire          matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_startofpacket;                                                      // matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:out_startofpacket -> matmul_afu_ddr4_bridge_s0_agent:rf_sink_startofpacket
	wire          matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_endofpacket;                                                        // matmul_afu_ddr4_bridge_s0_agent_rsp_fifo:out_endofpacket -> matmul_afu_ddr4_bridge_s0_agent:rf_sink_endofpacket
	wire          matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_src_valid;                                                            // matmul_afu_ddr4_bridge_s0_agent:rdata_fifo_src_valid -> matmul_afu_ddr4_bridge_s0_agent_rdata_fifo:in_valid
	wire  [513:0] matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_src_data;                                                             // matmul_afu_ddr4_bridge_s0_agent:rdata_fifo_src_data -> matmul_afu_ddr4_bridge_s0_agent_rdata_fifo:in_data
	wire          matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_src_ready;                                                            // matmul_afu_ddr4_bridge_s0_agent_rdata_fifo:in_ready -> matmul_afu_ddr4_bridge_s0_agent:rdata_fifo_src_ready
	wire          matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_out_valid;                                                            // matmul_afu_ddr4_bridge_s0_agent_rdata_fifo:out_valid -> matmul_afu_ddr4_bridge_s0_agent:rdata_fifo_sink_valid
	wire  [513:0] matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_out_data;                                                             // matmul_afu_ddr4_bridge_s0_agent_rdata_fifo:out_data -> matmul_afu_ddr4_bridge_s0_agent:rdata_fifo_sink_data
	wire          matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_out_ready;                                                            // matmul_afu_ddr4_bridge_s0_agent:rdata_fifo_sink_ready -> matmul_afu_ddr4_bridge_s0_agent_rdata_fifo:out_ready
	wire          matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_valid;                                                                // matmul_afu_matmul_ddr4a_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [113:0] matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_data;                                                                 // matmul_afu_matmul_ddr4a_bridge_m0_agent:cp_data -> router:sink_data
	wire          matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_ready;                                                                // router:sink_ready -> matmul_afu_matmul_ddr4a_bridge_m0_agent:cp_ready
	wire          matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_startofpacket;                                                        // matmul_afu_matmul_ddr4a_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_endofpacket;                                                          // matmul_afu_matmul_ddr4a_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          msgdma_bbb_mem_read_write_agent_cp_valid;                                                                        // msgdma_bbb_mem_read_write_agent:cp_valid -> router_001:sink_valid
	wire  [680:0] msgdma_bbb_mem_read_write_agent_cp_data;                                                                         // msgdma_bbb_mem_read_write_agent:cp_data -> router_001:sink_data
	wire          msgdma_bbb_mem_read_write_agent_cp_ready;                                                                        // router_001:sink_ready -> msgdma_bbb_mem_read_write_agent:cp_ready
	wire          msgdma_bbb_mem_read_write_agent_cp_startofpacket;                                                                // msgdma_bbb_mem_read_write_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          msgdma_bbb_mem_read_write_agent_cp_endofpacket;                                                                  // msgdma_bbb_mem_read_write_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          domain_0_default_slave_axi_error_if_agent_write_rp_valid;                                                        // domain_0_default_slave_axi_error_if_agent:write_rp_valid -> router_002:sink_valid
	wire  [248:0] domain_0_default_slave_axi_error_if_agent_write_rp_data;                                                         // domain_0_default_slave_axi_error_if_agent:write_rp_data -> router_002:sink_data
	wire          domain_0_default_slave_axi_error_if_agent_write_rp_ready;                                                        // router_002:sink_ready -> domain_0_default_slave_axi_error_if_agent:write_rp_ready
	wire          domain_0_default_slave_axi_error_if_agent_write_rp_startofpacket;                                                // domain_0_default_slave_axi_error_if_agent:write_rp_startofpacket -> router_002:sink_startofpacket
	wire          domain_0_default_slave_axi_error_if_agent_write_rp_endofpacket;                                                  // domain_0_default_slave_axi_error_if_agent:write_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                                            // router_002:src_valid -> rsp_demux:sink_valid
	wire  [248:0] router_002_src_data;                                                                                             // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                                                            // rsp_demux:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                                                          // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                                                    // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                                      // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          domain_0_default_slave_axi_error_if_agent_read_rp_valid;                                                         // domain_0_default_slave_axi_error_if_agent:read_rp_valid -> router_003:sink_valid
	wire  [248:0] domain_0_default_slave_axi_error_if_agent_read_rp_data;                                                          // domain_0_default_slave_axi_error_if_agent:read_rp_data -> router_003:sink_data
	wire          domain_0_default_slave_axi_error_if_agent_read_rp_ready;                                                         // router_003:sink_ready -> domain_0_default_slave_axi_error_if_agent:read_rp_ready
	wire          domain_0_default_slave_axi_error_if_agent_read_rp_startofpacket;                                                 // domain_0_default_slave_axi_error_if_agent:read_rp_startofpacket -> router_003:sink_startofpacket
	wire          domain_0_default_slave_axi_error_if_agent_read_rp_endofpacket;                                                   // domain_0_default_slave_axi_error_if_agent:read_rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                            // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [248:0] router_003_src_data;                                                                                             // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                                                            // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                                                          // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                                                    // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                                      // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          matmul_afu_ddr4_bridge_s0_agent_rp_valid;                                                                        // matmul_afu_ddr4_bridge_s0_agent:rp_valid -> router_004:sink_valid
	wire  [680:0] matmul_afu_ddr4_bridge_s0_agent_rp_data;                                                                         // matmul_afu_ddr4_bridge_s0_agent:rp_data -> router_004:sink_data
	wire          matmul_afu_ddr4_bridge_s0_agent_rp_ready;                                                                        // router_004:sink_ready -> matmul_afu_ddr4_bridge_s0_agent:rp_ready
	wire          matmul_afu_ddr4_bridge_s0_agent_rp_startofpacket;                                                                // matmul_afu_ddr4_bridge_s0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          matmul_afu_ddr4_bridge_s0_agent_rp_endofpacket;                                                                  // matmul_afu_ddr4_bridge_s0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                            // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [680:0] router_004_src_data;                                                                                             // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                                                            // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [2:0] router_004_src_channel;                                                                                          // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                                                    // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                                      // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_src_valid;                                                                                                // router:src_valid -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_sink_valid
	wire  [113:0] router_src_data;                                                                                                 // router:src_data -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                                                                // matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                                                              // router:src_channel -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                                        // router:src_startofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                                          // router:src_endofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_sink_endofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_valid;                                                         // matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_src_valid -> matmul_afu_matmul_ddr4a_bridge_m0_agent:rp_valid
	wire  [113:0] matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_data;                                                          // matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_src_data -> matmul_afu_matmul_ddr4a_bridge_m0_agent:rp_data
	wire          matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_ready;                                                         // matmul_afu_matmul_ddr4a_bridge_m0_agent:rp_ready -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_src_ready
	wire    [2:0] matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_channel;                                                       // matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_src_channel -> matmul_afu_matmul_ddr4a_bridge_m0_agent:rp_channel
	wire          matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_startofpacket;                                                 // matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_src_startofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_agent:rp_startofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_endofpacket;                                                   // matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_src_endofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                                            // router_001:src_valid -> msgdma_bbb_mem_read_write_limiter:cmd_sink_valid
	wire  [680:0] router_001_src_data;                                                                                             // router_001:src_data -> msgdma_bbb_mem_read_write_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                                            // msgdma_bbb_mem_read_write_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                                                          // router_001:src_channel -> msgdma_bbb_mem_read_write_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                                    // router_001:src_startofpacket -> msgdma_bbb_mem_read_write_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                                      // router_001:src_endofpacket -> msgdma_bbb_mem_read_write_limiter:cmd_sink_endofpacket
	wire          msgdma_bbb_mem_read_write_limiter_rsp_src_valid;                                                                 // msgdma_bbb_mem_read_write_limiter:rsp_src_valid -> msgdma_bbb_mem_read_write_agent:rp_valid
	wire  [680:0] msgdma_bbb_mem_read_write_limiter_rsp_src_data;                                                                  // msgdma_bbb_mem_read_write_limiter:rsp_src_data -> msgdma_bbb_mem_read_write_agent:rp_data
	wire          msgdma_bbb_mem_read_write_limiter_rsp_src_ready;                                                                 // msgdma_bbb_mem_read_write_agent:rp_ready -> msgdma_bbb_mem_read_write_limiter:rsp_src_ready
	wire    [2:0] msgdma_bbb_mem_read_write_limiter_rsp_src_channel;                                                               // msgdma_bbb_mem_read_write_limiter:rsp_src_channel -> msgdma_bbb_mem_read_write_agent:rp_channel
	wire          msgdma_bbb_mem_read_write_limiter_rsp_src_startofpacket;                                                         // msgdma_bbb_mem_read_write_limiter:rsp_src_startofpacket -> msgdma_bbb_mem_read_write_agent:rp_startofpacket
	wire          msgdma_bbb_mem_read_write_limiter_rsp_src_endofpacket;                                                           // msgdma_bbb_mem_read_write_limiter:rsp_src_endofpacket -> msgdma_bbb_mem_read_write_agent:rp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                           // cmd_mux_002:src_valid -> matmul_afu_ddr4_bridge_s0_burst_adapter:sink0_valid
	wire  [680:0] cmd_mux_002_src_data;                                                                                            // cmd_mux_002:src_data -> matmul_afu_ddr4_bridge_s0_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                                           // matmul_afu_ddr4_bridge_s0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                                                                         // cmd_mux_002:src_channel -> matmul_afu_ddr4_bridge_s0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                                                   // cmd_mux_002:src_startofpacket -> matmul_afu_ddr4_bridge_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                                     // cmd_mux_002:src_endofpacket -> matmul_afu_ddr4_bridge_s0_burst_adapter:sink0_endofpacket
	wire          matmul_afu_ddr4_bridge_s0_burst_adapter_source0_valid;                                                           // matmul_afu_ddr4_bridge_s0_burst_adapter:source0_valid -> matmul_afu_ddr4_bridge_s0_agent:cp_valid
	wire  [680:0] matmul_afu_ddr4_bridge_s0_burst_adapter_source0_data;                                                            // matmul_afu_ddr4_bridge_s0_burst_adapter:source0_data -> matmul_afu_ddr4_bridge_s0_agent:cp_data
	wire          matmul_afu_ddr4_bridge_s0_burst_adapter_source0_ready;                                                           // matmul_afu_ddr4_bridge_s0_agent:cp_ready -> matmul_afu_ddr4_bridge_s0_burst_adapter:source0_ready
	wire    [2:0] matmul_afu_ddr4_bridge_s0_burst_adapter_source0_channel;                                                         // matmul_afu_ddr4_bridge_s0_burst_adapter:source0_channel -> matmul_afu_ddr4_bridge_s0_agent:cp_channel
	wire          matmul_afu_ddr4_bridge_s0_burst_adapter_source0_startofpacket;                                                   // matmul_afu_ddr4_bridge_s0_burst_adapter:source0_startofpacket -> matmul_afu_ddr4_bridge_s0_agent:cp_startofpacket
	wire          matmul_afu_ddr4_bridge_s0_burst_adapter_source0_endofpacket;                                                     // matmul_afu_ddr4_bridge_s0_burst_adapter:source0_endofpacket -> matmul_afu_ddr4_bridge_s0_agent:cp_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                                        // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [680:0] cmd_demux_001_src2_data;                                                                                         // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                                        // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [2:0] cmd_demux_001_src2_channel;                                                                                      // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                                                // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                                  // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                                        // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [680:0] rsp_demux_002_src1_data;                                                                                         // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                                                        // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [2:0] rsp_demux_002_src1_channel;                                                                                      // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                                                // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                                                  // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          cmd_demux_src0_valid;                                                                                            // cmd_demux:src0_valid -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_valid
	wire  [113:0] cmd_demux_src0_data;                                                                                             // cmd_demux:src0_data -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                                                            // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                                                          // cmd_demux:src0_channel -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                                    // cmd_demux:src0_startofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                                      // cmd_demux:src0_endofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src1_valid;                                                                                            // cmd_demux:src1_valid -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_valid
	wire  [113:0] cmd_demux_src1_data;                                                                                             // cmd_demux:src1_data -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_data
	wire          cmd_demux_src1_ready;                                                                                            // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                                                                          // cmd_demux:src1_channel -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                                    // cmd_demux:src1_startofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                                      // cmd_demux:src1_endofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_src2_valid;                                                                                            // cmd_demux:src2_valid -> matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:in_valid
	wire  [113:0] cmd_demux_src2_data;                                                                                             // cmd_demux:src2_data -> matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:in_data
	wire          cmd_demux_src2_ready;                                                                                            // matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:in_ready -> cmd_demux:src2_ready
	wire    [2:0] cmd_demux_src2_channel;                                                                                          // cmd_demux:src2_channel -> matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_src2_startofpacket;                                                                                    // cmd_demux:src2_startofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                                      // cmd_demux:src2_endofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                                        // cmd_demux_001:src0_valid -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_valid
	wire  [680:0] cmd_demux_001_src0_data;                                                                                         // cmd_demux_001:src0_data -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                                        // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                                                                      // cmd_demux_001:src0_channel -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                                // cmd_demux_001:src0_startofpacket -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                                  // cmd_demux_001:src0_endofpacket -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:in_endofpacket
	wire          msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_valid;                 // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire  [248:0] msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_data;                  // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_ready;                 // cmd_mux:sink1_ready -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_ready
	wire    [2:0] msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_channel;               // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_startofpacket;         // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_endofpacket;           // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                                        // cmd_demux_001:src1_valid -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_valid
	wire  [680:0] cmd_demux_001_src1_data;                                                                                         // cmd_demux_001:src1_data -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                                                        // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire    [2:0] cmd_demux_001_src1_channel;                                                                                      // cmd_demux_001:src1_channel -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                                // cmd_demux_001:src1_startofpacket -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                                  // cmd_demux_001:src1_endofpacket -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:in_endofpacket
	wire          msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_valid;                 // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_valid -> cmd_mux_001:sink1_valid
	wire  [248:0] msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_data;                  // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_data -> cmd_mux_001:sink1_data
	wire          msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_ready;                 // cmd_mux_001:sink1_ready -> msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_ready
	wire    [2:0] msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_channel;               // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_channel -> cmd_mux_001:sink1_channel
	wire          msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_startofpacket;         // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_endofpacket;           // msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                                            // rsp_demux:src0_valid -> domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_valid
	wire  [248:0] rsp_demux_src0_data;                                                                                             // rsp_demux:src0_data -> domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                                                            // domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                                                          // rsp_demux:src0_channel -> domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                                    // rsp_demux:src0_startofpacket -> domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                                      // rsp_demux:src0_endofpacket -> domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src1_valid;                                                                                            // rsp_demux:src1_valid -> domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_valid
	wire  [248:0] rsp_demux_src1_data;                                                                                             // rsp_demux:src1_data -> domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                                                            // domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire    [2:0] rsp_demux_src1_channel;                                                                                          // rsp_demux:src1_channel -> domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                                    // rsp_demux:src1_startofpacket -> domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                                      // rsp_demux:src1_endofpacket -> domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_endofpacket
	wire          domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_valid;                 // domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [680:0] domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_data;                  // domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_ready;                 // rsp_mux_001:sink0_ready -> domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_ready
	wire    [2:0] domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_channel;               // domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_startofpacket;         // domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_endofpacket;           // domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                                        // rsp_demux_001:src0_valid -> domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_valid
	wire  [248:0] rsp_demux_001_src0_data;                                                                                         // rsp_demux_001:src0_data -> domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                                                        // domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                                                                      // rsp_demux_001:src0_channel -> domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                                // rsp_demux_001:src0_startofpacket -> domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                                  // rsp_demux_001:src0_endofpacket -> domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                                        // rsp_demux_001:src1_valid -> domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_valid
	wire  [248:0] rsp_demux_001_src1_data;                                                                                         // rsp_demux_001:src1_data -> domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                                                        // domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire    [2:0] rsp_demux_001_src1_channel;                                                                                      // rsp_demux_001:src1_channel -> domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                                                // rsp_demux_001:src1_startofpacket -> domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                                  // rsp_demux_001:src1_endofpacket -> domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:in_endofpacket
	wire          domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_valid;                 // domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [680:0] domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_data;                  // domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_ready;                 // rsp_mux_001:sink1_ready -> domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_ready
	wire    [2:0] domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_channel;               // domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_startofpacket;         // domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_endofpacket;           // domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                                        // rsp_demux_002:src0_valid -> matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_valid
	wire  [680:0] rsp_demux_002_src0_data;                                                                                         // rsp_demux_002:src0_data -> matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_data
	wire          rsp_demux_002_src0_ready;                                                                                        // matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                                                                      // rsp_demux_002:src0_channel -> matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                                // rsp_demux_002:src0_startofpacket -> matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                                  // rsp_demux_002:src0_endofpacket -> matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:in_endofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_valid;         // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_valid -> async_fifo:in_valid
	wire  [248:0] matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_data;          // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_data -> async_fifo:in_data
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_ready;         // async_fifo:in_ready -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_ready
	wire    [2:0] matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_channel;       // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_channel -> async_fifo:in_channel
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_startofpacket; // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_startofpacket -> async_fifo:in_startofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_endofpacket;   // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter:out_endofpacket -> async_fifo:in_endofpacket
	wire          async_fifo_out_valid;                                                                                            // async_fifo:out_valid -> cmd_mux:sink0_valid
	wire  [248:0] async_fifo_out_data;                                                                                             // async_fifo:out_data -> cmd_mux:sink0_data
	wire          async_fifo_out_ready;                                                                                            // cmd_mux:sink0_ready -> async_fifo:out_ready
	wire    [2:0] async_fifo_out_channel;                                                                                          // async_fifo:out_channel -> cmd_mux:sink0_channel
	wire          async_fifo_out_startofpacket;                                                                                    // async_fifo:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          async_fifo_out_endofpacket;                                                                                      // async_fifo:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_valid;         // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_valid -> async_fifo_001:in_valid
	wire  [248:0] matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_data;          // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_data -> async_fifo_001:in_data
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_ready;         // async_fifo_001:in_ready -> matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_ready
	wire    [2:0] matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_channel;       // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_channel -> async_fifo_001:in_channel
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_startofpacket; // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_startofpacket -> async_fifo_001:in_startofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_endofpacket;   // matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter:out_endofpacket -> async_fifo_001:in_endofpacket
	wire          async_fifo_001_out_valid;                                                                                        // async_fifo_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [248:0] async_fifo_001_out_data;                                                                                         // async_fifo_001:out_data -> cmd_mux_001:sink0_data
	wire          async_fifo_001_out_ready;                                                                                        // cmd_mux_001:sink0_ready -> async_fifo_001:out_ready
	wire    [2:0] async_fifo_001_out_channel;                                                                                      // async_fifo_001:out_channel -> cmd_mux_001:sink0_channel
	wire          async_fifo_001_out_startofpacket;                                                                                // async_fifo_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          async_fifo_001_out_endofpacket;                                                                                  // async_fifo_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_valid;                      // matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:out_valid -> async_fifo_002:in_valid
	wire  [680:0] matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_data;                       // matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:out_data -> async_fifo_002:in_data
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_ready;                      // async_fifo_002:in_ready -> matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:out_ready
	wire    [2:0] matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_channel;                    // matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:out_channel -> async_fifo_002:in_channel
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_startofpacket;              // matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:out_startofpacket -> async_fifo_002:in_startofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_endofpacket;                // matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter:out_endofpacket -> async_fifo_002:in_endofpacket
	wire          async_fifo_002_out_valid;                                                                                        // async_fifo_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [680:0] async_fifo_002_out_data;                                                                                         // async_fifo_002:out_data -> cmd_mux_002:sink0_data
	wire          async_fifo_002_out_ready;                                                                                        // cmd_mux_002:sink0_ready -> async_fifo_002:out_ready
	wire    [2:0] async_fifo_002_out_channel;                                                                                      // async_fifo_002:out_channel -> cmd_mux_002:sink0_channel
	wire          async_fifo_002_out_startofpacket;                                                                                // async_fifo_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          async_fifo_002_out_endofpacket;                                                                                  // async_fifo_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_valid;         // domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_valid -> async_fifo_003:in_valid
	wire  [113:0] domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_data;          // domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_data -> async_fifo_003:in_data
	wire          domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_ready;         // async_fifo_003:in_ready -> domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_ready
	wire    [2:0] domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_channel;       // domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_channel -> async_fifo_003:in_channel
	wire          domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_startofpacket; // domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_startofpacket -> async_fifo_003:in_startofpacket
	wire          domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_endofpacket;   // domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_endofpacket -> async_fifo_003:in_endofpacket
	wire          async_fifo_003_out_valid;                                                                                        // async_fifo_003:out_valid -> rsp_mux:sink0_valid
	wire  [113:0] async_fifo_003_out_data;                                                                                         // async_fifo_003:out_data -> rsp_mux:sink0_data
	wire          async_fifo_003_out_ready;                                                                                        // rsp_mux:sink0_ready -> async_fifo_003:out_ready
	wire    [2:0] async_fifo_003_out_channel;                                                                                      // async_fifo_003:out_channel -> rsp_mux:sink0_channel
	wire          async_fifo_003_out_startofpacket;                                                                                // async_fifo_003:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          async_fifo_003_out_endofpacket;                                                                                  // async_fifo_003:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_valid;         // domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_valid -> async_fifo_004:in_valid
	wire  [113:0] domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_data;          // domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_data -> async_fifo_004:in_data
	wire          domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_ready;         // async_fifo_004:in_ready -> domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_ready
	wire    [2:0] domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_channel;       // domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_channel -> async_fifo_004:in_channel
	wire          domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_startofpacket; // domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_startofpacket -> async_fifo_004:in_startofpacket
	wire          domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_endofpacket;   // domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_endofpacket -> async_fifo_004:in_endofpacket
	wire          async_fifo_004_out_valid;                                                                                        // async_fifo_004:out_valid -> rsp_mux:sink1_valid
	wire  [113:0] async_fifo_004_out_data;                                                                                         // async_fifo_004:out_data -> rsp_mux:sink1_data
	wire          async_fifo_004_out_ready;                                                                                        // rsp_mux:sink1_ready -> async_fifo_004:out_ready
	wire    [2:0] async_fifo_004_out_channel;                                                                                      // async_fifo_004:out_channel -> rsp_mux:sink1_channel
	wire          async_fifo_004_out_startofpacket;                                                                                // async_fifo_004:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          async_fifo_004_out_endofpacket;                                                                                  // async_fifo_004:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_valid;                      // matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_valid -> async_fifo_005:in_valid
	wire  [113:0] matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_data;                       // matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_data -> async_fifo_005:in_data
	wire          matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_ready;                      // async_fifo_005:in_ready -> matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_ready
	wire    [2:0] matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_channel;                    // matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_channel -> async_fifo_005:in_channel
	wire          matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_startofpacket;              // matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_startofpacket -> async_fifo_005:in_startofpacket
	wire          matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_endofpacket;                // matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter:out_endofpacket -> async_fifo_005:in_endofpacket
	wire          async_fifo_005_out_valid;                                                                                        // async_fifo_005:out_valid -> rsp_mux:sink2_valid
	wire  [113:0] async_fifo_005_out_data;                                                                                         // async_fifo_005:out_data -> rsp_mux:sink2_data
	wire          async_fifo_005_out_ready;                                                                                        // rsp_mux:sink2_ready -> async_fifo_005:out_ready
	wire    [2:0] async_fifo_005_out_channel;                                                                                      // async_fifo_005:out_channel -> rsp_mux:sink2_channel
	wire          async_fifo_005_out_startofpacket;                                                                                // async_fifo_005:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          async_fifo_005_out_endofpacket;                                                                                  // async_fifo_005:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire    [0:0] matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_valid;                                                         // matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [113:0] matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_data;                                                          // matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_ready;                                                         // limiter_pipeline:in_ready -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_src_ready
	wire    [2:0] matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_channel;                                                       // matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_startofpacket;                                                 // matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_endofpacket;                                                   // matmul_afu_matmul_ddr4a_bridge_m0_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                                                                  // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [113:0] limiter_pipeline_source0_data;                                                                                   // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                                                                  // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [2:0] limiter_pipeline_source0_channel;                                                                                // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                                                          // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                                                            // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                               // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [113:0] rsp_mux_src_data;                                                                                                // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                                                               // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                                                             // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                                                       // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                                         // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                                                              // limiter_pipeline_001:out_valid -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_sink_valid
	wire  [113:0] limiter_pipeline_001_source0_data;                                                                               // limiter_pipeline_001:out_data -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                                                              // matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [2:0] limiter_pipeline_001_source0_channel;                                                                            // limiter_pipeline_001:out_channel -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                                                      // limiter_pipeline_001:out_startofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                                                        // limiter_pipeline_001:out_endofpacket -> matmul_afu_matmul_ddr4a_bridge_m0_limiter:rsp_sink_endofpacket
	wire    [0:0] msgdma_bbb_mem_read_write_limiter_cmd_src_valid;                                                                 // msgdma_bbb_mem_read_write_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [680:0] msgdma_bbb_mem_read_write_limiter_cmd_src_data;                                                                  // msgdma_bbb_mem_read_write_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          msgdma_bbb_mem_read_write_limiter_cmd_src_ready;                                                                 // limiter_pipeline_002:in_ready -> msgdma_bbb_mem_read_write_limiter:cmd_src_ready
	wire    [2:0] msgdma_bbb_mem_read_write_limiter_cmd_src_channel;                                                               // msgdma_bbb_mem_read_write_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          msgdma_bbb_mem_read_write_limiter_cmd_src_startofpacket;                                                         // msgdma_bbb_mem_read_write_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          msgdma_bbb_mem_read_write_limiter_cmd_src_endofpacket;                                                           // msgdma_bbb_mem_read_write_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                                                              // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [680:0] limiter_pipeline_002_source0_data;                                                                               // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                                                                              // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire    [2:0] limiter_pipeline_002_source0_channel;                                                                            // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                                                                      // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                                                                        // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                                           // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [680:0] rsp_mux_001_src_data;                                                                                            // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                                                                           // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                                                                         // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                                                                   // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                                     // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                                                              // limiter_pipeline_003:out_valid -> msgdma_bbb_mem_read_write_limiter:rsp_sink_valid
	wire  [680:0] limiter_pipeline_003_source0_data;                                                                               // limiter_pipeline_003:out_data -> msgdma_bbb_mem_read_write_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                                                              // msgdma_bbb_mem_read_write_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire    [2:0] limiter_pipeline_003_source0_channel;                                                                            // limiter_pipeline_003:out_channel -> msgdma_bbb_mem_read_write_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                                                                      // limiter_pipeline_003:out_startofpacket -> msgdma_bbb_mem_read_write_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                                                                        // limiter_pipeline_003:out_endofpacket -> msgdma_bbb_mem_read_write_limiter:rsp_sink_endofpacket

	altera_error_response_slave #(
		.AXI_ID_W           (4),
		.AXI_ADDR_W         (48),
		.AXI_DATA_W         (128),
		.SUPPORT_CSR        (0),
		.LOG_CSR_DEPTH      (1),
		.REGISTER_AV_INPUTS (0),
		.SYNC_RESET         (1)
	) domain_0_default_slave (
		.aclk    (matmul_afu_dma_clock_out_clk_clk),                                    //   input,    width = 1,          clk.clk
		.aresetn (~msgdma_bbb_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1,    clk_reset.reset_n
		.awid    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awid),    //   input,    width = 4, axi_error_if.awid
		.awaddr  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awaddr),  //   input,   width = 48,             .awaddr
		.awlen   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlen),   //   input,    width = 4,             .awlen
		.awsize  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awsize),  //   input,    width = 3,             .awsize
		.awburst (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awburst), //   input,    width = 2,             .awburst
		.awlock  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlock),  //   input,    width = 2,             .awlock
		.awcache (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awcache), //   input,    width = 4,             .awcache
		.awprot  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awprot),  //   input,    width = 3,             .awprot
		.awvalid (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awvalid), //   input,    width = 1,             .awvalid
		.awready (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awready), //  output,    width = 1,             .awready
		.wid     (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wid),     //   input,    width = 4,             .wid
		.wdata   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wdata),   //   input,  width = 128,             .wdata
		.wstrb   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wstrb),   //   input,   width = 16,             .wstrb
		.wlast   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wlast),   //   input,    width = 1,             .wlast
		.wvalid  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wvalid),  //   input,    width = 1,             .wvalid
		.wready  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wready),  //  output,    width = 1,             .wready
		.bid     (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bid),     //  output,    width = 4,             .bid
		.bresp   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bresp),   //  output,    width = 2,             .bresp
		.bvalid  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bvalid),  //  output,    width = 1,             .bvalid
		.bready  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bready),  //   input,    width = 1,             .bready
		.arid    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arid),    //   input,    width = 4,             .arid
		.araddr  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_araddr),  //   input,   width = 48,             .araddr
		.arlen   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlen),   //   input,    width = 4,             .arlen
		.arsize  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arsize),  //   input,    width = 3,             .arsize
		.arburst (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arburst), //   input,    width = 2,             .arburst
		.arlock  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlock),  //   input,    width = 2,             .arlock
		.arcache (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arcache), //   input,    width = 4,             .arcache
		.arprot  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arprot),  //   input,    width = 3,             .arprot
		.arvalid (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arvalid), //   input,    width = 1,             .arvalid
		.arready (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arready), //  output,    width = 1,             .arready
		.rid     (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rid),     //  output,    width = 4,             .rid
		.rdata   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rdata),   //  output,  width = 128,             .rdata
		.rresp   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rresp),   //  output,    width = 2,             .rresp
		.rlast   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rlast),   //  output,    width = 1,             .rlast
		.rvalid  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rvalid),  //  output,    width = 1,             .rvalid
		.rready  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rready)   //   input,    width = 1,             .rready
	);

	matmul_afu_system_fixed_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (33),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (48),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) matmul_afu_matmul_ddr4a_bridge_m0_translator (
		.clk                    (matmul_afu_matmul_clock_out_clk_clk),                                                  //   input,   width = 1,                       clk.clk
		.reset                  (matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_address),       //  output,  width = 48, avalon_universal_master_0.address
		.uav_burstcount         (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 1,                          .burstcount
		.uav_read               (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 1,                          .byteenable
		.uav_readdata           (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_readdata),      //   input,   width = 8,                          .readdata
		.uav_writedata          (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_writedata),     //  output,   width = 8,                          .writedata
		.uav_lock               (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (matmul_afu_matmul_ddr4a_bridge_m0_address),                                            //   input,  width = 33,      avalon_anti_master_0.address
		.av_waitrequest         (matmul_afu_matmul_ddr4a_bridge_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (matmul_afu_matmul_ddr4a_bridge_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (matmul_afu_matmul_ddr4a_bridge_m0_byteenable),                                         //   input,   width = 1,                          .byteenable
		.av_read                (matmul_afu_matmul_ddr4a_bridge_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (matmul_afu_matmul_ddr4a_bridge_m0_readdata),                                           //  output,   width = 8,                          .readdata
		.av_readdatavalid       (matmul_afu_matmul_ddr4a_bridge_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (matmul_afu_matmul_ddr4a_bridge_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (matmul_afu_matmul_ddr4a_bridge_m0_writedata),                                          //   input,   width = 8,                          .writedata
		.av_debugaccess         (matmul_afu_matmul_ddr4a_bridge_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                                 // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                                 // (terminated),                                        
		.av_chipselect          (1'b0),                                                                                 // (terminated),                                        
		.av_lock                (1'b0),                                                                                 // (terminated),                                        
		.uav_clken              (),                                                                                     // (terminated),                                        
		.av_clken               (1'b1),                                                                                 // (terminated),                                        
		.uav_response           (2'b00),                                                                                // (terminated),                                        
		.av_response            (),                                                                                     // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                                 // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                      // (terminated),                                        
	);

	matmul_afu_system_fixed_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (48),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (48),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) msgdma_bbb_mem_read_write_translator (
		.clk                    (matmul_afu_dma_clock_out_clk_clk),                                             //   input,    width = 1,                       clk.clk
		.reset                  (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                 //   input,    width = 1,                     reset.reset
		.uav_address            (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_address),       //  output,   width = 48, avalon_universal_master_0.address
		.uav_burstcount         (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_burstcount),    //  output,    width = 9,                          .burstcount
		.uav_read               (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_byteenable),    //  output,   width = 64,                          .byteenable
		.uav_readdata           (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_readdata),      //   input,  width = 512,                          .readdata
		.uav_writedata          (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_writedata),     //  output,  width = 512,                          .writedata
		.uav_lock               (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (msgdma_bbb_mem_read_write_address),                                            //   input,   width = 48,      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_bbb_mem_read_write_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (msgdma_bbb_mem_read_write_burstcount),                                         //   input,    width = 3,                          .burstcount
		.av_byteenable          (msgdma_bbb_mem_read_write_byteenable),                                         //   input,   width = 64,                          .byteenable
		.av_read                (msgdma_bbb_mem_read_write_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (msgdma_bbb_mem_read_write_readdata),                                           //  output,  width = 512,                          .readdata
		.av_readdatavalid       (msgdma_bbb_mem_read_write_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (msgdma_bbb_mem_read_write_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (msgdma_bbb_mem_read_write_writedata),                                          //   input,  width = 512,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                         // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                         // (terminated),                                         
		.av_chipselect          (1'b0),                                                                         // (terminated),                                         
		.av_lock                (1'b0),                                                                         // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                         // (terminated),                                         
		.uav_clken              (),                                                                             // (terminated),                                         
		.av_clken               (1'b1),                                                                         // (terminated),                                         
		.uav_response           (2'b00),                                                                        // (terminated),                                         
		.av_response            (),                                                                             // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                         // (terminated),                                         
		.av_writeresponsevalid  ()                                                                              // (terminated),                                         
	);

	matmul_afu_system_fixed_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (33),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (48),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) matmul_afu_ddr4_bridge_s0_translator (
		.clk                    (matmul_afu_dma_clock_out_clk_clk),                 //   input,    width = 1,                      clk.clk
		.reset                  (msgdma_bbb_reset_reset_bridge_in_reset_reset),     //   input,    width = 1,                    reset.reset
		.uav_address            (matmul_afu_ddr4_bridge_s0_agent_m0_address),       //   input,   width = 48, avalon_universal_slave_0.address
		.uav_burstcount         (matmul_afu_ddr4_bridge_s0_agent_m0_burstcount),    //   input,    width = 9,                         .burstcount
		.uav_read               (matmul_afu_ddr4_bridge_s0_agent_m0_read),          //   input,    width = 1,                         .read
		.uav_write              (matmul_afu_ddr4_bridge_s0_agent_m0_write),         //   input,    width = 1,                         .write
		.uav_waitrequest        (matmul_afu_ddr4_bridge_s0_agent_m0_waitrequest),   //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (matmul_afu_ddr4_bridge_s0_agent_m0_readdatavalid), //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (matmul_afu_ddr4_bridge_s0_agent_m0_byteenable),    //   input,   width = 64,                         .byteenable
		.uav_readdata           (matmul_afu_ddr4_bridge_s0_agent_m0_readdata),      //  output,  width = 512,                         .readdata
		.uav_writedata          (matmul_afu_ddr4_bridge_s0_agent_m0_writedata),     //   input,  width = 512,                         .writedata
		.uav_lock               (matmul_afu_ddr4_bridge_s0_agent_m0_lock),          //   input,    width = 1,                         .lock
		.uav_debugaccess        (matmul_afu_ddr4_bridge_s0_agent_m0_debugaccess),   //   input,    width = 1,                         .debugaccess
		.av_address             (matmul_afu_ddr4_bridge_s0_address),                //  output,   width = 33,      avalon_anti_slave_0.address
		.av_write               (matmul_afu_ddr4_bridge_s0_write),                  //  output,    width = 1,                         .write
		.av_read                (matmul_afu_ddr4_bridge_s0_read),                   //  output,    width = 1,                         .read
		.av_readdata            (matmul_afu_ddr4_bridge_s0_readdata),               //   input,  width = 512,                         .readdata
		.av_writedata           (matmul_afu_ddr4_bridge_s0_writedata),              //  output,  width = 512,                         .writedata
		.av_burstcount          (matmul_afu_ddr4_bridge_s0_burstcount),             //  output,    width = 3,                         .burstcount
		.av_byteenable          (matmul_afu_ddr4_bridge_s0_byteenable),             //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (matmul_afu_ddr4_bridge_s0_readdatavalid),          //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (matmul_afu_ddr4_bridge_s0_waitrequest),            //   input,    width = 1,                         .waitrequest
		.av_debugaccess         (matmul_afu_ddr4_bridge_s0_debugaccess),            //  output,    width = 1,                         .debugaccess
		.av_begintransfer       (),                                                 // (terminated),                                        
		.av_beginbursttransfer  (),                                                 // (terminated),                                        
		.av_writebyteenable     (),                                                 // (terminated),                                        
		.av_lock                (),                                                 // (terminated),                                        
		.av_chipselect          (),                                                 // (terminated),                                        
		.av_clken               (),                                                 // (terminated),                                        
		.uav_clken              (1'b0),                                             // (terminated),                                        
		.av_outputenable        (),                                                 // (terminated),                                        
		.uav_response           (),                                                 // (terminated),                                        
		.av_response            (2'b00),                                            // (terminated),                                        
		.uav_writeresponsevalid (),                                                 // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                              // (terminated),                                        
	);

	matmul_afu_system_fixed_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (113),
		.PKT_DOMAIN_H              (112),
		.PKT_DOMAIN_L              (111),
		.PKT_SNOOP_H               (110),
		.PKT_SNOOP_L               (107),
		.PKT_BARRIER_H             (106),
		.PKT_BARRIER_L             (105),
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_QOS_H                 (89),
		.PKT_QOS_L                 (89),
		.PKT_DATA_SIDEBAND_H       (87),
		.PKT_DATA_SIDEBAND_L       (87),
		.PKT_ADDR_SIDEBAND_H       (86),
		.PKT_ADDR_SIDEBAND_L       (86),
		.PKT_BURST_TYPE_H          (85),
		.PKT_BURST_TYPE_L          (84),
		.PKT_CACHE_H               (99),
		.PKT_CACHE_L               (96),
		.PKT_THREAD_ID_H           (92),
		.PKT_THREAD_ID_L           (92),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) matmul_afu_matmul_ddr4a_bridge_m0_agent (
		.clk                   (matmul_afu_matmul_clock_out_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                 (matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.av_address            (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_address),       //   input,   width = 48,        av.address
		.av_write              (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_writedata),     //   input,    width = 8,          .writedata
		.av_readdata           (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_readdata),      //  output,    width = 8,          .readdata
		.av_waitrequest        (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 1,          .byteenable
		.av_burstcount         (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 1,          .burstcount
		.av_debugaccess        (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (matmul_afu_matmul_ddr4a_bridge_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_data),                                      //  output,  width = 114,          .data
		.cp_startofpacket      (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_data),                               //   input,  width = 114,          .data
		.rp_channel            (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_channel),                            //   input,    width = 3,          .channel
		.rp_startofpacket      (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                                      // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (680),
		.PKT_DOMAIN_H              (679),
		.PKT_DOMAIN_L              (678),
		.PKT_SNOOP_H               (677),
		.PKT_SNOOP_L               (674),
		.PKT_BARRIER_H             (673),
		.PKT_BARRIER_L             (672),
		.PKT_ORI_BURST_SIZE_H      (671),
		.PKT_ORI_BURST_SIZE_L      (669),
		.PKT_RESPONSE_STATUS_H     (668),
		.PKT_RESPONSE_STATUS_L     (667),
		.PKT_QOS_H                 (656),
		.PKT_QOS_L                 (656),
		.PKT_DATA_SIDEBAND_H       (654),
		.PKT_DATA_SIDEBAND_L       (654),
		.PKT_ADDR_SIDEBAND_H       (653),
		.PKT_ADDR_SIDEBAND_L       (653),
		.PKT_BURST_TYPE_H          (652),
		.PKT_BURST_TYPE_L          (651),
		.PKT_CACHE_H               (666),
		.PKT_CACHE_L               (663),
		.PKT_THREAD_ID_H           (659),
		.PKT_THREAD_ID_L           (659),
		.PKT_BURST_SIZE_H          (650),
		.PKT_BURST_SIZE_L          (648),
		.PKT_TRANS_EXCLUSIVE       (629),
		.PKT_TRANS_LOCK            (628),
		.PKT_BEGIN_BURST           (655),
		.PKT_PROTECTION_H          (662),
		.PKT_PROTECTION_L          (660),
		.PKT_BURSTWRAP_H           (647),
		.PKT_BURSTWRAP_L           (639),
		.PKT_BYTE_CNT_H            (638),
		.PKT_BYTE_CNT_L            (630),
		.PKT_ADDR_H                (623),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (624),
		.PKT_TRANS_POSTED          (625),
		.PKT_TRANS_WRITE           (626),
		.PKT_TRANS_READ            (627),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (657),
		.PKT_SRC_ID_L              (657),
		.PKT_DEST_ID_H             (658),
		.PKT_DEST_ID_L             (658),
		.ST_DATA_W                 (681),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) msgdma_bbb_mem_read_write_agent (
		.clk                   (matmul_afu_dma_clock_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                 (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                 //   input,    width = 1, clk_reset.reset
		.av_address            (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_address),       //   input,   width = 48,        av.address
		.av_write              (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_writedata),     //   input,  width = 512,          .writedata
		.av_readdata           (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_readdata),      //  output,  width = 512,          .readdata
		.av_waitrequest        (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_byteenable),    //   input,   width = 64,          .byteenable
		.av_burstcount         (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_burstcount),    //   input,    width = 9,          .burstcount
		.av_debugaccess        (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (msgdma_bbb_mem_read_write_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (msgdma_bbb_mem_read_write_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (msgdma_bbb_mem_read_write_agent_cp_data),                                      //  output,  width = 681,          .data
		.cp_startofpacket      (msgdma_bbb_mem_read_write_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (msgdma_bbb_mem_read_write_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (msgdma_bbb_mem_read_write_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (msgdma_bbb_mem_read_write_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (msgdma_bbb_mem_read_write_limiter_rsp_src_data),                               //   input,  width = 681,          .data
		.rp_channel            (msgdma_bbb_mem_read_write_limiter_rsp_src_channel),                            //   input,    width = 3,          .channel
		.rp_startofpacket      (msgdma_bbb_mem_read_write_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (msgdma_bbb_mem_read_write_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (msgdma_bbb_mem_read_write_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                             // (terminated),                         
		.av_writeresponsevalid ()                                                                              // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_axi_slave_ni_191_3snfkpq #(
		.PKT_QOS_H                   (224),
		.PKT_QOS_L                   (224),
		.PKT_THREAD_ID_H             (227),
		.PKT_THREAD_ID_L             (227),
		.PKT_RESPONSE_STATUS_H       (236),
		.PKT_RESPONSE_STATUS_L       (235),
		.PKT_BEGIN_BURST             (223),
		.PKT_CACHE_H                 (234),
		.PKT_CACHE_L                 (231),
		.PKT_DATA_SIDEBAND_H         (222),
		.PKT_DATA_SIDEBAND_L         (222),
		.PKT_ADDR_SIDEBAND_H         (221),
		.PKT_ADDR_SIDEBAND_L         (221),
		.PKT_BURST_TYPE_H            (220),
		.PKT_BURST_TYPE_L            (219),
		.PKT_PROTECTION_H            (230),
		.PKT_PROTECTION_L            (228),
		.PKT_BURST_SIZE_H            (218),
		.PKT_BURST_SIZE_L            (216),
		.PKT_BURSTWRAP_H             (215),
		.PKT_BURSTWRAP_L             (207),
		.PKT_BYTE_CNT_H              (206),
		.PKT_BYTE_CNT_L              (198),
		.PKT_ADDR_H                  (191),
		.PKT_ADDR_L                  (144),
		.PKT_TRANS_EXCLUSIVE         (197),
		.PKT_TRANS_LOCK              (196),
		.PKT_TRANS_COMPRESSED_READ   (192),
		.PKT_TRANS_POSTED            (193),
		.PKT_TRANS_WRITE             (194),
		.PKT_TRANS_READ              (195),
		.PKT_DATA_H                  (127),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (143),
		.PKT_BYTEEN_L                (128),
		.PKT_SRC_ID_H                (225),
		.PKT_SRC_ID_L                (225),
		.PKT_DEST_ID_H               (226),
		.PKT_DEST_ID_L               (226),
		.PKT_ORI_BURST_SIZE_L        (237),
		.PKT_ORI_BURST_SIZE_H        (239),
		.PKT_DOMAIN_L                (246),
		.PKT_DOMAIN_H                (247),
		.PKT_SNOOP_L                 (242),
		.PKT_SNOOP_H                 (245),
		.PKT_BARRIER_L               (240),
		.PKT_BARRIER_H               (241),
		.PKT_WUNIQUE                 (248),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (249),
		.ADDR_WIDTH                  (48),
		.RDATA_WIDTH                 (128),
		.WDATA_WIDTH                 (128),
		.ST_CHANNEL_W                (3),
		.AXI_SLAVE_ID_W              (4),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1)
	) domain_0_default_slave_axi_error_if_agent (
		.aclk                   (matmul_afu_dma_clock_out_clk_clk),                                    //   input,    width = 1,        clock_sink.clk
		.aresetn                (~msgdma_bbb_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                               //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                               //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                                //   input,  width = 249,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                             //   input,    width = 3,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                       //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                         //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                                   //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                                   //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                                    //   input,  width = 249,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                                 //   input,    width = 3,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                           //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                             //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (domain_0_default_slave_axi_error_if_agent_read_rp_ready),             //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (domain_0_default_slave_axi_error_if_agent_read_rp_valid),             //  output,    width = 1,                  .valid
		.read_rp_data           (domain_0_default_slave_axi_error_if_agent_read_rp_data),              //  output,  width = 249,                  .data
		.read_rp_startofpacket  (domain_0_default_slave_axi_error_if_agent_read_rp_startofpacket),     //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (domain_0_default_slave_axi_error_if_agent_read_rp_endofpacket),       //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (domain_0_default_slave_axi_error_if_agent_write_rp_ready),            //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (domain_0_default_slave_axi_error_if_agent_write_rp_valid),            //  output,    width = 1,                  .valid
		.write_rp_data          (domain_0_default_slave_axi_error_if_agent_write_rp_data),             //  output,  width = 249,                  .data
		.write_rp_startofpacket (domain_0_default_slave_axi_error_if_agent_write_rp_startofpacket),    //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (domain_0_default_slave_axi_error_if_agent_write_rp_endofpacket),      //  output,    width = 1,                  .endofpacket
		.awid                   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awid),    //  output,    width = 4, altera_axi_master.awid
		.awaddr                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awaddr),  //  output,   width = 48,                  .awaddr
		.awlen                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlen),   //  output,    width = 4,                  .awlen
		.awsize                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awsize),  //  output,    width = 3,                  .awsize
		.awburst                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awburst), //  output,    width = 2,                  .awburst
		.awlock                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlock),  //  output,    width = 2,                  .awlock
		.awcache                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awcache), //  output,    width = 4,                  .awcache
		.awprot                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awprot),  //  output,    width = 3,                  .awprot
		.awvalid                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awvalid), //  output,    width = 1,                  .awvalid
		.awready                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awready), //   input,    width = 1,                  .awready
		.wid                    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wid),     //  output,    width = 4,                  .wid
		.wdata                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wdata),   //  output,  width = 128,                  .wdata
		.wstrb                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wstrb),   //  output,   width = 16,                  .wstrb
		.wlast                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wlast),   //  output,    width = 1,                  .wlast
		.wvalid                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wvalid),  //  output,    width = 1,                  .wvalid
		.wready                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wready),  //   input,    width = 1,                  .wready
		.bid                    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bid),     //   input,    width = 4,                  .bid
		.bresp                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bresp),   //   input,    width = 2,                  .bresp
		.bvalid                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bvalid),  //   input,    width = 1,                  .bvalid
		.bready                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bready),  //  output,    width = 1,                  .bready
		.arid                   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arid),    //  output,    width = 4,                  .arid
		.araddr                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_araddr),  //  output,   width = 48,                  .araddr
		.arlen                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlen),   //  output,    width = 4,                  .arlen
		.arsize                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arsize),  //  output,    width = 3,                  .arsize
		.arburst                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arburst), //  output,    width = 2,                  .arburst
		.arlock                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlock),  //  output,    width = 2,                  .arlock
		.arcache                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arcache), //  output,    width = 4,                  .arcache
		.arprot                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arprot),  //  output,    width = 3,                  .arprot
		.arvalid                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arvalid), //  output,    width = 1,                  .arvalid
		.arready                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arready), //   input,    width = 1,                  .arready
		.rid                    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rid),     //   input,    width = 4,                  .rid
		.rdata                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rdata),   //   input,  width = 128,                  .rdata
		.rresp                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rresp),   //   input,    width = 2,                  .rresp
		.rlast                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rlast),   //   input,    width = 1,                  .rlast
		.rvalid                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rvalid),  //   input,    width = 1,                  .rvalid
		.rready                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rready),  //  output,    width = 1,                  .rready
		.awuser                 (),                                                                    // (terminated),                                 
		.aruser                 (),                                                                    // (terminated),                                 
		.wuser                  (),                                                                    // (terminated),                                 
		.ruser                  (1'b0),                                                                // (terminated),                                 
		.buser                  (1'b0)                                                                 // (terminated),                                 
	);

	matmul_afu_system_fixed_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (671),
		.PKT_ORI_BURST_SIZE_L      (669),
		.PKT_RESPONSE_STATUS_H     (668),
		.PKT_RESPONSE_STATUS_L     (667),
		.PKT_BURST_SIZE_H          (650),
		.PKT_BURST_SIZE_L          (648),
		.PKT_TRANS_LOCK            (628),
		.PKT_BEGIN_BURST           (655),
		.PKT_PROTECTION_H          (662),
		.PKT_PROTECTION_L          (660),
		.PKT_BURSTWRAP_H           (647),
		.PKT_BURSTWRAP_L           (639),
		.PKT_BYTE_CNT_H            (638),
		.PKT_BYTE_CNT_L            (630),
		.PKT_ADDR_H                (623),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (624),
		.PKT_TRANS_POSTED          (625),
		.PKT_TRANS_WRITE           (626),
		.PKT_TRANS_READ            (627),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (657),
		.PKT_SRC_ID_L              (657),
		.PKT_DEST_ID_H             (658),
		.PKT_DEST_ID_L             (658),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (681),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) matmul_afu_ddr4_bridge_s0_agent (
		.clk                     (matmul_afu_dma_clock_out_clk_clk),                              //   input,    width = 1,             clk.clk
		.reset                   (msgdma_bbb_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,       clk_reset.reset
		.m0_address              (matmul_afu_ddr4_bridge_s0_agent_m0_address),                    //  output,   width = 48,              m0.address
		.m0_burstcount           (matmul_afu_ddr4_bridge_s0_agent_m0_burstcount),                 //  output,    width = 9,                .burstcount
		.m0_byteenable           (matmul_afu_ddr4_bridge_s0_agent_m0_byteenable),                 //  output,   width = 64,                .byteenable
		.m0_debugaccess          (matmul_afu_ddr4_bridge_s0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (matmul_afu_ddr4_bridge_s0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (matmul_afu_ddr4_bridge_s0_agent_m0_readdata),                   //   input,  width = 512,                .readdata
		.m0_readdatavalid        (matmul_afu_ddr4_bridge_s0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (matmul_afu_ddr4_bridge_s0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (matmul_afu_ddr4_bridge_s0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (matmul_afu_ddr4_bridge_s0_agent_m0_writedata),                  //  output,  width = 512,                .writedata
		.m0_write                (matmul_afu_ddr4_bridge_s0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (matmul_afu_ddr4_bridge_s0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (matmul_afu_ddr4_bridge_s0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (matmul_afu_ddr4_bridge_s0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (matmul_afu_ddr4_bridge_s0_agent_rp_data),                       //  output,  width = 681,                .data
		.rp_startofpacket        (matmul_afu_ddr4_bridge_s0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_data),          //   input,  width = 681,                .data
		.cp_startofpacket        (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_channel),       //   input,    width = 3,                .channel
		.rf_sink_ready           (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_data),             //   input,  width = 682,                .data
		.rf_source_ready         (matmul_afu_ddr4_bridge_s0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (matmul_afu_ddr4_bridge_s0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (matmul_afu_ddr4_bridge_s0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (matmul_afu_ddr4_bridge_s0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (matmul_afu_ddr4_bridge_s0_agent_rf_source_data),                //  output,  width = 682,                .data
		.rdata_fifo_sink_ready   (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_out_data),           //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_src_data),           //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                           // (terminated),                               
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (682),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_ddr4_bridge_s0_agent_rsp_fifo (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset             (matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (matmul_afu_ddr4_bridge_s0_agent_rf_source_data),             //   input,  width = 682,        in.data
		.in_valid          (matmul_afu_ddr4_bridge_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (matmul_afu_ddr4_bridge_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (matmul_afu_ddr4_bridge_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (matmul_afu_ddr4_bridge_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_data),          //  output,  width = 682,       out.data
		.out_valid         (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (matmul_afu_ddr4_bridge_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                         
		.csr_read          (1'b0),                                                       // (terminated),                         
		.csr_write         (1'b0),                                                       // (terminated),                         
		.csr_readdata      (),                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                         
		.almost_full_data  (),                                                           // (terminated),                         
		.almost_empty_data (),                                                           // (terminated),                         
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_channel        (1'b0),                                                       // (terminated),                         
		.out_channel       ()                                                            // (terminated),                         
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_ddr4_bridge_s0_agent_rdata_fifo (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset             (matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_src_data),      //   input,  width = 514,        in.data
		.in_valid          (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_src_valid),     //   input,    width = 1,          .valid
		.in_ready          (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_src_ready),     //  output,    width = 1,          .ready
		.out_data          (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_out_data),      //  output,  width = 514,       out.data
		.out_valid         (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_out_valid),     //  output,    width = 1,          .valid
		.out_ready         (matmul_afu_ddr4_bridge_s0_agent_rdata_fifo_out_ready),     //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                         
		.csr_read          (1'b0),                                                     // (terminated),                         
		.csr_write         (1'b0),                                                     // (terminated),                         
		.csr_readdata      (),                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                         
		.almost_full_data  (),                                                         // (terminated),                         
		.almost_empty_data (),                                                         // (terminated),                         
		.in_startofpacket  (1'b0),                                                     // (terminated),                         
		.in_endofpacket    (1'b0),                                                     // (terminated),                         
		.out_startofpacket (),                                                         // (terminated),                         
		.out_endofpacket   (),                                                         // (terminated),                         
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.in_error          (1'b0),                                                     // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_channel        (1'b0),                                                     // (terminated),                         
		.out_channel       ()                                                          // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_router_191_llbybri router (
		.sink_ready         (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_data),                  //   input,  width = 114,          .data
		.sink_startofpacket (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_matmul_ddr4a_bridge_m0_agent_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_matmul_clock_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                 //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                 //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                  //  output,  width = 114,          .data
		.src_channel        (router_src_channel),                                               //  output,    width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_cnthalq router_001 (
		.sink_ready         (msgdma_bbb_mem_read_write_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (msgdma_bbb_mem_read_write_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (msgdma_bbb_mem_read_write_agent_cp_data),          //   input,  width = 681,          .data
		.sink_startofpacket (msgdma_bbb_mem_read_write_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (msgdma_bbb_mem_read_write_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                 //   input,    width = 1,       clk.clk
		.reset              (msgdma_bbb_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                              //  output,  width = 681,          .data
		.src_channel        (router_001_src_channel),                           //  output,    width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_mskivxi router_002 (
		.sink_ready         (domain_0_default_slave_axi_error_if_agent_write_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (domain_0_default_slave_axi_error_if_agent_write_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (domain_0_default_slave_axi_error_if_agent_write_rp_data),          //   input,  width = 249,          .data
		.sink_startofpacket (domain_0_default_slave_axi_error_if_agent_write_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (domain_0_default_slave_axi_error_if_agent_write_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (msgdma_bbb_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                              //  output,  width = 249,          .data
		.src_channel        (router_002_src_channel),                                           //  output,    width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_mskivxi router_003 (
		.sink_ready         (domain_0_default_slave_axi_error_if_agent_read_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (domain_0_default_slave_axi_error_if_agent_read_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (domain_0_default_slave_axi_error_if_agent_read_rp_data),          //   input,  width = 249,          .data
		.sink_startofpacket (domain_0_default_slave_axi_error_if_agent_read_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (domain_0_default_slave_axi_error_if_agent_read_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (msgdma_bbb_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                             //  output,  width = 249,          .data
		.src_channel        (router_003_src_channel),                                          //  output,    width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_nalljzy router_004 (
		.sink_ready         (matmul_afu_ddr4_bridge_s0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (matmul_afu_ddr4_bridge_s0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (matmul_afu_ddr4_bridge_s0_agent_rp_data),          //   input,  width = 681,          .data
		.sink_startofpacket (matmul_afu_ddr4_bridge_s0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_ddr4_bridge_s0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                 //   input,    width = 1,       clk.clk
		.reset              (msgdma_bbb_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                              //  output,  width = 681,          .data
		.src_channel        (router_004_src_channel),                           //  output,    width = 3,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                (1),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (90),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (89),
		.PIPELINED                 (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) matmul_afu_matmul_ddr4a_bridge_m0_limiter (
		.clk                    (matmul_afu_matmul_clock_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset                  (matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                                  //   input,  width = 114,          .data
		.cmd_sink_channel       (router_src_channel),                                               //   input,    width = 3,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_ready),          //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_data),           //  output,  width = 114,          .data
		.cmd_src_channel        (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_channel),        //  output,    width = 3,          .channel
		.cmd_src_startofpacket  (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_valid),          //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                               //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                               //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                             //   input,    width = 3,          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                                //   input,  width = 114,          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_ready),          //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_valid),          //  output,    width = 1,          .valid
		.rsp_src_data           (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_data),           //  output,  width = 114,          .data
		.rsp_src_channel        (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_channel),        //  output,    width = 3,          .channel
		.rsp_src_startofpacket  (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (matmul_afu_matmul_ddr4a_bridge_m0_limiter_rsp_src_endofpacket)     //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                (1),
		.PKT_DEST_ID_H             (658),
		.PKT_DEST_ID_L             (658),
		.PKT_SRC_ID_H              (657),
		.PKT_SRC_ID_L              (657),
		.PKT_BYTE_CNT_H            (638),
		.PKT_BYTE_CNT_L            (630),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_TRANS_POSTED          (625),
		.PKT_TRANS_WRITE           (626),
		.MAX_OUTSTANDING_RESPONSES (64),
		.PIPELINED                 (0),
		.ST_DATA_W                 (681),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) msgdma_bbb_mem_read_write_limiter (
		.clk                    (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset                  (msgdma_bbb_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                    //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                    //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                     //   input,  width = 681,          .data
		.cmd_sink_channel       (router_001_src_channel),                                  //   input,    width = 3,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (msgdma_bbb_mem_read_write_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (msgdma_bbb_mem_read_write_limiter_cmd_src_data),          //  output,  width = 681,          .data
		.cmd_src_channel        (msgdma_bbb_mem_read_write_limiter_cmd_src_channel),       //  output,    width = 3,          .channel
		.cmd_src_startofpacket  (msgdma_bbb_mem_read_write_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (msgdma_bbb_mem_read_write_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (msgdma_bbb_mem_read_write_limiter_cmd_src_valid),         //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                      //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                      //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                    //   input,    width = 3,          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                       //   input,  width = 681,          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),                //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (msgdma_bbb_mem_read_write_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (msgdma_bbb_mem_read_write_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (msgdma_bbb_mem_read_write_limiter_rsp_src_data),          //  output,  width = 681,          .data
		.rsp_src_channel        (msgdma_bbb_mem_read_write_limiter_rsp_src_channel),       //  output,    width = 3,          .channel
		.rsp_src_startofpacket  (msgdma_bbb_mem_read_write_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (msgdma_bbb_mem_read_write_limiter_rsp_src_endofpacket)    //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_burst_adapter_191_ife3huq #(
		.PKT_ADDR_H                (623),
		.PKT_ADDR_L                (576),
		.PKT_BEGIN_BURST           (655),
		.PKT_BYTE_CNT_H            (638),
		.PKT_BYTE_CNT_L            (630),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_BURST_SIZE_H          (650),
		.PKT_BURST_SIZE_L          (648),
		.PKT_BURST_TYPE_H          (652),
		.PKT_BURST_TYPE_L          (651),
		.PKT_BURSTWRAP_H           (647),
		.PKT_BURSTWRAP_L           (639),
		.PKT_TRANS_COMPRESSED_READ (624),
		.PKT_TRANS_WRITE           (626),
		.PKT_TRANS_READ            (627),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (681),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (638),
		.OUT_BURSTWRAP_H           (647),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (511),
		.BURSTWRAP_CONST_VALUE     (511),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) matmul_afu_ddr4_bridge_s0_burst_adapter (
		.clk                   (matmul_afu_dma_clock_out_clk_clk),                              //   input,    width = 1,       cr0.clk
		.reset                 (msgdma_bbb_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                         //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                          //   input,  width = 681,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                       //   input,    width = 3,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                         //  output,    width = 1,          .ready
		.source0_valid         (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_data),          //  output,  width = 681,          .data
		.source0_channel       (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_channel),       //  output,    width = 3,          .channel
		.source0_startofpacket (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (matmul_afu_ddr4_bridge_s0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_wn4y4vi cmd_demux (
		.clk                (matmul_afu_matmul_clock_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                                 //   input,    width = 3,          .channel
		.sink_data          (limiter_pipeline_source0_data),                                    //   input,  width = 114,          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                             //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                              //  output,  width = 114,          .data
		.src0_channel       (cmd_demux_src0_channel),                                           //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                       //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                             //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                             //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                              //  output,  width = 114,          .data
		.src1_channel       (cmd_demux_src1_channel),                                           //  output,    width = 3,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                       //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                             //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                             //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                                              //  output,  width = 114,          .data
		.src2_channel       (cmd_demux_src2_channel),                                           //  output,    width = 3,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_smzpsni cmd_demux_001 (
		.clk                (matmul_afu_dma_clock_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset              (msgdma_bbb_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),           //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),         //   input,    width = 3,          .channel
		.sink_data          (limiter_pipeline_002_source0_data),            //   input,  width = 681,          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket),   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),     //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),           //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                      //  output,  width = 681,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                   //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),               //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                     //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                     //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_001_src1_data),                      //  output,  width = 681,          .data
		.src1_channel       (cmd_demux_001_src1_channel),                   //  output,    width = 3,          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),             //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),               //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                     //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                     //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_001_src2_data),                      //  output,  width = 681,          .data
		.src2_channel       (cmd_demux_001_src2_channel),                   //  output,    width = 3,          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),             //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_gsuaqhq cmd_mux (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset               (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                                                        //  output,  width = 249,          .data
		.src_channel         (cmd_mux_src_channel),                                                                                     //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (async_fifo_out_ready),                                                                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (async_fifo_out_valid),                                                                                    //   input,    width = 1,          .valid
		.sink0_channel       (async_fifo_out_channel),                                                                                  //   input,    width = 3,          .channel
		.sink0_data          (async_fifo_out_data),                                                                                     //   input,  width = 249,          .data
		.sink0_startofpacket (async_fifo_out_startofpacket),                                                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (async_fifo_out_endofpacket),                                                                              //   input,    width = 1,          .endofpacket
		.sink1_ready         (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_channel),       //   input,    width = 3,          .channel
		.sink1_data          (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_data),          //   input,  width = 249,          .data
		.sink1_startofpacket (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_gsuaqhq cmd_mux_001 (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset               (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                                                    //  output,  width = 249,          .data
		.src_channel         (cmd_mux_001_src_channel),                                                                                 //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (async_fifo_001_out_ready),                                                                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (async_fifo_001_out_valid),                                                                                //   input,    width = 1,          .valid
		.sink0_channel       (async_fifo_001_out_channel),                                                                              //   input,    width = 3,          .channel
		.sink0_data          (async_fifo_001_out_data),                                                                                 //   input,  width = 249,          .data
		.sink0_startofpacket (async_fifo_001_out_startofpacket),                                                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (async_fifo_001_out_endofpacket),                                                                          //   input,    width = 1,          .endofpacket
		.sink1_ready         (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_channel),       //   input,    width = 3,          .channel
		.sink1_data          (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_data),          //   input,  width = 249,          .data
		.sink1_startofpacket (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_6ogsk3a cmd_mux_002 (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset               (msgdma_bbb_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                         //  output,  width = 681,          .data
		.src_channel         (cmd_mux_002_src_channel),                      //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (async_fifo_002_out_ready),                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (async_fifo_002_out_valid),                     //   input,    width = 1,          .valid
		.sink0_channel       (async_fifo_002_out_channel),                   //   input,    width = 3,          .channel
		.sink0_data          (async_fifo_002_out_data),                      //   input,  width = 681,          .data
		.sink0_startofpacket (async_fifo_002_out_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (async_fifo_002_out_endofpacket),               //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                     //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                     //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                   //   input,    width = 3,          .channel
		.sink1_data          (cmd_demux_001_src2_data),                      //   input,  width = 681,          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_g2k4nhy rsp_demux (
		.clk                (matmul_afu_dma_clock_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset              (msgdma_bbb_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                       //   input,    width = 3,          .channel
		.sink_data          (router_002_src_data),                          //   input,  width = 249,          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                          //  output,  width = 249,          .data
		.src0_channel       (rsp_demux_src0_channel),                       //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                          //  output,  width = 249,          .data
		.src1_channel       (rsp_demux_src1_channel),                       //  output,    width = 3,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_g2k4nhy rsp_demux_001 (
		.clk                (matmul_afu_dma_clock_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset              (msgdma_bbb_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                       //   input,    width = 3,          .channel
		.sink_data          (router_003_src_data),                          //   input,  width = 249,          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //  output,  width = 249,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),               //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                     //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                     //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                      //  output,  width = 249,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                   //  output,    width = 3,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),             //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_j2dlhvi rsp_demux_002 (
		.clk                (matmul_afu_dma_clock_out_clk_clk),             //   input,    width = 1,       clk.clk
		.reset              (msgdma_bbb_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                       //   input,    width = 3,          .channel
		.sink_data          (router_004_src_data),                          //   input,  width = 681,          .data
		.sink_startofpacket (router_004_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                      //  output,  width = 681,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                   //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),               //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                     //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                     //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),                      //  output,  width = 681,          .data
		.src1_channel       (rsp_demux_002_src1_channel),                   //  output,    width = 3,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),             //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_pecn57y rsp_mux (
		.clk                 (matmul_afu_matmul_clock_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                 //  output,  width = 114,          .data
		.src_channel         (rsp_mux_src_channel),                                              //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (async_fifo_003_out_ready),                                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (async_fifo_003_out_valid),                                         //   input,    width = 1,          .valid
		.sink0_channel       (async_fifo_003_out_channel),                                       //   input,    width = 3,          .channel
		.sink0_data          (async_fifo_003_out_data),                                          //   input,  width = 114,          .data
		.sink0_startofpacket (async_fifo_003_out_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (async_fifo_003_out_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (async_fifo_004_out_ready),                                         //  output,    width = 1,     sink1.ready
		.sink1_valid         (async_fifo_004_out_valid),                                         //   input,    width = 1,          .valid
		.sink1_channel       (async_fifo_004_out_channel),                                       //   input,    width = 3,          .channel
		.sink1_data          (async_fifo_004_out_data),                                          //   input,  width = 114,          .data
		.sink1_startofpacket (async_fifo_004_out_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (async_fifo_004_out_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink2_ready         (async_fifo_005_out_ready),                                         //  output,    width = 1,     sink2.ready
		.sink2_valid         (async_fifo_005_out_valid),                                         //   input,    width = 1,          .valid
		.sink2_channel       (async_fifo_005_out_channel),                                       //   input,    width = 3,          .channel
		.sink2_data          (async_fifo_005_out_data),                                          //   input,  width = 114,          .data
		.sink2_startofpacket (async_fifo_005_out_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (async_fifo_005_out_endofpacket)                                    //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_blovysy rsp_mux_001 (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset               (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                                                    //  output,  width = 681,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                                                 //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_channel),       //   input,    width = 3,          .channel
		.sink0_data          (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_data),          //   input,  width = 681,          .data
		.sink0_startofpacket (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_channel),       //   input,    width = 3,          .channel
		.sink1_data          (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_data),          //   input,  width = 681,          .data
		.sink1_startofpacket (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                                                                //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                                                                //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                                                              //   input,    width = 3,          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                                                                 //   input,  width = 681,          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                                                        //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket)                                                                           //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_sh43q7i #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (80),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (83),
		.IN_PKT_BURST_SIZE_L           (81),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (85),
		.IN_PKT_BURST_TYPE_L           (84),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (191),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (206),
		.OUT_PKT_BYTE_CNT_L            (198),
		.OUT_PKT_TRANS_COMPRESSED_READ (192),
		.OUT_PKT_BURST_SIZE_H          (218),
		.OUT_PKT_BURST_SIZE_L          (216),
		.OUT_PKT_RESPONSE_STATUS_H     (236),
		.OUT_PKT_RESPONSE_STATUS_L     (235),
		.OUT_PKT_TRANS_EXCLUSIVE       (197),
		.OUT_PKT_BURST_TYPE_H          (220),
		.OUT_PKT_BURST_TYPE_L          (219),
		.OUT_PKT_ORI_BURST_SIZE_L      (237),
		.OUT_PKT_ORI_BURST_SIZE_H      (239),
		.OUT_ST_DATA_W                 (249),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter (
		.clk                  (matmul_afu_matmul_clock_out_clk_clk),                                                                             //   input,    width = 1,       clk.clk
		.reset                (matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset),                                                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                                                            //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                                                          //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                                                      //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                                                            //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src0_data),                                                                                             //   input,  width = 114,          .data
		.out_endofpacket      (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_data),          //  output,  width = 249,          .data
		.out_channel          (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                                           // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_sh43q7i #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (80),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (83),
		.IN_PKT_BURST_SIZE_L           (81),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (85),
		.IN_PKT_BURST_TYPE_L           (84),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (191),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (206),
		.OUT_PKT_BYTE_CNT_L            (198),
		.OUT_PKT_TRANS_COMPRESSED_READ (192),
		.OUT_PKT_BURST_SIZE_H          (218),
		.OUT_PKT_BURST_SIZE_L          (216),
		.OUT_PKT_RESPONSE_STATUS_H     (236),
		.OUT_PKT_RESPONSE_STATUS_L     (235),
		.OUT_PKT_TRANS_EXCLUSIVE       (197),
		.OUT_PKT_BURST_TYPE_H          (220),
		.OUT_PKT_BURST_TYPE_L          (219),
		.OUT_PKT_ORI_BURST_SIZE_L      (237),
		.OUT_PKT_ORI_BURST_SIZE_H      (239),
		.OUT_ST_DATA_W                 (249),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter (
		.clk                  (matmul_afu_matmul_clock_out_clk_clk),                                                                             //   input,    width = 1,       clk.clk
		.reset                (matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset),                                                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                                                                            //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                                                                          //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                                                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                                                                      //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                                                                            //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src1_data),                                                                                             //   input,  width = 114,          .data
		.out_endofpacket      (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_data),          //  output,  width = 249,          .data
		.out_channel          (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                                           // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_zalqzzy #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (80),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (83),
		.IN_PKT_BURST_SIZE_L           (81),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (85),
		.IN_PKT_BURST_TYPE_L           (84),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (623),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (638),
		.OUT_PKT_BYTE_CNT_L            (630),
		.OUT_PKT_TRANS_COMPRESSED_READ (624),
		.OUT_PKT_BURST_SIZE_H          (650),
		.OUT_PKT_BURST_SIZE_L          (648),
		.OUT_PKT_RESPONSE_STATUS_H     (668),
		.OUT_PKT_RESPONSE_STATUS_L     (667),
		.OUT_PKT_TRANS_EXCLUSIVE       (629),
		.OUT_PKT_BURST_TYPE_H          (652),
		.OUT_PKT_BURST_TYPE_L          (651),
		.OUT_PKT_ORI_BURST_SIZE_L      (669),
		.OUT_PKT_ORI_BURST_SIZE_H      (671),
		.OUT_ST_DATA_W                 (681),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter (
		.clk                  (matmul_afu_matmul_clock_out_clk_clk),                                                                //   input,    width = 1,       clk.clk
		.reset                (matmul_afu_matmul_ddr4a_bridge_reset_reset_bridge_in_reset_reset),                                   //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src2_valid),                                                                               //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src2_channel),                                                                             //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_demux_src2_startofpacket),                                                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src2_endofpacket),                                                                         //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src2_ready),                                                                               //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src2_data),                                                                                //   input,  width = 114,          .data
		.out_endofpacket      (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_data),          //  output,  width = 681,          .data
		.out_channel          (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                              // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_t7oqcpa #(
		.IN_PKT_ADDR_H                 (623),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (638),
		.IN_PKT_BYTE_CNT_L             (630),
		.IN_PKT_TRANS_COMPRESSED_READ  (624),
		.IN_PKT_TRANS_WRITE            (626),
		.IN_PKT_BURSTWRAP_H            (647),
		.IN_PKT_BURSTWRAP_L            (639),
		.IN_PKT_BURST_SIZE_H           (650),
		.IN_PKT_BURST_SIZE_L           (648),
		.IN_PKT_RESPONSE_STATUS_H      (668),
		.IN_PKT_RESPONSE_STATUS_L      (667),
		.IN_PKT_TRANS_EXCLUSIVE        (629),
		.IN_PKT_BURST_TYPE_H           (652),
		.IN_PKT_BURST_TYPE_L           (651),
		.IN_PKT_ORI_BURST_SIZE_L       (669),
		.IN_PKT_ORI_BURST_SIZE_H       (671),
		.IN_ST_DATA_W                  (681),
		.OUT_PKT_ADDR_H                (191),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (206),
		.OUT_PKT_BYTE_CNT_L            (198),
		.OUT_PKT_TRANS_COMPRESSED_READ (192),
		.OUT_PKT_BURST_SIZE_H          (218),
		.OUT_PKT_BURST_SIZE_L          (216),
		.OUT_PKT_RESPONSE_STATUS_H     (236),
		.OUT_PKT_RESPONSE_STATUS_L     (235),
		.OUT_PKT_TRANS_EXCLUSIVE       (197),
		.OUT_PKT_BURST_TYPE_H          (220),
		.OUT_PKT_BURST_TYPE_L          (219),
		.OUT_PKT_ORI_BURST_SIZE_L      (237),
		.OUT_PKT_ORI_BURST_SIZE_H      (239),
		.OUT_ST_DATA_W                 (249),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter (
		.clk                  (matmul_afu_dma_clock_out_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                                                //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                                              //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                                          //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                                                //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src0_data),                                                                                 //   input,  width = 681,          .data
		.out_endofpacket      (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_data),          //  output,  width = 249,          .data
		.out_channel          (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                                   // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_t7oqcpa #(
		.IN_PKT_ADDR_H                 (623),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (638),
		.IN_PKT_BYTE_CNT_L             (630),
		.IN_PKT_TRANS_COMPRESSED_READ  (624),
		.IN_PKT_TRANS_WRITE            (626),
		.IN_PKT_BURSTWRAP_H            (647),
		.IN_PKT_BURSTWRAP_L            (639),
		.IN_PKT_BURST_SIZE_H           (650),
		.IN_PKT_BURST_SIZE_L           (648),
		.IN_PKT_RESPONSE_STATUS_H      (668),
		.IN_PKT_RESPONSE_STATUS_L      (667),
		.IN_PKT_TRANS_EXCLUSIVE        (629),
		.IN_PKT_BURST_TYPE_H           (652),
		.IN_PKT_BURST_TYPE_L           (651),
		.IN_PKT_ORI_BURST_SIZE_L       (669),
		.IN_PKT_ORI_BURST_SIZE_H       (671),
		.IN_ST_DATA_W                  (681),
		.OUT_PKT_ADDR_H                (191),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (206),
		.OUT_PKT_BYTE_CNT_L            (198),
		.OUT_PKT_TRANS_COMPRESSED_READ (192),
		.OUT_PKT_BURST_SIZE_H          (218),
		.OUT_PKT_BURST_SIZE_L          (216),
		.OUT_PKT_RESPONSE_STATUS_H     (236),
		.OUT_PKT_RESPONSE_STATUS_L     (235),
		.OUT_PKT_TRANS_EXCLUSIVE       (197),
		.OUT_PKT_BURST_TYPE_H          (220),
		.OUT_PKT_BURST_TYPE_L          (219),
		.OUT_PKT_ORI_BURST_SIZE_L      (237),
		.OUT_PKT_ORI_BURST_SIZE_H      (239),
		.OUT_ST_DATA_W                 (249),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter (
		.clk                  (matmul_afu_dma_clock_out_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                                                //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                                                              //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                                                          //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                                                //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src1_data),                                                                                 //   input,  width = 681,          .data
		.out_endofpacket      (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_data),          //  output,  width = 249,          .data
		.out_channel          (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (msgdma_bbb_mem_read_write_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                                   // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_qxmh72a #(
		.IN_PKT_ADDR_H                 (191),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (206),
		.IN_PKT_BYTE_CNT_L             (198),
		.IN_PKT_TRANS_COMPRESSED_READ  (192),
		.IN_PKT_TRANS_WRITE            (194),
		.IN_PKT_BURSTWRAP_H            (215),
		.IN_PKT_BURSTWRAP_L            (207),
		.IN_PKT_BURST_SIZE_H           (218),
		.IN_PKT_BURST_SIZE_L           (216),
		.IN_PKT_RESPONSE_STATUS_H      (236),
		.IN_PKT_RESPONSE_STATUS_L      (235),
		.IN_PKT_TRANS_EXCLUSIVE        (197),
		.IN_PKT_BURST_TYPE_H           (220),
		.IN_PKT_BURST_TYPE_L           (219),
		.IN_PKT_ORI_BURST_SIZE_L       (237),
		.IN_PKT_ORI_BURST_SIZE_H       (239),
		.IN_ST_DATA_W                  (249),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (83),
		.OUT_PKT_BURST_SIZE_L          (81),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (85),
		.OUT_PKT_BURST_TYPE_L          (84),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter (
		.clk                  (matmul_afu_dma_clock_out_clk_clk),                                                                                //   input,    width = 1,       clk.clk
		.reset                (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                                    //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                                                            //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                                                          //   input,    width = 3,          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                                                      //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                                                            //  output,    width = 1,          .ready
		.in_data              (rsp_demux_src0_data),                                                                                             //   input,  width = 249,          .data
		.out_endofpacket      (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_data),          //  output,  width = 114,          .data
		.out_channel          (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                                           // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_2urvgga #(
		.IN_PKT_ADDR_H                 (191),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (206),
		.IN_PKT_BYTE_CNT_L             (198),
		.IN_PKT_TRANS_COMPRESSED_READ  (192),
		.IN_PKT_TRANS_WRITE            (194),
		.IN_PKT_BURSTWRAP_H            (215),
		.IN_PKT_BURSTWRAP_L            (207),
		.IN_PKT_BURST_SIZE_H           (218),
		.IN_PKT_BURST_SIZE_L           (216),
		.IN_PKT_RESPONSE_STATUS_H      (236),
		.IN_PKT_RESPONSE_STATUS_L      (235),
		.IN_PKT_TRANS_EXCLUSIVE        (197),
		.IN_PKT_BURST_TYPE_H           (220),
		.IN_PKT_BURST_TYPE_L           (219),
		.IN_PKT_ORI_BURST_SIZE_L       (237),
		.IN_PKT_ORI_BURST_SIZE_H       (239),
		.IN_ST_DATA_W                  (249),
		.OUT_PKT_ADDR_H                (623),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (638),
		.OUT_PKT_BYTE_CNT_L            (630),
		.OUT_PKT_TRANS_COMPRESSED_READ (624),
		.OUT_PKT_BURST_SIZE_H          (650),
		.OUT_PKT_BURST_SIZE_L          (648),
		.OUT_PKT_RESPONSE_STATUS_H     (668),
		.OUT_PKT_RESPONSE_STATUS_L     (667),
		.OUT_PKT_TRANS_EXCLUSIVE       (629),
		.OUT_PKT_BURST_TYPE_H          (652),
		.OUT_PKT_BURST_TYPE_L          (651),
		.OUT_PKT_ORI_BURST_SIZE_L      (669),
		.OUT_PKT_ORI_BURST_SIZE_H      (671),
		.OUT_ST_DATA_W                 (681),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter (
		.clk                  (matmul_afu_dma_clock_out_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                                                    //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                                                  //   input,    width = 3,          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                                              //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                                                    //  output,    width = 1,          .ready
		.in_data              (rsp_demux_src1_data),                                                                                     //   input,  width = 249,          .data
		.out_endofpacket      (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_data),          //  output,  width = 681,          .data
		.out_channel          (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (domain_0_default_slave_axi_error_if_wr_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                                   // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_qxmh72a #(
		.IN_PKT_ADDR_H                 (191),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (206),
		.IN_PKT_BYTE_CNT_L             (198),
		.IN_PKT_TRANS_COMPRESSED_READ  (192),
		.IN_PKT_TRANS_WRITE            (194),
		.IN_PKT_BURSTWRAP_H            (215),
		.IN_PKT_BURSTWRAP_L            (207),
		.IN_PKT_BURST_SIZE_H           (218),
		.IN_PKT_BURST_SIZE_L           (216),
		.IN_PKT_RESPONSE_STATUS_H      (236),
		.IN_PKT_RESPONSE_STATUS_L      (235),
		.IN_PKT_TRANS_EXCLUSIVE        (197),
		.IN_PKT_BURST_TYPE_H           (220),
		.IN_PKT_BURST_TYPE_L           (219),
		.IN_PKT_ORI_BURST_SIZE_L       (237),
		.IN_PKT_ORI_BURST_SIZE_H       (239),
		.IN_ST_DATA_W                  (249),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (83),
		.OUT_PKT_BURST_SIZE_L          (81),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (85),
		.OUT_PKT_BURST_TYPE_L          (84),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter (
		.clk                  (matmul_afu_dma_clock_out_clk_clk),                                                                                //   input,    width = 1,       clk.clk
		.reset                (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                                    //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                                                                        //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                                                                      //   input,    width = 3,          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                                                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                                                                  //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                                                                        //  output,    width = 1,          .ready
		.in_data              (rsp_demux_001_src0_data),                                                                                         //   input,  width = 249,          .data
		.out_endofpacket      (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_data),          //  output,  width = 114,          .data
		.out_channel          (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                                           // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_2urvgga #(
		.IN_PKT_ADDR_H                 (191),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (206),
		.IN_PKT_BYTE_CNT_L             (198),
		.IN_PKT_TRANS_COMPRESSED_READ  (192),
		.IN_PKT_TRANS_WRITE            (194),
		.IN_PKT_BURSTWRAP_H            (215),
		.IN_PKT_BURSTWRAP_L            (207),
		.IN_PKT_BURST_SIZE_H           (218),
		.IN_PKT_BURST_SIZE_L           (216),
		.IN_PKT_RESPONSE_STATUS_H      (236),
		.IN_PKT_RESPONSE_STATUS_L      (235),
		.IN_PKT_TRANS_EXCLUSIVE        (197),
		.IN_PKT_BURST_TYPE_H           (220),
		.IN_PKT_BURST_TYPE_L           (219),
		.IN_PKT_ORI_BURST_SIZE_L       (237),
		.IN_PKT_ORI_BURST_SIZE_H       (239),
		.IN_ST_DATA_W                  (249),
		.OUT_PKT_ADDR_H                (623),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (638),
		.OUT_PKT_BYTE_CNT_L            (630),
		.OUT_PKT_TRANS_COMPRESSED_READ (624),
		.OUT_PKT_BURST_SIZE_H          (650),
		.OUT_PKT_BURST_SIZE_L          (648),
		.OUT_PKT_RESPONSE_STATUS_H     (668),
		.OUT_PKT_RESPONSE_STATUS_L     (667),
		.OUT_PKT_TRANS_EXCLUSIVE       (629),
		.OUT_PKT_BURST_TYPE_H          (652),
		.OUT_PKT_BURST_TYPE_L          (651),
		.OUT_PKT_ORI_BURST_SIZE_L      (669),
		.OUT_PKT_ORI_BURST_SIZE_H      (671),
		.OUT_ST_DATA_W                 (681),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter (
		.clk                  (matmul_afu_dma_clock_out_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                                                //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                                                              //   input,    width = 3,          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                                                          //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                                                //  output,    width = 1,          .ready
		.in_data              (rsp_demux_001_src1_data),                                                                                 //   input,  width = 249,          .data
		.out_endofpacket      (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_data),          //  output,  width = 681,          .data
		.out_channel          (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (domain_0_default_slave_axi_error_if_rd_to_msgdma_bbb_mem_read_write_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                                   // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_ywmxaaa #(
		.IN_PKT_ADDR_H                 (623),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (638),
		.IN_PKT_BYTE_CNT_L             (630),
		.IN_PKT_TRANS_COMPRESSED_READ  (624),
		.IN_PKT_TRANS_WRITE            (626),
		.IN_PKT_BURSTWRAP_H            (647),
		.IN_PKT_BURSTWRAP_L            (639),
		.IN_PKT_BURST_SIZE_H           (650),
		.IN_PKT_BURST_SIZE_L           (648),
		.IN_PKT_RESPONSE_STATUS_H      (668),
		.IN_PKT_RESPONSE_STATUS_L      (667),
		.IN_PKT_TRANS_EXCLUSIVE        (629),
		.IN_PKT_BURST_TYPE_H           (652),
		.IN_PKT_BURST_TYPE_L           (651),
		.IN_PKT_ORI_BURST_SIZE_L       (669),
		.IN_PKT_ORI_BURST_SIZE_H       (671),
		.IN_ST_DATA_W                  (681),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (83),
		.OUT_PKT_BURST_SIZE_L          (81),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (85),
		.OUT_PKT_BURST_TYPE_L          (84),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter (
		.clk                  (matmul_afu_dma_clock_out_clk_clk),                                                                   //   input,    width = 1,       clk.clk
		.reset                (msgdma_bbb_reset_reset_bridge_in_reset_reset),                                                       //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_002_src0_valid),                                                                           //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_002_src0_channel),                                                                         //   input,    width = 3,          .channel
		.in_startofpacket     (rsp_demux_002_src0_startofpacket),                                                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_002_src0_endofpacket),                                                                     //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_002_src0_ready),                                                                           //  output,    width = 1,          .ready
		.in_data              (rsp_demux_002_src0_data),                                                                            //   input,  width = 681,          .data
		.out_endofpacket      (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_data),          //  output,  width = 114,          .data
		.out_channel          (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                              // (terminated),                         
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (249),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (3),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo (
		.in_clk             (matmul_afu_matmul_clock_out_clk_clk),                                                                             //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~async_fifo_in_clk_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_dma_clock_out_clk_clk),                                                                                //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset),                                                       //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_data),          //   input,  width = 249,            in.data
		.in_valid           (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_wr_cmd_width_adapter_src_channel),       //   input,    width = 3,              .channel
		.out_data           (async_fifo_out_data),                                                                                             //  output,  width = 249,           out.data
		.out_valid          (async_fifo_out_valid),                                                                                            //  output,    width = 1,              .valid
		.out_ready          (async_fifo_out_ready),                                                                                            //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_out_startofpacket),                                                                                    //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_out_endofpacket),                                                                                      //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_out_channel),                                                                                          //  output,    width = 3,              .channel
		.in_csr_address     (1'b0),                                                                                                            // (terminated),                             
		.in_csr_read        (1'b0),                                                                                                            // (terminated),                             
		.in_csr_write       (1'b0),                                                                                                            // (terminated),                             
		.in_csr_readdata    (),                                                                                                                // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                                            // (terminated),                             
		.out_csr_address    (1'b0),                                                                                                            // (terminated),                             
		.out_csr_read       (1'b0),                                                                                                            // (terminated),                             
		.out_csr_write      (1'b0),                                                                                                            // (terminated),                             
		.out_csr_readdata   (),                                                                                                                // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                                            // (terminated),                             
		.in_empty           (1'b0),                                                                                                            // (terminated),                             
		.out_empty          (),                                                                                                                // (terminated),                             
		.in_error           (1'b0),                                                                                                            // (terminated),                             
		.out_error          (),                                                                                                                // (terminated),                             
		.space_avail_data   (),                                                                                                                // (terminated),                             
		.almost_full_valid  (),                                                                                                                // (terminated),                             
		.almost_full_data   (),                                                                                                                // (terminated),                             
		.almost_empty_valid (),                                                                                                                // (terminated),                             
		.almost_empty_data  ()                                                                                                                 // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (249),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (3),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_001 (
		.in_clk             (matmul_afu_matmul_clock_out_clk_clk),                                                                             //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~async_fifo_in_clk_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_dma_clock_out_clk_clk),                                                                                //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset),                                                       //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_data),          //   input,  width = 249,            in.data
		.in_valid           (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (matmul_afu_matmul_ddr4a_bridge_m0_to_domain_0_default_slave_axi_error_if_rd_cmd_width_adapter_src_channel),       //   input,    width = 3,              .channel
		.out_data           (async_fifo_001_out_data),                                                                                         //  output,  width = 249,           out.data
		.out_valid          (async_fifo_001_out_valid),                                                                                        //  output,    width = 1,              .valid
		.out_ready          (async_fifo_001_out_ready),                                                                                        //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_001_out_startofpacket),                                                                                //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_001_out_endofpacket),                                                                                  //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_001_out_channel),                                                                                      //  output,    width = 3,              .channel
		.in_csr_address     (1'b0),                                                                                                            // (terminated),                             
		.in_csr_read        (1'b0),                                                                                                            // (terminated),                             
		.in_csr_write       (1'b0),                                                                                                            // (terminated),                             
		.in_csr_readdata    (),                                                                                                                // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                                            // (terminated),                             
		.out_csr_address    (1'b0),                                                                                                            // (terminated),                             
		.out_csr_read       (1'b0),                                                                                                            // (terminated),                             
		.out_csr_write      (1'b0),                                                                                                            // (terminated),                             
		.out_csr_readdata   (),                                                                                                                // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                                            // (terminated),                             
		.in_empty           (1'b0),                                                                                                            // (terminated),                             
		.out_empty          (),                                                                                                                // (terminated),                             
		.in_error           (1'b0),                                                                                                            // (terminated),                             
		.out_error          (),                                                                                                                // (terminated),                             
		.space_avail_data   (),                                                                                                                // (terminated),                             
		.almost_full_valid  (),                                                                                                                // (terminated),                             
		.almost_full_data   (),                                                                                                                // (terminated),                             
		.almost_empty_valid (),                                                                                                                // (terminated),                             
		.almost_empty_data  ()                                                                                                                 // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (681),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (3),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_002 (
		.in_clk             (matmul_afu_matmul_clock_out_clk_clk),                                                                //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~async_fifo_in_clk_reset_reset_bridge_in_reset_reset),                                               //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_dma_clock_out_clk_clk),                                                                   //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset),                                          //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_data),          //   input,  width = 681,            in.data
		.in_valid           (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (matmul_afu_matmul_ddr4a_bridge_m0_to_matmul_afu_ddr4_bridge_s0_cmd_width_adapter_src_channel),       //   input,    width = 3,              .channel
		.out_data           (async_fifo_002_out_data),                                                                            //  output,  width = 681,           out.data
		.out_valid          (async_fifo_002_out_valid),                                                                           //  output,    width = 1,              .valid
		.out_ready          (async_fifo_002_out_ready),                                                                           //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_002_out_startofpacket),                                                                   //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_002_out_endofpacket),                                                                     //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_002_out_channel),                                                                         //  output,    width = 3,              .channel
		.in_csr_address     (1'b0),                                                                                               // (terminated),                             
		.in_csr_read        (1'b0),                                                                                               // (terminated),                             
		.in_csr_write       (1'b0),                                                                                               // (terminated),                             
		.in_csr_readdata    (),                                                                                                   // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                               // (terminated),                             
		.out_csr_address    (1'b0),                                                                                               // (terminated),                             
		.out_csr_read       (1'b0),                                                                                               // (terminated),                             
		.out_csr_write      (1'b0),                                                                                               // (terminated),                             
		.out_csr_readdata   (),                                                                                                   // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                               // (terminated),                             
		.in_empty           (1'b0),                                                                                               // (terminated),                             
		.out_empty          (),                                                                                                   // (terminated),                             
		.in_error           (1'b0),                                                                                               // (terminated),                             
		.out_error          (),                                                                                                   // (terminated),                             
		.space_avail_data   (),                                                                                                   // (terminated),                             
		.almost_full_valid  (),                                                                                                   // (terminated),                             
		.almost_full_data   (),                                                                                                   // (terminated),                             
		.almost_empty_valid (),                                                                                                   // (terminated),                             
		.almost_empty_data  ()                                                                                                    // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (114),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (3),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_003 (
		.in_clk             (matmul_afu_dma_clock_out_clk_clk),                                                                                //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset),                                                       //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_matmul_clock_out_clk_clk),                                                                             //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~async_fifo_in_clk_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_data),          //   input,  width = 114,            in.data
		.in_valid           (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (domain_0_default_slave_axi_error_if_wr_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_channel),       //   input,    width = 3,              .channel
		.out_data           (async_fifo_003_out_data),                                                                                         //  output,  width = 114,           out.data
		.out_valid          (async_fifo_003_out_valid),                                                                                        //  output,    width = 1,              .valid
		.out_ready          (async_fifo_003_out_ready),                                                                                        //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_003_out_startofpacket),                                                                                //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_003_out_endofpacket),                                                                                  //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_003_out_channel),                                                                                      //  output,    width = 3,              .channel
		.in_csr_address     (1'b0),                                                                                                            // (terminated),                             
		.in_csr_read        (1'b0),                                                                                                            // (terminated),                             
		.in_csr_write       (1'b0),                                                                                                            // (terminated),                             
		.in_csr_readdata    (),                                                                                                                // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                                            // (terminated),                             
		.out_csr_address    (1'b0),                                                                                                            // (terminated),                             
		.out_csr_read       (1'b0),                                                                                                            // (terminated),                             
		.out_csr_write      (1'b0),                                                                                                            // (terminated),                             
		.out_csr_readdata   (),                                                                                                                // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                                            // (terminated),                             
		.in_empty           (1'b0),                                                                                                            // (terminated),                             
		.out_empty          (),                                                                                                                // (terminated),                             
		.in_error           (1'b0),                                                                                                            // (terminated),                             
		.out_error          (),                                                                                                                // (terminated),                             
		.space_avail_data   (),                                                                                                                // (terminated),                             
		.almost_full_valid  (),                                                                                                                // (terminated),                             
		.almost_full_data   (),                                                                                                                // (terminated),                             
		.almost_empty_valid (),                                                                                                                // (terminated),                             
		.almost_empty_data  ()                                                                                                                 // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (114),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (3),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_004 (
		.in_clk             (matmul_afu_dma_clock_out_clk_clk),                                                                                //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset),                                                       //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_matmul_clock_out_clk_clk),                                                                             //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~async_fifo_in_clk_reset_reset_bridge_in_reset_reset),                                                            //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_data),          //   input,  width = 114,            in.data
		.in_valid           (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (domain_0_default_slave_axi_error_if_rd_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_channel),       //   input,    width = 3,              .channel
		.out_data           (async_fifo_004_out_data),                                                                                         //  output,  width = 114,           out.data
		.out_valid          (async_fifo_004_out_valid),                                                                                        //  output,    width = 1,              .valid
		.out_ready          (async_fifo_004_out_ready),                                                                                        //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_004_out_startofpacket),                                                                                //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_004_out_endofpacket),                                                                                  //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_004_out_channel),                                                                                      //  output,    width = 3,              .channel
		.in_csr_address     (1'b0),                                                                                                            // (terminated),                             
		.in_csr_read        (1'b0),                                                                                                            // (terminated),                             
		.in_csr_write       (1'b0),                                                                                                            // (terminated),                             
		.in_csr_readdata    (),                                                                                                                // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                                            // (terminated),                             
		.out_csr_address    (1'b0),                                                                                                            // (terminated),                             
		.out_csr_read       (1'b0),                                                                                                            // (terminated),                             
		.out_csr_write      (1'b0),                                                                                                            // (terminated),                             
		.out_csr_readdata   (),                                                                                                                // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                                            // (terminated),                             
		.in_empty           (1'b0),                                                                                                            // (terminated),                             
		.out_empty          (),                                                                                                                // (terminated),                             
		.in_error           (1'b0),                                                                                                            // (terminated),                             
		.out_error          (),                                                                                                                // (terminated),                             
		.space_avail_data   (),                                                                                                                // (terminated),                             
		.almost_full_valid  (),                                                                                                                // (terminated),                             
		.almost_full_data   (),                                                                                                                // (terminated),                             
		.almost_empty_valid (),                                                                                                                // (terminated),                             
		.almost_empty_data  ()                                                                                                                 // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (114),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (3),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_005 (
		.in_clk             (matmul_afu_dma_clock_out_clk_clk),                                                                   //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset),                                          //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_matmul_clock_out_clk_clk),                                                                //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~async_fifo_in_clk_reset_reset_bridge_in_reset_reset),                                               //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_data),          //   input,  width = 114,            in.data
		.in_valid           (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_ready           (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,              .ready
		.in_startofpacket   (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket     (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel         (matmul_afu_ddr4_bridge_s0_to_matmul_afu_matmul_ddr4a_bridge_m0_rsp_width_adapter_src_channel),       //   input,    width = 3,              .channel
		.out_data           (async_fifo_005_out_data),                                                                            //  output,  width = 114,           out.data
		.out_valid          (async_fifo_005_out_valid),                                                                           //  output,    width = 1,              .valid
		.out_ready          (async_fifo_005_out_ready),                                                                           //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_005_out_startofpacket),                                                                   //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_005_out_endofpacket),                                                                     //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_005_out_channel),                                                                         //  output,    width = 3,              .channel
		.in_csr_address     (1'b0),                                                                                               // (terminated),                             
		.in_csr_read        (1'b0),                                                                                               // (terminated),                             
		.in_csr_write       (1'b0),                                                                                               // (terminated),                             
		.in_csr_readdata    (),                                                                                                   // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                               // (terminated),                             
		.out_csr_address    (1'b0),                                                                                               // (terminated),                             
		.out_csr_read       (1'b0),                                                                                               // (terminated),                             
		.out_csr_write      (1'b0),                                                                                               // (terminated),                             
		.out_csr_readdata   (),                                                                                                   // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                               // (terminated),                             
		.in_empty           (1'b0),                                                                                               // (terminated),                             
		.out_empty          (),                                                                                                   // (terminated),                             
		.in_error           (1'b0),                                                                                               // (terminated),                             
		.out_error          (),                                                                                                   // (terminated),                             
		.space_avail_data   (),                                                                                                   // (terminated),                             
		.almost_full_valid  (),                                                                                                   // (terminated),                             
		.almost_full_data   (),                                                                                                   // (terminated),                             
		.almost_empty_valid (),                                                                                                   // (terminated),                             
		.almost_empty_data  ()                                                                                                    // (terminated),                             
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (114),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) limiter_pipeline (
		.clk               (matmul_afu_matmul_clock_out_clk_clk),                             //   input,    width = 1,       cr0.clk
		.reset             (async_fifo_in_clk_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.in_ready          (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_data),          //   input,  width = 114,          .data
		.in_channel        (matmul_afu_matmul_ddr4a_bridge_m0_limiter_cmd_src_channel),       //   input,    width = 3,          .channel
		.out_ready         (limiter_pipeline_source0_ready),                                  //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                                  //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                            //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                                   //  output,  width = 114,          .data
		.out_channel       (limiter_pipeline_source0_channel),                                //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                                            // (terminated),                         
		.out_empty         (),                                                                // (terminated),                         
		.out_error         (),                                                                // (terminated),                         
		.in_error          (1'b0)                                                             // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (114),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) limiter_pipeline_001 (
		.clk               (matmul_afu_matmul_clock_out_clk_clk),                 //   input,    width = 1,       cr0.clk
		.reset             (async_fifo_in_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_src_data),                                    //   input,  width = 114,          .data
		.in_channel        (rsp_mux_src_channel),                                 //   input,    width = 3,          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                   //  output,  width = 114,          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0)                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (681),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) limiter_pipeline_002 (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                         //   input,    width = 1,       cr0.clk
		.reset             (matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (msgdma_bbb_mem_read_write_limiter_cmd_src_ready),          //  output,    width = 1,     sink0.ready
		.in_valid          (msgdma_bbb_mem_read_write_limiter_cmd_src_valid),          //   input,    width = 1,          .valid
		.in_startofpacket  (msgdma_bbb_mem_read_write_limiter_cmd_src_startofpacket),  //   input,    width = 1,          .startofpacket
		.in_endofpacket    (msgdma_bbb_mem_read_write_limiter_cmd_src_endofpacket),    //   input,    width = 1,          .endofpacket
		.in_data           (msgdma_bbb_mem_read_write_limiter_cmd_src_data),           //   input,  width = 681,          .data
		.in_channel        (msgdma_bbb_mem_read_write_limiter_cmd_src_channel),        //   input,    width = 3,          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                        //  output,  width = 681,          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                     //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_error          (1'b0)                                                      // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (681),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) limiter_pipeline_003 (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                         //   input,    width = 1,       cr0.clk
		.reset             (matmul_afu_ddr4_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                                    //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                                    //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_001_src_data),                                     //   input,  width = 681,          .data
		.in_channel        (rsp_mux_001_src_channel),                                  //   input,    width = 3,          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                        //  output,  width = 681,          .data
		.out_channel       (limiter_pipeline_003_source0_channel),                     //  output,    width = 3,          .channel
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_error          (1'b0)                                                      // (terminated),                         
	);

endmodule
