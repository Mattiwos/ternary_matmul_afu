// mu_afu_system_altera_mm_interconnect_191_5glh2xi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module mu_afu_system_altera_mm_interconnect_191_5glh2xi (
		input  wire [5:0]  matrix_unit_0_avalon_a_imem_address,               //                 matrix_unit_0_avalon_a_imem.address
		input  wire        matrix_unit_0_avalon_a_imem_chipselect,            //                                            .chipselect
		output wire [63:0] matrix_unit_0_avalon_a_imem_readdata,              //                                            .readdata
		input  wire        matrix_unit_0_avalon_a_imem_write,                 //                                            .write
		input  wire [63:0] matrix_unit_0_avalon_a_imem_writedata,             //                                            .writedata
		output wire [5:0]  matmul_afu_pgm_ram_s2_address,                     //                       matmul_afu_pgm_ram_s2.address
		output wire        matmul_afu_pgm_ram_s2_write,                       //                                            .write
		input  wire [63:0] matmul_afu_pgm_ram_s2_readdata,                    //                                            .readdata
		output wire [63:0] matmul_afu_pgm_ram_s2_writedata,                   //                                            .writedata
		output wire [7:0]  matmul_afu_pgm_ram_s2_byteenable,                  //                                            .byteenable
		output wire        matmul_afu_pgm_ram_s2_chipselect,                  //                                            .chipselect
		output wire        matmul_afu_pgm_ram_s2_clken,                       //                                            .clken
		input  wire        matrix_unit_0_reset_n_reset_bridge_in_reset_reset, // matrix_unit_0_reset_n_reset_bridge_in_reset.reset
		input  wire        matmul_afu_matmul_clock_out_clk_clk                //             matmul_afu_matmul_clock_out_clk.clk
	);

	wire         matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_waitrequest;   // matmul_afu_pgm_ram_s2_translator:uav_waitrequest -> matrix_unit_0_avalon_a_imem_translator:uav_waitrequest
	wire  [63:0] matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_readdata;      // matmul_afu_pgm_ram_s2_translator:uav_readdata -> matrix_unit_0_avalon_a_imem_translator:uav_readdata
	wire         matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_debugaccess;   // matrix_unit_0_avalon_a_imem_translator:uav_debugaccess -> matmul_afu_pgm_ram_s2_translator:uav_debugaccess
	wire   [8:0] matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_address;       // matrix_unit_0_avalon_a_imem_translator:uav_address -> matmul_afu_pgm_ram_s2_translator:uav_address
	wire         matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_read;          // matrix_unit_0_avalon_a_imem_translator:uav_read -> matmul_afu_pgm_ram_s2_translator:uav_read
	wire   [7:0] matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_byteenable;    // matrix_unit_0_avalon_a_imem_translator:uav_byteenable -> matmul_afu_pgm_ram_s2_translator:uav_byteenable
	wire         matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_readdatavalid; // matmul_afu_pgm_ram_s2_translator:uav_readdatavalid -> matrix_unit_0_avalon_a_imem_translator:uav_readdatavalid
	wire         matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_lock;          // matrix_unit_0_avalon_a_imem_translator:uav_lock -> matmul_afu_pgm_ram_s2_translator:uav_lock
	wire         matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_write;         // matrix_unit_0_avalon_a_imem_translator:uav_write -> matmul_afu_pgm_ram_s2_translator:uav_write
	wire  [63:0] matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_writedata;     // matrix_unit_0_avalon_a_imem_translator:uav_writedata -> matmul_afu_pgm_ram_s2_translator:uav_writedata
	wire   [3:0] matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_burstcount;    // matrix_unit_0_avalon_a_imem_translator:uav_burstcount -> matmul_afu_pgm_ram_s2_translator:uav_burstcount

	mu_afu_system_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (6),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (9),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (0),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) matrix_unit_0_avalon_a_imem_translator (
		.clk                    (matmul_afu_matmul_clock_out_clk_clk),                                            //   input,   width = 1,                       clk.clk
		.reset                  (matrix_unit_0_reset_n_reset_bridge_in_reset_reset),                              //   input,   width = 1,                     reset.reset
		.uav_address            (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_address),       //  output,   width = 9, avalon_universal_master_0.address
		.uav_burstcount         (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (matrix_unit_0_avalon_a_imem_address),                                            //   input,   width = 6,      avalon_anti_master_0.address
		.av_chipselect          (matrix_unit_0_avalon_a_imem_chipselect),                                         //   input,   width = 1,                          .chipselect
		.av_readdata            (matrix_unit_0_avalon_a_imem_readdata),                                           //  output,  width = 64,                          .readdata
		.av_write               (matrix_unit_0_avalon_a_imem_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (matrix_unit_0_avalon_a_imem_writedata),                                          //   input,  width = 64,                          .writedata
		.av_waitrequest         (),                                                                               // (terminated),                                        
		.av_burstcount          (1'b1),                                                                           // (terminated),                                        
		.av_byteenable          (8'b11111111),                                                                    // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                           // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                           // (terminated),                                        
		.av_read                (1'b0),                                                                           // (terminated),                                        
		.av_readdatavalid       (),                                                                               // (terminated),                                        
		.av_lock                (1'b0),                                                                           // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                           // (terminated),                                        
		.uav_clken              (),                                                                               // (terminated),                                        
		.av_clken               (1'b1),                                                                           // (terminated),                                        
		.uav_response           (2'b00),                                                                          // (terminated),                                        
		.av_response            (),                                                                               // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                           // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                // (terminated),                                        
	);

	mu_afu_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) matmul_afu_pgm_ram_s2_translator (
		.clk                    (matmul_afu_matmul_clock_out_clk_clk),                                            //   input,   width = 1,                      clk.clk
		.reset                  (matrix_unit_0_reset_n_reset_bridge_in_reset_reset),                              //   input,   width = 1,                    reset.reset
		.uav_address            (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_address),       //   input,   width = 9, avalon_universal_slave_0.address
		.uav_burstcount         (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_read),          //   input,   width = 1,                         .read
		.uav_write              (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (matrix_unit_0_avalon_a_imem_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (matmul_afu_pgm_ram_s2_address),                                                  //  output,   width = 6,      avalon_anti_slave_0.address
		.av_write               (matmul_afu_pgm_ram_s2_write),                                                    //  output,   width = 1,                         .write
		.av_readdata            (matmul_afu_pgm_ram_s2_readdata),                                                 //   input,  width = 64,                         .readdata
		.av_writedata           (matmul_afu_pgm_ram_s2_writedata),                                                //  output,  width = 64,                         .writedata
		.av_byteenable          (matmul_afu_pgm_ram_s2_byteenable),                                               //  output,   width = 8,                         .byteenable
		.av_chipselect          (matmul_afu_pgm_ram_s2_chipselect),                                               //  output,   width = 1,                         .chipselect
		.av_clken               (matmul_afu_pgm_ram_s2_clken),                                                    //  output,   width = 1,                         .clken
		.av_read                (),                                                                               // (terminated),                                       
		.av_begintransfer       (),                                                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                                                               // (terminated),                                       
		.av_burstcount          (),                                                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                           // (terminated),                                       
		.av_writebyteenable     (),                                                                               // (terminated),                                       
		.av_lock                (),                                                                               // (terminated),                                       
		.uav_clken              (1'b0),                                                                           // (terminated),                                       
		.av_debugaccess         (),                                                                               // (terminated),                                       
		.av_outputenable        (),                                                                               // (terminated),                                       
		.uav_response           (),                                                                               // (terminated),                                       
		.av_response            (2'b00),                                                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                            // (terminated),                                       
	);

endmodule
