// matmul_afu_system_fixed_altera_mm_interconnect_191_vq2rsua.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module matmul_afu_system_fixed_altera_mm_interconnect_191_vq2rsua (
		input  wire [47:0] matmul_afu_csr_bridge_master_address,                                                 //                                                   matmul_afu_csr_bridge_master.address
		output wire        matmul_afu_csr_bridge_master_waitrequest,                                             //                                                                               .waitrequest
		input  wire [0:0]  matmul_afu_csr_bridge_master_burstcount,                                              //                                                                               .burstcount
		input  wire [7:0]  matmul_afu_csr_bridge_master_byteenable,                                              //                                                                               .byteenable
		input  wire        matmul_afu_csr_bridge_master_read,                                                    //                                                                               .read
		output wire [63:0] matmul_afu_csr_bridge_master_readdata,                                                //                                                                               .readdata
		output wire        matmul_afu_csr_bridge_master_readdatavalid,                                           //                                                                               .readdatavalid
		input  wire        matmul_afu_csr_bridge_master_write,                                                   //                                                                               .write
		input  wire [63:0] matmul_afu_csr_bridge_master_writedata,                                               //                                                                               .writedata
		output wire [2:0]  matmul_afu_id_afu_afu_cfg_slave_address,                                              //                                                matmul_afu_id_afu_afu_cfg_slave.address
		output wire        matmul_afu_id_afu_afu_cfg_slave_write,                                                //                                                                               .write
		output wire        matmul_afu_id_afu_afu_cfg_slave_read,                                                 //                                                                               .read
		input  wire [63:0] matmul_afu_id_afu_afu_cfg_slave_readdata,                                             //                                                                               .readdata
		output wire [63:0] matmul_afu_id_afu_afu_cfg_slave_writedata,                                            //                                                                               .writedata
		output wire [2:0]  matmul_afu_id_matmul_afu_cfg_slave_address,                                           //                                             matmul_afu_id_matmul_afu_cfg_slave.address
		output wire        matmul_afu_id_matmul_afu_cfg_slave_write,                                             //                                                                               .write
		output wire        matmul_afu_id_matmul_afu_cfg_slave_read,                                              //                                                                               .read
		input  wire [63:0] matmul_afu_id_matmul_afu_cfg_slave_readdata,                                          //                                                                               .readdata
		output wire [63:0] matmul_afu_id_matmul_afu_cfg_slave_writedata,                                         //                                                                               .writedata
		output wire [2:0]  matmul_afu_id_dma_afu_cfg_slave_address,                                              //                                                matmul_afu_id_dma_afu_cfg_slave.address
		output wire        matmul_afu_id_dma_afu_cfg_slave_write,                                                //                                                                               .write
		output wire        matmul_afu_id_dma_afu_cfg_slave_read,                                                 //                                                                               .read
		input  wire [63:0] matmul_afu_id_dma_afu_cfg_slave_readdata,                                             //                                                                               .readdata
		output wire [63:0] matmul_afu_id_dma_afu_cfg_slave_writedata,                                            //                                                                               .writedata
		output wire [7:0]  msgdma_bbb_csr_address,                                                               //                                                                 msgdma_bbb_csr.address
		output wire        msgdma_bbb_csr_write,                                                                 //                                                                               .write
		output wire        msgdma_bbb_csr_read,                                                                  //                                                                               .read
		input  wire [63:0] msgdma_bbb_csr_readdata,                                                              //                                                                               .readdata
		output wire [63:0] msgdma_bbb_csr_writedata,                                                             //                                                                               .writedata
		output wire [0:0]  msgdma_bbb_csr_burstcount,                                                            //                                                                               .burstcount
		output wire [7:0]  msgdma_bbb_csr_byteenable,                                                            //                                                                               .byteenable
		input  wire        msgdma_bbb_csr_readdatavalid,                                                         //                                                                               .readdatavalid
		input  wire        msgdma_bbb_csr_waitrequest,                                                           //                                                                               .waitrequest
		output wire [1:0]  matmul_afu_start_matmul_s1_address,                                                   //                                                     matmul_afu_start_matmul_s1.address
		output wire        matmul_afu_start_matmul_s1_write,                                                     //                                                                               .write
		input  wire [31:0] matmul_afu_start_matmul_s1_readdata,                                                  //                                                                               .readdata
		output wire [31:0] matmul_afu_start_matmul_s1_writedata,                                                 //                                                                               .writedata
		output wire        matmul_afu_start_matmul_s1_chipselect,                                                //                                                                               .chipselect
		output wire [1:0]  matmul_afu_matmul_ready_s1_address,                                                   //                                                     matmul_afu_matmul_ready_s1.address
		output wire        matmul_afu_matmul_ready_s1_write,                                                     //                                                                               .write
		input  wire [31:0] matmul_afu_matmul_ready_s1_readdata,                                                  //                                                                               .readdata
		output wire [31:0] matmul_afu_matmul_ready_s1_writedata,                                                 //                                                                               .writedata
		output wire        matmul_afu_matmul_ready_s1_chipselect,                                                //                                                                               .chipselect
		output wire [8:0]  matmul_afu_pgm_ram_s1_address,                                                        //                                                          matmul_afu_pgm_ram_s1.address
		output wire        matmul_afu_pgm_ram_s1_write,                                                          //                                                                               .write
		input  wire [63:0] matmul_afu_pgm_ram_s1_readdata,                                                       //                                                                               .readdata
		output wire [63:0] matmul_afu_pgm_ram_s1_writedata,                                                      //                                                                               .writedata
		output wire [7:0]  matmul_afu_pgm_ram_s1_byteenable,                                                     //                                                                               .byteenable
		output wire        matmul_afu_pgm_ram_s1_chipselect,                                                     //                                                                               .chipselect
		output wire        matmul_afu_pgm_ram_s1_clken,                                                          //                                                                               .clken
		input  wire        matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset,                              //                              matmul_afu_csr_bridge_reset_reset_bridge_in_reset.reset
		input  wire        matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset,                            //                            matmul_afu_start_matmul_reset_reset_bridge_in_reset.reset
		input  wire        matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset,              //              matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset.reset
		input  wire        matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset, // matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset.reset
		input  wire        matmul_afu_dma_clock_out_clk_clk,                                                     //                                                   matmul_afu_dma_clock_out_clk.clk
		input  wire        matmul_afu_matmul_clock_out_clk_clk                                                   //                                                matmul_afu_matmul_clock_out_clk.clk
	);

	wire          matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_waitrequest;   // matmul_afu_csr_bridge_master_agent:av_waitrequest -> matmul_afu_csr_bridge_master_translator:uav_waitrequest
	wire   [63:0] matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_readdata;      // matmul_afu_csr_bridge_master_agent:av_readdata -> matmul_afu_csr_bridge_master_translator:uav_readdata
	wire          matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_debugaccess;   // matmul_afu_csr_bridge_master_translator:uav_debugaccess -> matmul_afu_csr_bridge_master_agent:av_debugaccess
	wire   [47:0] matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_address;       // matmul_afu_csr_bridge_master_translator:uav_address -> matmul_afu_csr_bridge_master_agent:av_address
	wire          matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_read;          // matmul_afu_csr_bridge_master_translator:uav_read -> matmul_afu_csr_bridge_master_agent:av_read
	wire    [7:0] matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_byteenable;    // matmul_afu_csr_bridge_master_translator:uav_byteenable -> matmul_afu_csr_bridge_master_agent:av_byteenable
	wire          matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_readdatavalid; // matmul_afu_csr_bridge_master_agent:av_readdatavalid -> matmul_afu_csr_bridge_master_translator:uav_readdatavalid
	wire          matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_lock;          // matmul_afu_csr_bridge_master_translator:uav_lock -> matmul_afu_csr_bridge_master_agent:av_lock
	wire          matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_write;         // matmul_afu_csr_bridge_master_translator:uav_write -> matmul_afu_csr_bridge_master_agent:av_write
	wire   [63:0] matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_writedata;     // matmul_afu_csr_bridge_master_translator:uav_writedata -> matmul_afu_csr_bridge_master_agent:av_writedata
	wire    [3:0] matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_burstcount;    // matmul_afu_csr_bridge_master_translator:uav_burstcount -> matmul_afu_csr_bridge_master_agent:av_burstcount
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awburst;             // domain_0_default_slave_axi_error_if_agent:awburst -> domain_0_default_slave:awburst
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlen;               // domain_0_default_slave_axi_error_if_agent:arlen -> domain_0_default_slave:arlen
	wire    [7:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_wstrb;               // domain_0_default_slave_axi_error_if_agent:wstrb -> domain_0_default_slave:wstrb
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_wready;              // domain_0_default_slave:wready -> domain_0_default_slave_axi_error_if_agent:wready
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_rid;                 // domain_0_default_slave:rid -> domain_0_default_slave_axi_error_if_agent:rid
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_rready;              // domain_0_default_slave_axi_error_if_agent:rready -> domain_0_default_slave:rready
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlen;               // domain_0_default_slave_axi_error_if_agent:awlen -> domain_0_default_slave:awlen
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_wid;                 // domain_0_default_slave_axi_error_if_agent:wid -> domain_0_default_slave:wid
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arcache;             // domain_0_default_slave_axi_error_if_agent:arcache -> domain_0_default_slave:arcache
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_wvalid;              // domain_0_default_slave_axi_error_if_agent:wvalid -> domain_0_default_slave:wvalid
	wire   [47:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_araddr;              // domain_0_default_slave_axi_error_if_agent:araddr -> domain_0_default_slave:araddr
	wire    [2:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arprot;              // domain_0_default_slave_axi_error_if_agent:arprot -> domain_0_default_slave:arprot
	wire    [2:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awprot;              // domain_0_default_slave_axi_error_if_agent:awprot -> domain_0_default_slave:awprot
	wire   [63:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_wdata;               // domain_0_default_slave_axi_error_if_agent:wdata -> domain_0_default_slave:wdata
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_arvalid;             // domain_0_default_slave_axi_error_if_agent:arvalid -> domain_0_default_slave:arvalid
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awcache;             // domain_0_default_slave_axi_error_if_agent:awcache -> domain_0_default_slave:awcache
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arid;                // domain_0_default_slave_axi_error_if_agent:arid -> domain_0_default_slave:arid
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlock;              // domain_0_default_slave_axi_error_if_agent:arlock -> domain_0_default_slave:arlock
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlock;              // domain_0_default_slave_axi_error_if_agent:awlock -> domain_0_default_slave:awlock
	wire   [47:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awaddr;              // domain_0_default_slave_axi_error_if_agent:awaddr -> domain_0_default_slave:awaddr
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_bresp;               // domain_0_default_slave:bresp -> domain_0_default_slave_axi_error_if_agent:bresp
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_arready;             // domain_0_default_slave:arready -> domain_0_default_slave_axi_error_if_agent:arready
	wire   [63:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_rdata;               // domain_0_default_slave:rdata -> domain_0_default_slave_axi_error_if_agent:rdata
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_awready;             // domain_0_default_slave:awready -> domain_0_default_slave_axi_error_if_agent:awready
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arburst;             // domain_0_default_slave_axi_error_if_agent:arburst -> domain_0_default_slave:arburst
	wire    [2:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_arsize;              // domain_0_default_slave_axi_error_if_agent:arsize -> domain_0_default_slave:arsize
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_bready;              // domain_0_default_slave_axi_error_if_agent:bready -> domain_0_default_slave:bready
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_rlast;               // domain_0_default_slave:rlast -> domain_0_default_slave_axi_error_if_agent:rlast
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_wlast;               // domain_0_default_slave_axi_error_if_agent:wlast -> domain_0_default_slave:wlast
	wire    [1:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_rresp;               // domain_0_default_slave:rresp -> domain_0_default_slave_axi_error_if_agent:rresp
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awid;                // domain_0_default_slave_axi_error_if_agent:awid -> domain_0_default_slave:awid
	wire    [3:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_bid;                 // domain_0_default_slave:bid -> domain_0_default_slave_axi_error_if_agent:bid
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_bvalid;              // domain_0_default_slave:bvalid -> domain_0_default_slave_axi_error_if_agent:bvalid
	wire    [2:0] domain_0_default_slave_axi_error_if_agent_altera_axi_master_awsize;              // domain_0_default_slave_axi_error_if_agent:awsize -> domain_0_default_slave:awsize
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_awvalid;             // domain_0_default_slave_axi_error_if_agent:awvalid -> domain_0_default_slave:awvalid
	wire          domain_0_default_slave_axi_error_if_agent_altera_axi_master_rvalid;              // domain_0_default_slave:rvalid -> domain_0_default_slave_axi_error_if_agent:rvalid
	wire          cmd_mux_src_valid;                                                               // cmd_mux:src_valid -> domain_0_default_slave_axi_error_if_agent:write_cp_valid
	wire  [178:0] cmd_mux_src_data;                                                                // cmd_mux:src_data -> domain_0_default_slave_axi_error_if_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                               // domain_0_default_slave_axi_error_if_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [8:0] cmd_mux_src_channel;                                                             // cmd_mux:src_channel -> domain_0_default_slave_axi_error_if_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                                       // cmd_mux:src_startofpacket -> domain_0_default_slave_axi_error_if_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                         // cmd_mux:src_endofpacket -> domain_0_default_slave_axi_error_if_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                           // cmd_mux_001:src_valid -> domain_0_default_slave_axi_error_if_agent:read_cp_valid
	wire  [178:0] cmd_mux_001_src_data;                                                            // cmd_mux_001:src_data -> domain_0_default_slave_axi_error_if_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                           // domain_0_default_slave_axi_error_if_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [8:0] cmd_mux_001_src_channel;                                                         // cmd_mux_001:src_channel -> domain_0_default_slave_axi_error_if_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                   // cmd_mux_001:src_startofpacket -> domain_0_default_slave_axi_error_if_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                     // cmd_mux_001:src_endofpacket -> domain_0_default_slave_axi_error_if_agent:read_cp_endofpacket
	wire   [63:0] matmul_afu_id_afu_afu_cfg_slave_agent_m0_readdata;                               // matmul_afu_id_afu_afu_cfg_slave_translator:uav_readdata -> matmul_afu_id_afu_afu_cfg_slave_agent:m0_readdata
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_m0_waitrequest;                            // matmul_afu_id_afu_afu_cfg_slave_translator:uav_waitrequest -> matmul_afu_id_afu_afu_cfg_slave_agent:m0_waitrequest
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_m0_debugaccess;                            // matmul_afu_id_afu_afu_cfg_slave_agent:m0_debugaccess -> matmul_afu_id_afu_afu_cfg_slave_translator:uav_debugaccess
	wire   [47:0] matmul_afu_id_afu_afu_cfg_slave_agent_m0_address;                                // matmul_afu_id_afu_afu_cfg_slave_agent:m0_address -> matmul_afu_id_afu_afu_cfg_slave_translator:uav_address
	wire    [7:0] matmul_afu_id_afu_afu_cfg_slave_agent_m0_byteenable;                             // matmul_afu_id_afu_afu_cfg_slave_agent:m0_byteenable -> matmul_afu_id_afu_afu_cfg_slave_translator:uav_byteenable
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_m0_read;                                   // matmul_afu_id_afu_afu_cfg_slave_agent:m0_read -> matmul_afu_id_afu_afu_cfg_slave_translator:uav_read
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_m0_readdatavalid;                          // matmul_afu_id_afu_afu_cfg_slave_translator:uav_readdatavalid -> matmul_afu_id_afu_afu_cfg_slave_agent:m0_readdatavalid
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_m0_lock;                                   // matmul_afu_id_afu_afu_cfg_slave_agent:m0_lock -> matmul_afu_id_afu_afu_cfg_slave_translator:uav_lock
	wire   [63:0] matmul_afu_id_afu_afu_cfg_slave_agent_m0_writedata;                              // matmul_afu_id_afu_afu_cfg_slave_agent:m0_writedata -> matmul_afu_id_afu_afu_cfg_slave_translator:uav_writedata
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_m0_write;                                  // matmul_afu_id_afu_afu_cfg_slave_agent:m0_write -> matmul_afu_id_afu_afu_cfg_slave_translator:uav_write
	wire    [3:0] matmul_afu_id_afu_afu_cfg_slave_agent_m0_burstcount;                             // matmul_afu_id_afu_afu_cfg_slave_agent:m0_burstcount -> matmul_afu_id_afu_afu_cfg_slave_translator:uav_burstcount
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_valid;                           // matmul_afu_id_afu_afu_cfg_slave_agent:rf_source_valid -> matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:in_valid
	wire  [179:0] matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_data;                            // matmul_afu_id_afu_afu_cfg_slave_agent:rf_source_data -> matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:in_data
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_ready;                           // matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:in_ready -> matmul_afu_id_afu_afu_cfg_slave_agent:rf_source_ready
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_startofpacket;                   // matmul_afu_id_afu_afu_cfg_slave_agent:rf_source_startofpacket -> matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:in_startofpacket
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_endofpacket;                     // matmul_afu_id_afu_afu_cfg_slave_agent:rf_source_endofpacket -> matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:in_endofpacket
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_valid;                        // matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:out_valid -> matmul_afu_id_afu_afu_cfg_slave_agent:rf_sink_valid
	wire  [179:0] matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_data;                         // matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:out_data -> matmul_afu_id_afu_afu_cfg_slave_agent:rf_sink_data
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_ready;                        // matmul_afu_id_afu_afu_cfg_slave_agent:rf_sink_ready -> matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:out_ready
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_startofpacket;                // matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:out_startofpacket -> matmul_afu_id_afu_afu_cfg_slave_agent:rf_sink_startofpacket
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_endofpacket;                  // matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo:out_endofpacket -> matmul_afu_id_afu_afu_cfg_slave_agent:rf_sink_endofpacket
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rdata_fifo_src_valid;                      // matmul_afu_id_afu_afu_cfg_slave_agent:rdata_fifo_src_valid -> matmul_afu_id_afu_afu_cfg_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] matmul_afu_id_afu_afu_cfg_slave_agent_rdata_fifo_src_data;                       // matmul_afu_id_afu_afu_cfg_slave_agent:rdata_fifo_src_data -> matmul_afu_id_afu_afu_cfg_slave_agent:rdata_fifo_sink_data
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rdata_fifo_src_ready;                      // matmul_afu_id_afu_afu_cfg_slave_agent:rdata_fifo_sink_ready -> matmul_afu_id_afu_afu_cfg_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                           // cmd_mux_002:src_valid -> matmul_afu_id_afu_afu_cfg_slave_agent:cp_valid
	wire  [178:0] cmd_mux_002_src_data;                                                            // cmd_mux_002:src_data -> matmul_afu_id_afu_afu_cfg_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                           // matmul_afu_id_afu_afu_cfg_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [8:0] cmd_mux_002_src_channel;                                                         // cmd_mux_002:src_channel -> matmul_afu_id_afu_afu_cfg_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                   // cmd_mux_002:src_startofpacket -> matmul_afu_id_afu_afu_cfg_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                     // cmd_mux_002:src_endofpacket -> matmul_afu_id_afu_afu_cfg_slave_agent:cp_endofpacket
	wire   [63:0] matmul_afu_id_matmul_afu_cfg_slave_agent_m0_readdata;                            // matmul_afu_id_matmul_afu_cfg_slave_translator:uav_readdata -> matmul_afu_id_matmul_afu_cfg_slave_agent:m0_readdata
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_m0_waitrequest;                         // matmul_afu_id_matmul_afu_cfg_slave_translator:uav_waitrequest -> matmul_afu_id_matmul_afu_cfg_slave_agent:m0_waitrequest
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_m0_debugaccess;                         // matmul_afu_id_matmul_afu_cfg_slave_agent:m0_debugaccess -> matmul_afu_id_matmul_afu_cfg_slave_translator:uav_debugaccess
	wire   [47:0] matmul_afu_id_matmul_afu_cfg_slave_agent_m0_address;                             // matmul_afu_id_matmul_afu_cfg_slave_agent:m0_address -> matmul_afu_id_matmul_afu_cfg_slave_translator:uav_address
	wire    [7:0] matmul_afu_id_matmul_afu_cfg_slave_agent_m0_byteenable;                          // matmul_afu_id_matmul_afu_cfg_slave_agent:m0_byteenable -> matmul_afu_id_matmul_afu_cfg_slave_translator:uav_byteenable
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_m0_read;                                // matmul_afu_id_matmul_afu_cfg_slave_agent:m0_read -> matmul_afu_id_matmul_afu_cfg_slave_translator:uav_read
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_m0_readdatavalid;                       // matmul_afu_id_matmul_afu_cfg_slave_translator:uav_readdatavalid -> matmul_afu_id_matmul_afu_cfg_slave_agent:m0_readdatavalid
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_m0_lock;                                // matmul_afu_id_matmul_afu_cfg_slave_agent:m0_lock -> matmul_afu_id_matmul_afu_cfg_slave_translator:uav_lock
	wire   [63:0] matmul_afu_id_matmul_afu_cfg_slave_agent_m0_writedata;                           // matmul_afu_id_matmul_afu_cfg_slave_agent:m0_writedata -> matmul_afu_id_matmul_afu_cfg_slave_translator:uav_writedata
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_m0_write;                               // matmul_afu_id_matmul_afu_cfg_slave_agent:m0_write -> matmul_afu_id_matmul_afu_cfg_slave_translator:uav_write
	wire    [3:0] matmul_afu_id_matmul_afu_cfg_slave_agent_m0_burstcount;                          // matmul_afu_id_matmul_afu_cfg_slave_agent:m0_burstcount -> matmul_afu_id_matmul_afu_cfg_slave_translator:uav_burstcount
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_valid;                        // matmul_afu_id_matmul_afu_cfg_slave_agent:rf_source_valid -> matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:in_valid
	wire  [179:0] matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_data;                         // matmul_afu_id_matmul_afu_cfg_slave_agent:rf_source_data -> matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:in_data
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_ready;                        // matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:in_ready -> matmul_afu_id_matmul_afu_cfg_slave_agent:rf_source_ready
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_startofpacket;                // matmul_afu_id_matmul_afu_cfg_slave_agent:rf_source_startofpacket -> matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:in_startofpacket
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_endofpacket;                  // matmul_afu_id_matmul_afu_cfg_slave_agent:rf_source_endofpacket -> matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:in_endofpacket
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_valid;                     // matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:out_valid -> matmul_afu_id_matmul_afu_cfg_slave_agent:rf_sink_valid
	wire  [179:0] matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_data;                      // matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:out_data -> matmul_afu_id_matmul_afu_cfg_slave_agent:rf_sink_data
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_ready;                     // matmul_afu_id_matmul_afu_cfg_slave_agent:rf_sink_ready -> matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:out_ready
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_startofpacket;             // matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:out_startofpacket -> matmul_afu_id_matmul_afu_cfg_slave_agent:rf_sink_startofpacket
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_endofpacket;               // matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo:out_endofpacket -> matmul_afu_id_matmul_afu_cfg_slave_agent:rf_sink_endofpacket
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rdata_fifo_src_valid;                   // matmul_afu_id_matmul_afu_cfg_slave_agent:rdata_fifo_src_valid -> matmul_afu_id_matmul_afu_cfg_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] matmul_afu_id_matmul_afu_cfg_slave_agent_rdata_fifo_src_data;                    // matmul_afu_id_matmul_afu_cfg_slave_agent:rdata_fifo_src_data -> matmul_afu_id_matmul_afu_cfg_slave_agent:rdata_fifo_sink_data
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rdata_fifo_src_ready;                   // matmul_afu_id_matmul_afu_cfg_slave_agent:rdata_fifo_sink_ready -> matmul_afu_id_matmul_afu_cfg_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                           // cmd_mux_003:src_valid -> matmul_afu_id_matmul_afu_cfg_slave_agent:cp_valid
	wire  [178:0] cmd_mux_003_src_data;                                                            // cmd_mux_003:src_data -> matmul_afu_id_matmul_afu_cfg_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                           // matmul_afu_id_matmul_afu_cfg_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [8:0] cmd_mux_003_src_channel;                                                         // cmd_mux_003:src_channel -> matmul_afu_id_matmul_afu_cfg_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                   // cmd_mux_003:src_startofpacket -> matmul_afu_id_matmul_afu_cfg_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                     // cmd_mux_003:src_endofpacket -> matmul_afu_id_matmul_afu_cfg_slave_agent:cp_endofpacket
	wire   [63:0] matmul_afu_id_dma_afu_cfg_slave_agent_m0_readdata;                               // matmul_afu_id_dma_afu_cfg_slave_translator:uav_readdata -> matmul_afu_id_dma_afu_cfg_slave_agent:m0_readdata
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_m0_waitrequest;                            // matmul_afu_id_dma_afu_cfg_slave_translator:uav_waitrequest -> matmul_afu_id_dma_afu_cfg_slave_agent:m0_waitrequest
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_m0_debugaccess;                            // matmul_afu_id_dma_afu_cfg_slave_agent:m0_debugaccess -> matmul_afu_id_dma_afu_cfg_slave_translator:uav_debugaccess
	wire   [47:0] matmul_afu_id_dma_afu_cfg_slave_agent_m0_address;                                // matmul_afu_id_dma_afu_cfg_slave_agent:m0_address -> matmul_afu_id_dma_afu_cfg_slave_translator:uav_address
	wire    [7:0] matmul_afu_id_dma_afu_cfg_slave_agent_m0_byteenable;                             // matmul_afu_id_dma_afu_cfg_slave_agent:m0_byteenable -> matmul_afu_id_dma_afu_cfg_slave_translator:uav_byteenable
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_m0_read;                                   // matmul_afu_id_dma_afu_cfg_slave_agent:m0_read -> matmul_afu_id_dma_afu_cfg_slave_translator:uav_read
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_m0_readdatavalid;                          // matmul_afu_id_dma_afu_cfg_slave_translator:uav_readdatavalid -> matmul_afu_id_dma_afu_cfg_slave_agent:m0_readdatavalid
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_m0_lock;                                   // matmul_afu_id_dma_afu_cfg_slave_agent:m0_lock -> matmul_afu_id_dma_afu_cfg_slave_translator:uav_lock
	wire   [63:0] matmul_afu_id_dma_afu_cfg_slave_agent_m0_writedata;                              // matmul_afu_id_dma_afu_cfg_slave_agent:m0_writedata -> matmul_afu_id_dma_afu_cfg_slave_translator:uav_writedata
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_m0_write;                                  // matmul_afu_id_dma_afu_cfg_slave_agent:m0_write -> matmul_afu_id_dma_afu_cfg_slave_translator:uav_write
	wire    [3:0] matmul_afu_id_dma_afu_cfg_slave_agent_m0_burstcount;                             // matmul_afu_id_dma_afu_cfg_slave_agent:m0_burstcount -> matmul_afu_id_dma_afu_cfg_slave_translator:uav_burstcount
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_valid;                           // matmul_afu_id_dma_afu_cfg_slave_agent:rf_source_valid -> matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:in_valid
	wire  [179:0] matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_data;                            // matmul_afu_id_dma_afu_cfg_slave_agent:rf_source_data -> matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:in_data
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_ready;                           // matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:in_ready -> matmul_afu_id_dma_afu_cfg_slave_agent:rf_source_ready
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_startofpacket;                   // matmul_afu_id_dma_afu_cfg_slave_agent:rf_source_startofpacket -> matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:in_startofpacket
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_endofpacket;                     // matmul_afu_id_dma_afu_cfg_slave_agent:rf_source_endofpacket -> matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:in_endofpacket
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_valid;                        // matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:out_valid -> matmul_afu_id_dma_afu_cfg_slave_agent:rf_sink_valid
	wire  [179:0] matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_data;                         // matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:out_data -> matmul_afu_id_dma_afu_cfg_slave_agent:rf_sink_data
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_ready;                        // matmul_afu_id_dma_afu_cfg_slave_agent:rf_sink_ready -> matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:out_ready
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_startofpacket;                // matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:out_startofpacket -> matmul_afu_id_dma_afu_cfg_slave_agent:rf_sink_startofpacket
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_endofpacket;                  // matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo:out_endofpacket -> matmul_afu_id_dma_afu_cfg_slave_agent:rf_sink_endofpacket
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rdata_fifo_src_valid;                      // matmul_afu_id_dma_afu_cfg_slave_agent:rdata_fifo_src_valid -> matmul_afu_id_dma_afu_cfg_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] matmul_afu_id_dma_afu_cfg_slave_agent_rdata_fifo_src_data;                       // matmul_afu_id_dma_afu_cfg_slave_agent:rdata_fifo_src_data -> matmul_afu_id_dma_afu_cfg_slave_agent:rdata_fifo_sink_data
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rdata_fifo_src_ready;                      // matmul_afu_id_dma_afu_cfg_slave_agent:rdata_fifo_sink_ready -> matmul_afu_id_dma_afu_cfg_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                           // cmd_mux_004:src_valid -> matmul_afu_id_dma_afu_cfg_slave_agent:cp_valid
	wire  [178:0] cmd_mux_004_src_data;                                                            // cmd_mux_004:src_data -> matmul_afu_id_dma_afu_cfg_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                           // matmul_afu_id_dma_afu_cfg_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [8:0] cmd_mux_004_src_channel;                                                         // cmd_mux_004:src_channel -> matmul_afu_id_dma_afu_cfg_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                   // cmd_mux_004:src_startofpacket -> matmul_afu_id_dma_afu_cfg_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                     // cmd_mux_004:src_endofpacket -> matmul_afu_id_dma_afu_cfg_slave_agent:cp_endofpacket
	wire   [63:0] msgdma_bbb_csr_agent_m0_readdata;                                                // msgdma_bbb_csr_translator:uav_readdata -> msgdma_bbb_csr_agent:m0_readdata
	wire          msgdma_bbb_csr_agent_m0_waitrequest;                                             // msgdma_bbb_csr_translator:uav_waitrequest -> msgdma_bbb_csr_agent:m0_waitrequest
	wire          msgdma_bbb_csr_agent_m0_debugaccess;                                             // msgdma_bbb_csr_agent:m0_debugaccess -> msgdma_bbb_csr_translator:uav_debugaccess
	wire   [47:0] msgdma_bbb_csr_agent_m0_address;                                                 // msgdma_bbb_csr_agent:m0_address -> msgdma_bbb_csr_translator:uav_address
	wire    [7:0] msgdma_bbb_csr_agent_m0_byteenable;                                              // msgdma_bbb_csr_agent:m0_byteenable -> msgdma_bbb_csr_translator:uav_byteenable
	wire          msgdma_bbb_csr_agent_m0_read;                                                    // msgdma_bbb_csr_agent:m0_read -> msgdma_bbb_csr_translator:uav_read
	wire          msgdma_bbb_csr_agent_m0_readdatavalid;                                           // msgdma_bbb_csr_translator:uav_readdatavalid -> msgdma_bbb_csr_agent:m0_readdatavalid
	wire          msgdma_bbb_csr_agent_m0_lock;                                                    // msgdma_bbb_csr_agent:m0_lock -> msgdma_bbb_csr_translator:uav_lock
	wire   [63:0] msgdma_bbb_csr_agent_m0_writedata;                                               // msgdma_bbb_csr_agent:m0_writedata -> msgdma_bbb_csr_translator:uav_writedata
	wire          msgdma_bbb_csr_agent_m0_write;                                                   // msgdma_bbb_csr_agent:m0_write -> msgdma_bbb_csr_translator:uav_write
	wire    [3:0] msgdma_bbb_csr_agent_m0_burstcount;                                              // msgdma_bbb_csr_agent:m0_burstcount -> msgdma_bbb_csr_translator:uav_burstcount
	wire          msgdma_bbb_csr_agent_rf_source_valid;                                            // msgdma_bbb_csr_agent:rf_source_valid -> msgdma_bbb_csr_agent_rsp_fifo:in_valid
	wire  [179:0] msgdma_bbb_csr_agent_rf_source_data;                                             // msgdma_bbb_csr_agent:rf_source_data -> msgdma_bbb_csr_agent_rsp_fifo:in_data
	wire          msgdma_bbb_csr_agent_rf_source_ready;                                            // msgdma_bbb_csr_agent_rsp_fifo:in_ready -> msgdma_bbb_csr_agent:rf_source_ready
	wire          msgdma_bbb_csr_agent_rf_source_startofpacket;                                    // msgdma_bbb_csr_agent:rf_source_startofpacket -> msgdma_bbb_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_bbb_csr_agent_rf_source_endofpacket;                                      // msgdma_bbb_csr_agent:rf_source_endofpacket -> msgdma_bbb_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_bbb_csr_agent_rsp_fifo_out_valid;                                         // msgdma_bbb_csr_agent_rsp_fifo:out_valid -> msgdma_bbb_csr_agent:rf_sink_valid
	wire  [179:0] msgdma_bbb_csr_agent_rsp_fifo_out_data;                                          // msgdma_bbb_csr_agent_rsp_fifo:out_data -> msgdma_bbb_csr_agent:rf_sink_data
	wire          msgdma_bbb_csr_agent_rsp_fifo_out_ready;                                         // msgdma_bbb_csr_agent:rf_sink_ready -> msgdma_bbb_csr_agent_rsp_fifo:out_ready
	wire          msgdma_bbb_csr_agent_rsp_fifo_out_startofpacket;                                 // msgdma_bbb_csr_agent_rsp_fifo:out_startofpacket -> msgdma_bbb_csr_agent:rf_sink_startofpacket
	wire          msgdma_bbb_csr_agent_rsp_fifo_out_endofpacket;                                   // msgdma_bbb_csr_agent_rsp_fifo:out_endofpacket -> msgdma_bbb_csr_agent:rf_sink_endofpacket
	wire          msgdma_bbb_csr_agent_rdata_fifo_src_valid;                                       // msgdma_bbb_csr_agent:rdata_fifo_src_valid -> msgdma_bbb_csr_agent:rdata_fifo_sink_valid
	wire   [65:0] msgdma_bbb_csr_agent_rdata_fifo_src_data;                                        // msgdma_bbb_csr_agent:rdata_fifo_src_data -> msgdma_bbb_csr_agent:rdata_fifo_sink_data
	wire          msgdma_bbb_csr_agent_rdata_fifo_src_ready;                                       // msgdma_bbb_csr_agent:rdata_fifo_sink_ready -> msgdma_bbb_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                           // cmd_mux_005:src_valid -> msgdma_bbb_csr_agent:cp_valid
	wire  [178:0] cmd_mux_005_src_data;                                                            // cmd_mux_005:src_data -> msgdma_bbb_csr_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                           // msgdma_bbb_csr_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [8:0] cmd_mux_005_src_channel;                                                         // cmd_mux_005:src_channel -> msgdma_bbb_csr_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                   // cmd_mux_005:src_startofpacket -> msgdma_bbb_csr_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                     // cmd_mux_005:src_endofpacket -> msgdma_bbb_csr_agent:cp_endofpacket
	wire   [31:0] matmul_afu_start_matmul_s1_agent_m0_readdata;                                    // matmul_afu_start_matmul_s1_translator:uav_readdata -> matmul_afu_start_matmul_s1_agent:m0_readdata
	wire          matmul_afu_start_matmul_s1_agent_m0_waitrequest;                                 // matmul_afu_start_matmul_s1_translator:uav_waitrequest -> matmul_afu_start_matmul_s1_agent:m0_waitrequest
	wire          matmul_afu_start_matmul_s1_agent_m0_debugaccess;                                 // matmul_afu_start_matmul_s1_agent:m0_debugaccess -> matmul_afu_start_matmul_s1_translator:uav_debugaccess
	wire   [47:0] matmul_afu_start_matmul_s1_agent_m0_address;                                     // matmul_afu_start_matmul_s1_agent:m0_address -> matmul_afu_start_matmul_s1_translator:uav_address
	wire    [3:0] matmul_afu_start_matmul_s1_agent_m0_byteenable;                                  // matmul_afu_start_matmul_s1_agent:m0_byteenable -> matmul_afu_start_matmul_s1_translator:uav_byteenable
	wire          matmul_afu_start_matmul_s1_agent_m0_read;                                        // matmul_afu_start_matmul_s1_agent:m0_read -> matmul_afu_start_matmul_s1_translator:uav_read
	wire          matmul_afu_start_matmul_s1_agent_m0_readdatavalid;                               // matmul_afu_start_matmul_s1_translator:uav_readdatavalid -> matmul_afu_start_matmul_s1_agent:m0_readdatavalid
	wire          matmul_afu_start_matmul_s1_agent_m0_lock;                                        // matmul_afu_start_matmul_s1_agent:m0_lock -> matmul_afu_start_matmul_s1_translator:uav_lock
	wire   [31:0] matmul_afu_start_matmul_s1_agent_m0_writedata;                                   // matmul_afu_start_matmul_s1_agent:m0_writedata -> matmul_afu_start_matmul_s1_translator:uav_writedata
	wire          matmul_afu_start_matmul_s1_agent_m0_write;                                       // matmul_afu_start_matmul_s1_agent:m0_write -> matmul_afu_start_matmul_s1_translator:uav_write
	wire    [2:0] matmul_afu_start_matmul_s1_agent_m0_burstcount;                                  // matmul_afu_start_matmul_s1_agent:m0_burstcount -> matmul_afu_start_matmul_s1_translator:uav_burstcount
	wire          matmul_afu_start_matmul_s1_agent_rf_source_valid;                                // matmul_afu_start_matmul_s1_agent:rf_source_valid -> matmul_afu_start_matmul_s1_agent_rsp_fifo:in_valid
	wire  [143:0] matmul_afu_start_matmul_s1_agent_rf_source_data;                                 // matmul_afu_start_matmul_s1_agent:rf_source_data -> matmul_afu_start_matmul_s1_agent_rsp_fifo:in_data
	wire          matmul_afu_start_matmul_s1_agent_rf_source_ready;                                // matmul_afu_start_matmul_s1_agent_rsp_fifo:in_ready -> matmul_afu_start_matmul_s1_agent:rf_source_ready
	wire          matmul_afu_start_matmul_s1_agent_rf_source_startofpacket;                        // matmul_afu_start_matmul_s1_agent:rf_source_startofpacket -> matmul_afu_start_matmul_s1_agent_rsp_fifo:in_startofpacket
	wire          matmul_afu_start_matmul_s1_agent_rf_source_endofpacket;                          // matmul_afu_start_matmul_s1_agent:rf_source_endofpacket -> matmul_afu_start_matmul_s1_agent_rsp_fifo:in_endofpacket
	wire          matmul_afu_start_matmul_s1_agent_rsp_fifo_out_valid;                             // matmul_afu_start_matmul_s1_agent_rsp_fifo:out_valid -> matmul_afu_start_matmul_s1_agent:rf_sink_valid
	wire  [143:0] matmul_afu_start_matmul_s1_agent_rsp_fifo_out_data;                              // matmul_afu_start_matmul_s1_agent_rsp_fifo:out_data -> matmul_afu_start_matmul_s1_agent:rf_sink_data
	wire          matmul_afu_start_matmul_s1_agent_rsp_fifo_out_ready;                             // matmul_afu_start_matmul_s1_agent:rf_sink_ready -> matmul_afu_start_matmul_s1_agent_rsp_fifo:out_ready
	wire          matmul_afu_start_matmul_s1_agent_rsp_fifo_out_startofpacket;                     // matmul_afu_start_matmul_s1_agent_rsp_fifo:out_startofpacket -> matmul_afu_start_matmul_s1_agent:rf_sink_startofpacket
	wire          matmul_afu_start_matmul_s1_agent_rsp_fifo_out_endofpacket;                       // matmul_afu_start_matmul_s1_agent_rsp_fifo:out_endofpacket -> matmul_afu_start_matmul_s1_agent:rf_sink_endofpacket
	wire          matmul_afu_start_matmul_s1_agent_rdata_fifo_src_valid;                           // matmul_afu_start_matmul_s1_agent:rdata_fifo_src_valid -> matmul_afu_start_matmul_s1_agent_rdata_fifo:in_valid
	wire   [33:0] matmul_afu_start_matmul_s1_agent_rdata_fifo_src_data;                            // matmul_afu_start_matmul_s1_agent:rdata_fifo_src_data -> matmul_afu_start_matmul_s1_agent_rdata_fifo:in_data
	wire          matmul_afu_start_matmul_s1_agent_rdata_fifo_src_ready;                           // matmul_afu_start_matmul_s1_agent_rdata_fifo:in_ready -> matmul_afu_start_matmul_s1_agent:rdata_fifo_src_ready
	wire          matmul_afu_start_matmul_s1_agent_rdata_fifo_out_valid;                           // matmul_afu_start_matmul_s1_agent_rdata_fifo:out_valid -> matmul_afu_start_matmul_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] matmul_afu_start_matmul_s1_agent_rdata_fifo_out_data;                            // matmul_afu_start_matmul_s1_agent_rdata_fifo:out_data -> matmul_afu_start_matmul_s1_agent:rdata_fifo_sink_data
	wire          matmul_afu_start_matmul_s1_agent_rdata_fifo_out_ready;                           // matmul_afu_start_matmul_s1_agent:rdata_fifo_sink_ready -> matmul_afu_start_matmul_s1_agent_rdata_fifo:out_ready
	wire   [31:0] matmul_afu_matmul_ready_s1_agent_m0_readdata;                                    // matmul_afu_matmul_ready_s1_translator:uav_readdata -> matmul_afu_matmul_ready_s1_agent:m0_readdata
	wire          matmul_afu_matmul_ready_s1_agent_m0_waitrequest;                                 // matmul_afu_matmul_ready_s1_translator:uav_waitrequest -> matmul_afu_matmul_ready_s1_agent:m0_waitrequest
	wire          matmul_afu_matmul_ready_s1_agent_m0_debugaccess;                                 // matmul_afu_matmul_ready_s1_agent:m0_debugaccess -> matmul_afu_matmul_ready_s1_translator:uav_debugaccess
	wire   [47:0] matmul_afu_matmul_ready_s1_agent_m0_address;                                     // matmul_afu_matmul_ready_s1_agent:m0_address -> matmul_afu_matmul_ready_s1_translator:uav_address
	wire    [3:0] matmul_afu_matmul_ready_s1_agent_m0_byteenable;                                  // matmul_afu_matmul_ready_s1_agent:m0_byteenable -> matmul_afu_matmul_ready_s1_translator:uav_byteenable
	wire          matmul_afu_matmul_ready_s1_agent_m0_read;                                        // matmul_afu_matmul_ready_s1_agent:m0_read -> matmul_afu_matmul_ready_s1_translator:uav_read
	wire          matmul_afu_matmul_ready_s1_agent_m0_readdatavalid;                               // matmul_afu_matmul_ready_s1_translator:uav_readdatavalid -> matmul_afu_matmul_ready_s1_agent:m0_readdatavalid
	wire          matmul_afu_matmul_ready_s1_agent_m0_lock;                                        // matmul_afu_matmul_ready_s1_agent:m0_lock -> matmul_afu_matmul_ready_s1_translator:uav_lock
	wire   [31:0] matmul_afu_matmul_ready_s1_agent_m0_writedata;                                   // matmul_afu_matmul_ready_s1_agent:m0_writedata -> matmul_afu_matmul_ready_s1_translator:uav_writedata
	wire          matmul_afu_matmul_ready_s1_agent_m0_write;                                       // matmul_afu_matmul_ready_s1_agent:m0_write -> matmul_afu_matmul_ready_s1_translator:uav_write
	wire    [2:0] matmul_afu_matmul_ready_s1_agent_m0_burstcount;                                  // matmul_afu_matmul_ready_s1_agent:m0_burstcount -> matmul_afu_matmul_ready_s1_translator:uav_burstcount
	wire          matmul_afu_matmul_ready_s1_agent_rf_source_valid;                                // matmul_afu_matmul_ready_s1_agent:rf_source_valid -> matmul_afu_matmul_ready_s1_agent_rsp_fifo:in_valid
	wire  [143:0] matmul_afu_matmul_ready_s1_agent_rf_source_data;                                 // matmul_afu_matmul_ready_s1_agent:rf_source_data -> matmul_afu_matmul_ready_s1_agent_rsp_fifo:in_data
	wire          matmul_afu_matmul_ready_s1_agent_rf_source_ready;                                // matmul_afu_matmul_ready_s1_agent_rsp_fifo:in_ready -> matmul_afu_matmul_ready_s1_agent:rf_source_ready
	wire          matmul_afu_matmul_ready_s1_agent_rf_source_startofpacket;                        // matmul_afu_matmul_ready_s1_agent:rf_source_startofpacket -> matmul_afu_matmul_ready_s1_agent_rsp_fifo:in_startofpacket
	wire          matmul_afu_matmul_ready_s1_agent_rf_source_endofpacket;                          // matmul_afu_matmul_ready_s1_agent:rf_source_endofpacket -> matmul_afu_matmul_ready_s1_agent_rsp_fifo:in_endofpacket
	wire          matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_valid;                             // matmul_afu_matmul_ready_s1_agent_rsp_fifo:out_valid -> matmul_afu_matmul_ready_s1_agent:rf_sink_valid
	wire  [143:0] matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_data;                              // matmul_afu_matmul_ready_s1_agent_rsp_fifo:out_data -> matmul_afu_matmul_ready_s1_agent:rf_sink_data
	wire          matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_ready;                             // matmul_afu_matmul_ready_s1_agent:rf_sink_ready -> matmul_afu_matmul_ready_s1_agent_rsp_fifo:out_ready
	wire          matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_startofpacket;                     // matmul_afu_matmul_ready_s1_agent_rsp_fifo:out_startofpacket -> matmul_afu_matmul_ready_s1_agent:rf_sink_startofpacket
	wire          matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_endofpacket;                       // matmul_afu_matmul_ready_s1_agent_rsp_fifo:out_endofpacket -> matmul_afu_matmul_ready_s1_agent:rf_sink_endofpacket
	wire          matmul_afu_matmul_ready_s1_agent_rdata_fifo_src_valid;                           // matmul_afu_matmul_ready_s1_agent:rdata_fifo_src_valid -> matmul_afu_matmul_ready_s1_agent_rdata_fifo:in_valid
	wire   [33:0] matmul_afu_matmul_ready_s1_agent_rdata_fifo_src_data;                            // matmul_afu_matmul_ready_s1_agent:rdata_fifo_src_data -> matmul_afu_matmul_ready_s1_agent_rdata_fifo:in_data
	wire          matmul_afu_matmul_ready_s1_agent_rdata_fifo_src_ready;                           // matmul_afu_matmul_ready_s1_agent_rdata_fifo:in_ready -> matmul_afu_matmul_ready_s1_agent:rdata_fifo_src_ready
	wire          matmul_afu_matmul_ready_s1_agent_rdata_fifo_out_valid;                           // matmul_afu_matmul_ready_s1_agent_rdata_fifo:out_valid -> matmul_afu_matmul_ready_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] matmul_afu_matmul_ready_s1_agent_rdata_fifo_out_data;                            // matmul_afu_matmul_ready_s1_agent_rdata_fifo:out_data -> matmul_afu_matmul_ready_s1_agent:rdata_fifo_sink_data
	wire          matmul_afu_matmul_ready_s1_agent_rdata_fifo_out_ready;                           // matmul_afu_matmul_ready_s1_agent:rdata_fifo_sink_ready -> matmul_afu_matmul_ready_s1_agent_rdata_fifo:out_ready
	wire   [63:0] matmul_afu_pgm_ram_s1_agent_m0_readdata;                                         // matmul_afu_pgm_ram_s1_translator:uav_readdata -> matmul_afu_pgm_ram_s1_agent:m0_readdata
	wire          matmul_afu_pgm_ram_s1_agent_m0_waitrequest;                                      // matmul_afu_pgm_ram_s1_translator:uav_waitrequest -> matmul_afu_pgm_ram_s1_agent:m0_waitrequest
	wire          matmul_afu_pgm_ram_s1_agent_m0_debugaccess;                                      // matmul_afu_pgm_ram_s1_agent:m0_debugaccess -> matmul_afu_pgm_ram_s1_translator:uav_debugaccess
	wire   [47:0] matmul_afu_pgm_ram_s1_agent_m0_address;                                          // matmul_afu_pgm_ram_s1_agent:m0_address -> matmul_afu_pgm_ram_s1_translator:uav_address
	wire    [7:0] matmul_afu_pgm_ram_s1_agent_m0_byteenable;                                       // matmul_afu_pgm_ram_s1_agent:m0_byteenable -> matmul_afu_pgm_ram_s1_translator:uav_byteenable
	wire          matmul_afu_pgm_ram_s1_agent_m0_read;                                             // matmul_afu_pgm_ram_s1_agent:m0_read -> matmul_afu_pgm_ram_s1_translator:uav_read
	wire          matmul_afu_pgm_ram_s1_agent_m0_readdatavalid;                                    // matmul_afu_pgm_ram_s1_translator:uav_readdatavalid -> matmul_afu_pgm_ram_s1_agent:m0_readdatavalid
	wire          matmul_afu_pgm_ram_s1_agent_m0_lock;                                             // matmul_afu_pgm_ram_s1_agent:m0_lock -> matmul_afu_pgm_ram_s1_translator:uav_lock
	wire   [63:0] matmul_afu_pgm_ram_s1_agent_m0_writedata;                                        // matmul_afu_pgm_ram_s1_agent:m0_writedata -> matmul_afu_pgm_ram_s1_translator:uav_writedata
	wire          matmul_afu_pgm_ram_s1_agent_m0_write;                                            // matmul_afu_pgm_ram_s1_agent:m0_write -> matmul_afu_pgm_ram_s1_translator:uav_write
	wire    [3:0] matmul_afu_pgm_ram_s1_agent_m0_burstcount;                                       // matmul_afu_pgm_ram_s1_agent:m0_burstcount -> matmul_afu_pgm_ram_s1_translator:uav_burstcount
	wire          matmul_afu_pgm_ram_s1_agent_rf_source_valid;                                     // matmul_afu_pgm_ram_s1_agent:rf_source_valid -> matmul_afu_pgm_ram_s1_agent_rsp_fifo:in_valid
	wire  [179:0] matmul_afu_pgm_ram_s1_agent_rf_source_data;                                      // matmul_afu_pgm_ram_s1_agent:rf_source_data -> matmul_afu_pgm_ram_s1_agent_rsp_fifo:in_data
	wire          matmul_afu_pgm_ram_s1_agent_rf_source_ready;                                     // matmul_afu_pgm_ram_s1_agent_rsp_fifo:in_ready -> matmul_afu_pgm_ram_s1_agent:rf_source_ready
	wire          matmul_afu_pgm_ram_s1_agent_rf_source_startofpacket;                             // matmul_afu_pgm_ram_s1_agent:rf_source_startofpacket -> matmul_afu_pgm_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          matmul_afu_pgm_ram_s1_agent_rf_source_endofpacket;                               // matmul_afu_pgm_ram_s1_agent:rf_source_endofpacket -> matmul_afu_pgm_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_valid;                                  // matmul_afu_pgm_ram_s1_agent_rsp_fifo:out_valid -> matmul_afu_pgm_ram_s1_agent:rf_sink_valid
	wire  [179:0] matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_data;                                   // matmul_afu_pgm_ram_s1_agent_rsp_fifo:out_data -> matmul_afu_pgm_ram_s1_agent:rf_sink_data
	wire          matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_ready;                                  // matmul_afu_pgm_ram_s1_agent:rf_sink_ready -> matmul_afu_pgm_ram_s1_agent_rsp_fifo:out_ready
	wire          matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_startofpacket;                          // matmul_afu_pgm_ram_s1_agent_rsp_fifo:out_startofpacket -> matmul_afu_pgm_ram_s1_agent:rf_sink_startofpacket
	wire          matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_endofpacket;                            // matmul_afu_pgm_ram_s1_agent_rsp_fifo:out_endofpacket -> matmul_afu_pgm_ram_s1_agent:rf_sink_endofpacket
	wire          matmul_afu_pgm_ram_s1_agent_rdata_fifo_src_valid;                                // matmul_afu_pgm_ram_s1_agent:rdata_fifo_src_valid -> matmul_afu_pgm_ram_s1_agent_rdata_fifo:in_valid
	wire   [65:0] matmul_afu_pgm_ram_s1_agent_rdata_fifo_src_data;                                 // matmul_afu_pgm_ram_s1_agent:rdata_fifo_src_data -> matmul_afu_pgm_ram_s1_agent_rdata_fifo:in_data
	wire          matmul_afu_pgm_ram_s1_agent_rdata_fifo_src_ready;                                // matmul_afu_pgm_ram_s1_agent_rdata_fifo:in_ready -> matmul_afu_pgm_ram_s1_agent:rdata_fifo_src_ready
	wire          matmul_afu_pgm_ram_s1_agent_rdata_fifo_out_valid;                                // matmul_afu_pgm_ram_s1_agent_rdata_fifo:out_valid -> matmul_afu_pgm_ram_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] matmul_afu_pgm_ram_s1_agent_rdata_fifo_out_data;                                 // matmul_afu_pgm_ram_s1_agent_rdata_fifo:out_data -> matmul_afu_pgm_ram_s1_agent:rdata_fifo_sink_data
	wire          matmul_afu_pgm_ram_s1_agent_rdata_fifo_out_ready;                                // matmul_afu_pgm_ram_s1_agent:rdata_fifo_sink_ready -> matmul_afu_pgm_ram_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_008_src_valid;                                                           // cmd_mux_008:src_valid -> matmul_afu_pgm_ram_s1_agent:cp_valid
	wire  [178:0] cmd_mux_008_src_data;                                                            // cmd_mux_008:src_data -> matmul_afu_pgm_ram_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                           // matmul_afu_pgm_ram_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire    [8:0] cmd_mux_008_src_channel;                                                         // cmd_mux_008:src_channel -> matmul_afu_pgm_ram_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                   // cmd_mux_008:src_startofpacket -> matmul_afu_pgm_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                     // cmd_mux_008:src_endofpacket -> matmul_afu_pgm_ram_s1_agent:cp_endofpacket
	wire          matmul_afu_csr_bridge_master_agent_cp_valid;                                     // matmul_afu_csr_bridge_master_agent:cp_valid -> router:sink_valid
	wire  [178:0] matmul_afu_csr_bridge_master_agent_cp_data;                                      // matmul_afu_csr_bridge_master_agent:cp_data -> router:sink_data
	wire          matmul_afu_csr_bridge_master_agent_cp_ready;                                     // router:sink_ready -> matmul_afu_csr_bridge_master_agent:cp_ready
	wire          matmul_afu_csr_bridge_master_agent_cp_startofpacket;                             // matmul_afu_csr_bridge_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          matmul_afu_csr_bridge_master_agent_cp_endofpacket;                               // matmul_afu_csr_bridge_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          domain_0_default_slave_axi_error_if_agent_write_rp_valid;                        // domain_0_default_slave_axi_error_if_agent:write_rp_valid -> router_001:sink_valid
	wire  [178:0] domain_0_default_slave_axi_error_if_agent_write_rp_data;                         // domain_0_default_slave_axi_error_if_agent:write_rp_data -> router_001:sink_data
	wire          domain_0_default_slave_axi_error_if_agent_write_rp_ready;                        // router_001:sink_ready -> domain_0_default_slave_axi_error_if_agent:write_rp_ready
	wire          domain_0_default_slave_axi_error_if_agent_write_rp_startofpacket;                // domain_0_default_slave_axi_error_if_agent:write_rp_startofpacket -> router_001:sink_startofpacket
	wire          domain_0_default_slave_axi_error_if_agent_write_rp_endofpacket;                  // domain_0_default_slave_axi_error_if_agent:write_rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                            // router_001:src_valid -> rsp_demux:sink_valid
	wire  [178:0] router_001_src_data;                                                             // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                            // rsp_demux:sink_ready -> router_001:src_ready
	wire    [8:0] router_001_src_channel;                                                          // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                    // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                      // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          domain_0_default_slave_axi_error_if_agent_read_rp_valid;                         // domain_0_default_slave_axi_error_if_agent:read_rp_valid -> router_002:sink_valid
	wire  [178:0] domain_0_default_slave_axi_error_if_agent_read_rp_data;                          // domain_0_default_slave_axi_error_if_agent:read_rp_data -> router_002:sink_data
	wire          domain_0_default_slave_axi_error_if_agent_read_rp_ready;                         // router_002:sink_ready -> domain_0_default_slave_axi_error_if_agent:read_rp_ready
	wire          domain_0_default_slave_axi_error_if_agent_read_rp_startofpacket;                 // domain_0_default_slave_axi_error_if_agent:read_rp_startofpacket -> router_002:sink_startofpacket
	wire          domain_0_default_slave_axi_error_if_agent_read_rp_endofpacket;                   // domain_0_default_slave_axi_error_if_agent:read_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                            // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [178:0] router_002_src_data;                                                             // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                            // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [8:0] router_002_src_channel;                                                          // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                                    // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                      // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rp_valid;                                  // matmul_afu_id_afu_afu_cfg_slave_agent:rp_valid -> router_003:sink_valid
	wire  [178:0] matmul_afu_id_afu_afu_cfg_slave_agent_rp_data;                                   // matmul_afu_id_afu_afu_cfg_slave_agent:rp_data -> router_003:sink_data
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rp_ready;                                  // router_003:sink_ready -> matmul_afu_id_afu_afu_cfg_slave_agent:rp_ready
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rp_startofpacket;                          // matmul_afu_id_afu_afu_cfg_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          matmul_afu_id_afu_afu_cfg_slave_agent_rp_endofpacket;                            // matmul_afu_id_afu_afu_cfg_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                            // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [178:0] router_003_src_data;                                                             // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                            // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [8:0] router_003_src_channel;                                                          // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                                    // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                      // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rp_valid;                               // matmul_afu_id_matmul_afu_cfg_slave_agent:rp_valid -> router_004:sink_valid
	wire  [178:0] matmul_afu_id_matmul_afu_cfg_slave_agent_rp_data;                                // matmul_afu_id_matmul_afu_cfg_slave_agent:rp_data -> router_004:sink_data
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rp_ready;                               // router_004:sink_ready -> matmul_afu_id_matmul_afu_cfg_slave_agent:rp_ready
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rp_startofpacket;                       // matmul_afu_id_matmul_afu_cfg_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          matmul_afu_id_matmul_afu_cfg_slave_agent_rp_endofpacket;                         // matmul_afu_id_matmul_afu_cfg_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                            // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [178:0] router_004_src_data;                                                             // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                                            // rsp_demux_003:sink_ready -> router_004:src_ready
	wire    [8:0] router_004_src_channel;                                                          // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                                    // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                                      // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rp_valid;                                  // matmul_afu_id_dma_afu_cfg_slave_agent:rp_valid -> router_005:sink_valid
	wire  [178:0] matmul_afu_id_dma_afu_cfg_slave_agent_rp_data;                                   // matmul_afu_id_dma_afu_cfg_slave_agent:rp_data -> router_005:sink_data
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rp_ready;                                  // router_005:sink_ready -> matmul_afu_id_dma_afu_cfg_slave_agent:rp_ready
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rp_startofpacket;                          // matmul_afu_id_dma_afu_cfg_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          matmul_afu_id_dma_afu_cfg_slave_agent_rp_endofpacket;                            // matmul_afu_id_dma_afu_cfg_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                            // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [178:0] router_005_src_data;                                                             // router_005:src_data -> rsp_demux_004:sink_data
	wire          router_005_src_ready;                                                            // rsp_demux_004:sink_ready -> router_005:src_ready
	wire    [8:0] router_005_src_channel;                                                          // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_startofpacket;                                                    // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_005_src_endofpacket;                                                      // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          msgdma_bbb_csr_agent_rp_valid;                                                   // msgdma_bbb_csr_agent:rp_valid -> router_006:sink_valid
	wire  [178:0] msgdma_bbb_csr_agent_rp_data;                                                    // msgdma_bbb_csr_agent:rp_data -> router_006:sink_data
	wire          msgdma_bbb_csr_agent_rp_ready;                                                   // router_006:sink_ready -> msgdma_bbb_csr_agent:rp_ready
	wire          msgdma_bbb_csr_agent_rp_startofpacket;                                           // msgdma_bbb_csr_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          msgdma_bbb_csr_agent_rp_endofpacket;                                             // msgdma_bbb_csr_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                            // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [178:0] router_006_src_data;                                                             // router_006:src_data -> rsp_demux_005:sink_data
	wire          router_006_src_ready;                                                            // rsp_demux_005:sink_ready -> router_006:src_ready
	wire    [8:0] router_006_src_channel;                                                          // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_startofpacket;                                                    // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_006_src_endofpacket;                                                      // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          matmul_afu_start_matmul_s1_agent_rp_valid;                                       // matmul_afu_start_matmul_s1_agent:rp_valid -> router_007:sink_valid
	wire  [142:0] matmul_afu_start_matmul_s1_agent_rp_data;                                        // matmul_afu_start_matmul_s1_agent:rp_data -> router_007:sink_data
	wire          matmul_afu_start_matmul_s1_agent_rp_ready;                                       // router_007:sink_ready -> matmul_afu_start_matmul_s1_agent:rp_ready
	wire          matmul_afu_start_matmul_s1_agent_rp_startofpacket;                               // matmul_afu_start_matmul_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          matmul_afu_start_matmul_s1_agent_rp_endofpacket;                                 // matmul_afu_start_matmul_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          matmul_afu_matmul_ready_s1_agent_rp_valid;                                       // matmul_afu_matmul_ready_s1_agent:rp_valid -> router_008:sink_valid
	wire  [142:0] matmul_afu_matmul_ready_s1_agent_rp_data;                                        // matmul_afu_matmul_ready_s1_agent:rp_data -> router_008:sink_data
	wire          matmul_afu_matmul_ready_s1_agent_rp_ready;                                       // router_008:sink_ready -> matmul_afu_matmul_ready_s1_agent:rp_ready
	wire          matmul_afu_matmul_ready_s1_agent_rp_startofpacket;                               // matmul_afu_matmul_ready_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          matmul_afu_matmul_ready_s1_agent_rp_endofpacket;                                 // matmul_afu_matmul_ready_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          matmul_afu_pgm_ram_s1_agent_rp_valid;                                            // matmul_afu_pgm_ram_s1_agent:rp_valid -> router_009:sink_valid
	wire  [178:0] matmul_afu_pgm_ram_s1_agent_rp_data;                                             // matmul_afu_pgm_ram_s1_agent:rp_data -> router_009:sink_data
	wire          matmul_afu_pgm_ram_s1_agent_rp_ready;                                            // router_009:sink_ready -> matmul_afu_pgm_ram_s1_agent:rp_ready
	wire          matmul_afu_pgm_ram_s1_agent_rp_startofpacket;                                    // matmul_afu_pgm_ram_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          matmul_afu_pgm_ram_s1_agent_rp_endofpacket;                                      // matmul_afu_pgm_ram_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                            // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [178:0] router_009_src_data;                                                             // router_009:src_data -> rsp_demux_008:sink_data
	wire          router_009_src_ready;                                                            // rsp_demux_008:sink_ready -> router_009:src_ready
	wire    [8:0] router_009_src_channel;                                                          // router_009:src_channel -> rsp_demux_008:sink_channel
	wire          router_009_src_startofpacket;                                                    // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_009_src_endofpacket;                                                      // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_src_valid;                                                                // router:src_valid -> matmul_afu_csr_bridge_master_limiter:cmd_sink_valid
	wire  [178:0] router_src_data;                                                                 // router:src_data -> matmul_afu_csr_bridge_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                // matmul_afu_csr_bridge_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [8:0] router_src_channel;                                                              // router:src_channel -> matmul_afu_csr_bridge_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                        // router:src_startofpacket -> matmul_afu_csr_bridge_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                          // router:src_endofpacket -> matmul_afu_csr_bridge_master_limiter:cmd_sink_endofpacket
	wire          matmul_afu_csr_bridge_master_limiter_rsp_src_valid;                              // matmul_afu_csr_bridge_master_limiter:rsp_src_valid -> matmul_afu_csr_bridge_master_agent:rp_valid
	wire  [178:0] matmul_afu_csr_bridge_master_limiter_rsp_src_data;                               // matmul_afu_csr_bridge_master_limiter:rsp_src_data -> matmul_afu_csr_bridge_master_agent:rp_data
	wire          matmul_afu_csr_bridge_master_limiter_rsp_src_ready;                              // matmul_afu_csr_bridge_master_agent:rp_ready -> matmul_afu_csr_bridge_master_limiter:rsp_src_ready
	wire    [8:0] matmul_afu_csr_bridge_master_limiter_rsp_src_channel;                            // matmul_afu_csr_bridge_master_limiter:rsp_src_channel -> matmul_afu_csr_bridge_master_agent:rp_channel
	wire          matmul_afu_csr_bridge_master_limiter_rsp_src_startofpacket;                      // matmul_afu_csr_bridge_master_limiter:rsp_src_startofpacket -> matmul_afu_csr_bridge_master_agent:rp_startofpacket
	wire          matmul_afu_csr_bridge_master_limiter_rsp_src_endofpacket;                        // matmul_afu_csr_bridge_master_limiter:rsp_src_endofpacket -> matmul_afu_csr_bridge_master_agent:rp_endofpacket
	wire          matmul_afu_start_matmul_s1_burst_adapter_source0_valid;                          // matmul_afu_start_matmul_s1_burst_adapter:source0_valid -> matmul_afu_start_matmul_s1_agent:cp_valid
	wire  [142:0] matmul_afu_start_matmul_s1_burst_adapter_source0_data;                           // matmul_afu_start_matmul_s1_burst_adapter:source0_data -> matmul_afu_start_matmul_s1_agent:cp_data
	wire          matmul_afu_start_matmul_s1_burst_adapter_source0_ready;                          // matmul_afu_start_matmul_s1_agent:cp_ready -> matmul_afu_start_matmul_s1_burst_adapter:source0_ready
	wire    [8:0] matmul_afu_start_matmul_s1_burst_adapter_source0_channel;                        // matmul_afu_start_matmul_s1_burst_adapter:source0_channel -> matmul_afu_start_matmul_s1_agent:cp_channel
	wire          matmul_afu_start_matmul_s1_burst_adapter_source0_startofpacket;                  // matmul_afu_start_matmul_s1_burst_adapter:source0_startofpacket -> matmul_afu_start_matmul_s1_agent:cp_startofpacket
	wire          matmul_afu_start_matmul_s1_burst_adapter_source0_endofpacket;                    // matmul_afu_start_matmul_s1_burst_adapter:source0_endofpacket -> matmul_afu_start_matmul_s1_agent:cp_endofpacket
	wire          matmul_afu_matmul_ready_s1_burst_adapter_source0_valid;                          // matmul_afu_matmul_ready_s1_burst_adapter:source0_valid -> matmul_afu_matmul_ready_s1_agent:cp_valid
	wire  [142:0] matmul_afu_matmul_ready_s1_burst_adapter_source0_data;                           // matmul_afu_matmul_ready_s1_burst_adapter:source0_data -> matmul_afu_matmul_ready_s1_agent:cp_data
	wire          matmul_afu_matmul_ready_s1_burst_adapter_source0_ready;                          // matmul_afu_matmul_ready_s1_agent:cp_ready -> matmul_afu_matmul_ready_s1_burst_adapter:source0_ready
	wire    [8:0] matmul_afu_matmul_ready_s1_burst_adapter_source0_channel;                        // matmul_afu_matmul_ready_s1_burst_adapter:source0_channel -> matmul_afu_matmul_ready_s1_agent:cp_channel
	wire          matmul_afu_matmul_ready_s1_burst_adapter_source0_startofpacket;                  // matmul_afu_matmul_ready_s1_burst_adapter:source0_startofpacket -> matmul_afu_matmul_ready_s1_agent:cp_startofpacket
	wire          matmul_afu_matmul_ready_s1_burst_adapter_source0_endofpacket;                    // matmul_afu_matmul_ready_s1_burst_adapter:source0_endofpacket -> matmul_afu_matmul_ready_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [178:0] cmd_demux_src0_data;                                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [8:0] cmd_demux_src0_channel;                                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                            // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [178:0] cmd_demux_src1_data;                                                             // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                            // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [8:0] cmd_demux_src1_channel;                                                          // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                    // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                      // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                            // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [178:0] cmd_demux_src2_data;                                                             // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                            // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [8:0] cmd_demux_src2_channel;                                                          // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                    // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                      // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                            // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [178:0] cmd_demux_src3_data;                                                             // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                            // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [8:0] cmd_demux_src3_channel;                                                          // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                    // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                      // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                            // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [178:0] cmd_demux_src4_data;                                                             // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                            // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [8:0] cmd_demux_src4_channel;                                                          // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                    // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                      // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                            // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [178:0] cmd_demux_src5_data;                                                             // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                            // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [8:0] cmd_demux_src5_channel;                                                          // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                    // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                      // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [178:0] rsp_demux_src0_data;                                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [8:0] rsp_demux_src0_channel;                                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                        // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [178:0] rsp_demux_001_src0_data;                                                         // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                        // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [8:0] rsp_demux_001_src0_channel;                                                      // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                  // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                        // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [178:0] rsp_demux_002_src0_data;                                                         // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                        // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [8:0] rsp_demux_002_src0_channel;                                                      // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                  // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                        // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [178:0] rsp_demux_003_src0_data;                                                         // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                        // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [8:0] rsp_demux_003_src0_channel;                                                      // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                  // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                        // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [178:0] rsp_demux_004_src0_data;                                                         // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                        // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [8:0] rsp_demux_004_src0_channel;                                                      // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                  // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                        // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [178:0] rsp_demux_005_src0_data;                                                         // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                        // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [8:0] rsp_demux_005_src0_channel;                                                      // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                  // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          router_007_src_valid;                                                            // router_007:src_valid -> matmul_afu_start_matmul_s1_rsp_width_adapter:in_valid
	wire  [142:0] router_007_src_data;                                                             // router_007:src_data -> matmul_afu_start_matmul_s1_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                                            // matmul_afu_start_matmul_s1_rsp_width_adapter:in_ready -> router_007:src_ready
	wire    [8:0] router_007_src_channel;                                                          // router_007:src_channel -> matmul_afu_start_matmul_s1_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                                    // router_007:src_startofpacket -> matmul_afu_start_matmul_s1_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                                      // router_007:src_endofpacket -> matmul_afu_start_matmul_s1_rsp_width_adapter:in_endofpacket
	wire          matmul_afu_start_matmul_s1_rsp_width_adapter_src_valid;                          // matmul_afu_start_matmul_s1_rsp_width_adapter:out_valid -> rsp_demux_006:sink_valid
	wire  [178:0] matmul_afu_start_matmul_s1_rsp_width_adapter_src_data;                           // matmul_afu_start_matmul_s1_rsp_width_adapter:out_data -> rsp_demux_006:sink_data
	wire          matmul_afu_start_matmul_s1_rsp_width_adapter_src_ready;                          // rsp_demux_006:sink_ready -> matmul_afu_start_matmul_s1_rsp_width_adapter:out_ready
	wire    [8:0] matmul_afu_start_matmul_s1_rsp_width_adapter_src_channel;                        // matmul_afu_start_matmul_s1_rsp_width_adapter:out_channel -> rsp_demux_006:sink_channel
	wire          matmul_afu_start_matmul_s1_rsp_width_adapter_src_startofpacket;                  // matmul_afu_start_matmul_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          matmul_afu_start_matmul_s1_rsp_width_adapter_src_endofpacket;                    // matmul_afu_start_matmul_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_008_src_valid;                                                            // router_008:src_valid -> matmul_afu_matmul_ready_s1_rsp_width_adapter:in_valid
	wire  [142:0] router_008_src_data;                                                             // router_008:src_data -> matmul_afu_matmul_ready_s1_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                                            // matmul_afu_matmul_ready_s1_rsp_width_adapter:in_ready -> router_008:src_ready
	wire    [8:0] router_008_src_channel;                                                          // router_008:src_channel -> matmul_afu_matmul_ready_s1_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                                                    // router_008:src_startofpacket -> matmul_afu_matmul_ready_s1_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                                      // router_008:src_endofpacket -> matmul_afu_matmul_ready_s1_rsp_width_adapter:in_endofpacket
	wire          matmul_afu_matmul_ready_s1_rsp_width_adapter_src_valid;                          // matmul_afu_matmul_ready_s1_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [178:0] matmul_afu_matmul_ready_s1_rsp_width_adapter_src_data;                           // matmul_afu_matmul_ready_s1_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire          matmul_afu_matmul_ready_s1_rsp_width_adapter_src_ready;                          // rsp_demux_007:sink_ready -> matmul_afu_matmul_ready_s1_rsp_width_adapter:out_ready
	wire    [8:0] matmul_afu_matmul_ready_s1_rsp_width_adapter_src_channel;                        // matmul_afu_matmul_ready_s1_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire          matmul_afu_matmul_ready_s1_rsp_width_adapter_src_startofpacket;                  // matmul_afu_matmul_ready_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          matmul_afu_matmul_ready_s1_rsp_width_adapter_src_endofpacket;                    // matmul_afu_matmul_ready_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                           // cmd_mux_006:src_valid -> matmul_afu_start_matmul_s1_cmd_width_adapter:in_valid
	wire  [178:0] cmd_mux_006_src_data;                                                            // cmd_mux_006:src_data -> matmul_afu_start_matmul_s1_cmd_width_adapter:in_data
	wire          cmd_mux_006_src_ready;                                                           // matmul_afu_start_matmul_s1_cmd_width_adapter:in_ready -> cmd_mux_006:src_ready
	wire    [8:0] cmd_mux_006_src_channel;                                                         // cmd_mux_006:src_channel -> matmul_afu_start_matmul_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_006_src_startofpacket;                                                   // cmd_mux_006:src_startofpacket -> matmul_afu_start_matmul_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                     // cmd_mux_006:src_endofpacket -> matmul_afu_start_matmul_s1_cmd_width_adapter:in_endofpacket
	wire          matmul_afu_start_matmul_s1_cmd_width_adapter_src_valid;                          // matmul_afu_start_matmul_s1_cmd_width_adapter:out_valid -> matmul_afu_start_matmul_s1_burst_adapter:sink0_valid
	wire  [142:0] matmul_afu_start_matmul_s1_cmd_width_adapter_src_data;                           // matmul_afu_start_matmul_s1_cmd_width_adapter:out_data -> matmul_afu_start_matmul_s1_burst_adapter:sink0_data
	wire          matmul_afu_start_matmul_s1_cmd_width_adapter_src_ready;                          // matmul_afu_start_matmul_s1_burst_adapter:sink0_ready -> matmul_afu_start_matmul_s1_cmd_width_adapter:out_ready
	wire    [8:0] matmul_afu_start_matmul_s1_cmd_width_adapter_src_channel;                        // matmul_afu_start_matmul_s1_cmd_width_adapter:out_channel -> matmul_afu_start_matmul_s1_burst_adapter:sink0_channel
	wire          matmul_afu_start_matmul_s1_cmd_width_adapter_src_startofpacket;                  // matmul_afu_start_matmul_s1_cmd_width_adapter:out_startofpacket -> matmul_afu_start_matmul_s1_burst_adapter:sink0_startofpacket
	wire          matmul_afu_start_matmul_s1_cmd_width_adapter_src_endofpacket;                    // matmul_afu_start_matmul_s1_cmd_width_adapter:out_endofpacket -> matmul_afu_start_matmul_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                                           // cmd_mux_007:src_valid -> matmul_afu_matmul_ready_s1_cmd_width_adapter:in_valid
	wire  [178:0] cmd_mux_007_src_data;                                                            // cmd_mux_007:src_data -> matmul_afu_matmul_ready_s1_cmd_width_adapter:in_data
	wire          cmd_mux_007_src_ready;                                                           // matmul_afu_matmul_ready_s1_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire    [8:0] cmd_mux_007_src_channel;                                                         // cmd_mux_007:src_channel -> matmul_afu_matmul_ready_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_007_src_startofpacket;                                                   // cmd_mux_007:src_startofpacket -> matmul_afu_matmul_ready_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                     // cmd_mux_007:src_endofpacket -> matmul_afu_matmul_ready_s1_cmd_width_adapter:in_endofpacket
	wire          matmul_afu_matmul_ready_s1_cmd_width_adapter_src_valid;                          // matmul_afu_matmul_ready_s1_cmd_width_adapter:out_valid -> matmul_afu_matmul_ready_s1_burst_adapter:sink0_valid
	wire  [142:0] matmul_afu_matmul_ready_s1_cmd_width_adapter_src_data;                           // matmul_afu_matmul_ready_s1_cmd_width_adapter:out_data -> matmul_afu_matmul_ready_s1_burst_adapter:sink0_data
	wire          matmul_afu_matmul_ready_s1_cmd_width_adapter_src_ready;                          // matmul_afu_matmul_ready_s1_burst_adapter:sink0_ready -> matmul_afu_matmul_ready_s1_cmd_width_adapter:out_ready
	wire    [8:0] matmul_afu_matmul_ready_s1_cmd_width_adapter_src_channel;                        // matmul_afu_matmul_ready_s1_cmd_width_adapter:out_channel -> matmul_afu_matmul_ready_s1_burst_adapter:sink0_channel
	wire          matmul_afu_matmul_ready_s1_cmd_width_adapter_src_startofpacket;                  // matmul_afu_matmul_ready_s1_cmd_width_adapter:out_startofpacket -> matmul_afu_matmul_ready_s1_burst_adapter:sink0_startofpacket
	wire          matmul_afu_matmul_ready_s1_cmd_width_adapter_src_endofpacket;                    // matmul_afu_matmul_ready_s1_cmd_width_adapter:out_endofpacket -> matmul_afu_matmul_ready_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                            // cmd_demux:src6_valid -> async_fifo:in_valid
	wire  [178:0] cmd_demux_src6_data;                                                             // cmd_demux:src6_data -> async_fifo:in_data
	wire          cmd_demux_src6_ready;                                                            // async_fifo:in_ready -> cmd_demux:src6_ready
	wire    [8:0] cmd_demux_src6_channel;                                                          // cmd_demux:src6_channel -> async_fifo:in_channel
	wire          cmd_demux_src6_startofpacket;                                                    // cmd_demux:src6_startofpacket -> async_fifo:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                      // cmd_demux:src6_endofpacket -> async_fifo:in_endofpacket
	wire          async_fifo_out_valid;                                                            // async_fifo:out_valid -> cmd_mux_006:sink0_valid
	wire  [178:0] async_fifo_out_data;                                                             // async_fifo:out_data -> cmd_mux_006:sink0_data
	wire          async_fifo_out_ready;                                                            // cmd_mux_006:sink0_ready -> async_fifo:out_ready
	wire    [8:0] async_fifo_out_channel;                                                          // async_fifo:out_channel -> cmd_mux_006:sink0_channel
	wire          async_fifo_out_startofpacket;                                                    // async_fifo:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          async_fifo_out_endofpacket;                                                      // async_fifo:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                            // cmd_demux:src7_valid -> async_fifo_001:in_valid
	wire  [178:0] cmd_demux_src7_data;                                                             // cmd_demux:src7_data -> async_fifo_001:in_data
	wire          cmd_demux_src7_ready;                                                            // async_fifo_001:in_ready -> cmd_demux:src7_ready
	wire    [8:0] cmd_demux_src7_channel;                                                          // cmd_demux:src7_channel -> async_fifo_001:in_channel
	wire          cmd_demux_src7_startofpacket;                                                    // cmd_demux:src7_startofpacket -> async_fifo_001:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                      // cmd_demux:src7_endofpacket -> async_fifo_001:in_endofpacket
	wire          async_fifo_001_out_valid;                                                        // async_fifo_001:out_valid -> cmd_mux_007:sink0_valid
	wire  [178:0] async_fifo_001_out_data;                                                         // async_fifo_001:out_data -> cmd_mux_007:sink0_data
	wire          async_fifo_001_out_ready;                                                        // cmd_mux_007:sink0_ready -> async_fifo_001:out_ready
	wire    [8:0] async_fifo_001_out_channel;                                                      // async_fifo_001:out_channel -> cmd_mux_007:sink0_channel
	wire          async_fifo_001_out_startofpacket;                                                // async_fifo_001:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          async_fifo_001_out_endofpacket;                                                  // async_fifo_001:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                            // cmd_demux:src8_valid -> async_fifo_002:in_valid
	wire  [178:0] cmd_demux_src8_data;                                                             // cmd_demux:src8_data -> async_fifo_002:in_data
	wire          cmd_demux_src8_ready;                                                            // async_fifo_002:in_ready -> cmd_demux:src8_ready
	wire    [8:0] cmd_demux_src8_channel;                                                          // cmd_demux:src8_channel -> async_fifo_002:in_channel
	wire          cmd_demux_src8_startofpacket;                                                    // cmd_demux:src8_startofpacket -> async_fifo_002:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                      // cmd_demux:src8_endofpacket -> async_fifo_002:in_endofpacket
	wire          async_fifo_002_out_valid;                                                        // async_fifo_002:out_valid -> cmd_mux_008:sink0_valid
	wire  [178:0] async_fifo_002_out_data;                                                         // async_fifo_002:out_data -> cmd_mux_008:sink0_data
	wire          async_fifo_002_out_ready;                                                        // cmd_mux_008:sink0_ready -> async_fifo_002:out_ready
	wire    [8:0] async_fifo_002_out_channel;                                                      // async_fifo_002:out_channel -> cmd_mux_008:sink0_channel
	wire          async_fifo_002_out_startofpacket;                                                // async_fifo_002:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          async_fifo_002_out_endofpacket;                                                  // async_fifo_002:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                        // rsp_demux_006:src0_valid -> async_fifo_003:in_valid
	wire  [178:0] rsp_demux_006_src0_data;                                                         // rsp_demux_006:src0_data -> async_fifo_003:in_data
	wire          rsp_demux_006_src0_ready;                                                        // async_fifo_003:in_ready -> rsp_demux_006:src0_ready
	wire    [8:0] rsp_demux_006_src0_channel;                                                      // rsp_demux_006:src0_channel -> async_fifo_003:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                // rsp_demux_006:src0_startofpacket -> async_fifo_003:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                  // rsp_demux_006:src0_endofpacket -> async_fifo_003:in_endofpacket
	wire          async_fifo_003_out_valid;                                                        // async_fifo_003:out_valid -> rsp_mux:sink6_valid
	wire  [178:0] async_fifo_003_out_data;                                                         // async_fifo_003:out_data -> rsp_mux:sink6_data
	wire          async_fifo_003_out_ready;                                                        // rsp_mux:sink6_ready -> async_fifo_003:out_ready
	wire    [8:0] async_fifo_003_out_channel;                                                      // async_fifo_003:out_channel -> rsp_mux:sink6_channel
	wire          async_fifo_003_out_startofpacket;                                                // async_fifo_003:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          async_fifo_003_out_endofpacket;                                                  // async_fifo_003:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                        // rsp_demux_007:src0_valid -> async_fifo_004:in_valid
	wire  [178:0] rsp_demux_007_src0_data;                                                         // rsp_demux_007:src0_data -> async_fifo_004:in_data
	wire          rsp_demux_007_src0_ready;                                                        // async_fifo_004:in_ready -> rsp_demux_007:src0_ready
	wire    [8:0] rsp_demux_007_src0_channel;                                                      // rsp_demux_007:src0_channel -> async_fifo_004:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                // rsp_demux_007:src0_startofpacket -> async_fifo_004:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                  // rsp_demux_007:src0_endofpacket -> async_fifo_004:in_endofpacket
	wire          async_fifo_004_out_valid;                                                        // async_fifo_004:out_valid -> rsp_mux:sink7_valid
	wire  [178:0] async_fifo_004_out_data;                                                         // async_fifo_004:out_data -> rsp_mux:sink7_data
	wire          async_fifo_004_out_ready;                                                        // rsp_mux:sink7_ready -> async_fifo_004:out_ready
	wire    [8:0] async_fifo_004_out_channel;                                                      // async_fifo_004:out_channel -> rsp_mux:sink7_channel
	wire          async_fifo_004_out_startofpacket;                                                // async_fifo_004:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          async_fifo_004_out_endofpacket;                                                  // async_fifo_004:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                        // rsp_demux_008:src0_valid -> async_fifo_005:in_valid
	wire  [178:0] rsp_demux_008_src0_data;                                                         // rsp_demux_008:src0_data -> async_fifo_005:in_data
	wire          rsp_demux_008_src0_ready;                                                        // async_fifo_005:in_ready -> rsp_demux_008:src0_ready
	wire    [8:0] rsp_demux_008_src0_channel;                                                      // rsp_demux_008:src0_channel -> async_fifo_005:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                // rsp_demux_008:src0_startofpacket -> async_fifo_005:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                  // rsp_demux_008:src0_endofpacket -> async_fifo_005:in_endofpacket
	wire          async_fifo_005_out_valid;                                                        // async_fifo_005:out_valid -> rsp_mux:sink8_valid
	wire  [178:0] async_fifo_005_out_data;                                                         // async_fifo_005:out_data -> rsp_mux:sink8_data
	wire          async_fifo_005_out_ready;                                                        // rsp_mux:sink8_ready -> async_fifo_005:out_ready
	wire    [8:0] async_fifo_005_out_channel;                                                      // async_fifo_005:out_channel -> rsp_mux:sink8_channel
	wire          async_fifo_005_out_startofpacket;                                                // async_fifo_005:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          async_fifo_005_out_endofpacket;                                                  // async_fifo_005:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire    [0:0] matmul_afu_csr_bridge_master_limiter_cmd_src_valid;                              // matmul_afu_csr_bridge_master_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [178:0] matmul_afu_csr_bridge_master_limiter_cmd_src_data;                               // matmul_afu_csr_bridge_master_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          matmul_afu_csr_bridge_master_limiter_cmd_src_ready;                              // limiter_pipeline:in_ready -> matmul_afu_csr_bridge_master_limiter:cmd_src_ready
	wire    [8:0] matmul_afu_csr_bridge_master_limiter_cmd_src_channel;                            // matmul_afu_csr_bridge_master_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          matmul_afu_csr_bridge_master_limiter_cmd_src_startofpacket;                      // matmul_afu_csr_bridge_master_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          matmul_afu_csr_bridge_master_limiter_cmd_src_endofpacket;                        // matmul_afu_csr_bridge_master_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                                  // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [178:0] limiter_pipeline_source0_data;                                                   // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                                  // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [8:0] limiter_pipeline_source0_channel;                                                // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                          // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                            // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                               // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [178:0] rsp_mux_src_data;                                                                // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                               // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [8:0] rsp_mux_src_channel;                                                             // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                       // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                         // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                              // limiter_pipeline_001:out_valid -> matmul_afu_csr_bridge_master_limiter:rsp_sink_valid
	wire  [178:0] limiter_pipeline_001_source0_data;                                               // limiter_pipeline_001:out_data -> matmul_afu_csr_bridge_master_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                              // matmul_afu_csr_bridge_master_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [8:0] limiter_pipeline_001_source0_channel;                                            // limiter_pipeline_001:out_channel -> matmul_afu_csr_bridge_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                      // limiter_pipeline_001:out_startofpacket -> matmul_afu_csr_bridge_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                        // limiter_pipeline_001:out_endofpacket -> matmul_afu_csr_bridge_master_limiter:rsp_sink_endofpacket

	altera_error_response_slave #(
		.AXI_ID_W           (4),
		.AXI_ADDR_W         (48),
		.AXI_DATA_W         (64),
		.SUPPORT_CSR        (0),
		.LOG_CSR_DEPTH      (1),
		.REGISTER_AV_INPUTS (0),
		.SYNC_RESET         (1)
	) domain_0_default_slave (
		.aclk    (matmul_afu_dma_clock_out_clk_clk),                                    //   input,   width = 1,          clk.clk
		.aresetn (~matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),            //   input,   width = 1,    clk_reset.reset_n
		.awid    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awid),    //   input,   width = 4, axi_error_if.awid
		.awaddr  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awaddr),  //   input,  width = 48,             .awaddr
		.awlen   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlen),   //   input,   width = 4,             .awlen
		.awsize  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awsize),  //   input,   width = 3,             .awsize
		.awburst (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awburst), //   input,   width = 2,             .awburst
		.awlock  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlock),  //   input,   width = 2,             .awlock
		.awcache (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awcache), //   input,   width = 4,             .awcache
		.awprot  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awprot),  //   input,   width = 3,             .awprot
		.awvalid (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awvalid), //   input,   width = 1,             .awvalid
		.awready (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awready), //  output,   width = 1,             .awready
		.wid     (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wid),     //   input,   width = 4,             .wid
		.wdata   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wdata),   //   input,  width = 64,             .wdata
		.wstrb   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wstrb),   //   input,   width = 8,             .wstrb
		.wlast   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wlast),   //   input,   width = 1,             .wlast
		.wvalid  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wvalid),  //   input,   width = 1,             .wvalid
		.wready  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wready),  //  output,   width = 1,             .wready
		.bid     (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bid),     //  output,   width = 4,             .bid
		.bresp   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bresp),   //  output,   width = 2,             .bresp
		.bvalid  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bvalid),  //  output,   width = 1,             .bvalid
		.bready  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bready),  //   input,   width = 1,             .bready
		.arid    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arid),    //   input,   width = 4,             .arid
		.araddr  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_araddr),  //   input,  width = 48,             .araddr
		.arlen   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlen),   //   input,   width = 4,             .arlen
		.arsize  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arsize),  //   input,   width = 3,             .arsize
		.arburst (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arburst), //   input,   width = 2,             .arburst
		.arlock  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlock),  //   input,   width = 2,             .arlock
		.arcache (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arcache), //   input,   width = 4,             .arcache
		.arprot  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arprot),  //   input,   width = 3,             .arprot
		.arvalid (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arvalid), //   input,   width = 1,             .arvalid
		.arready (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arready), //  output,   width = 1,             .arready
		.rid     (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rid),     //  output,   width = 4,             .rid
		.rdata   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rdata),   //  output,  width = 64,             .rdata
		.rresp   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rresp),   //  output,   width = 2,             .rresp
		.rlast   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rlast),   //  output,   width = 1,             .rlast
		.rvalid  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rvalid),  //  output,   width = 1,             .rvalid
		.rready  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rready)   //   input,   width = 1,             .rready
	);

	matmul_afu_system_fixed_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (48),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (48),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) matmul_afu_csr_bridge_master_translator (
		.clk                    (matmul_afu_dma_clock_out_clk_clk),                                                //   input,   width = 1,                       clk.clk
		.reset                  (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),                         //   input,   width = 1,                     reset.reset
		.uav_address            (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_address),       //  output,  width = 48, avalon_universal_master_0.address
		.uav_burstcount         (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (matmul_afu_csr_bridge_master_address),                                            //   input,  width = 48,      avalon_anti_master_0.address
		.av_waitrequest         (matmul_afu_csr_bridge_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (matmul_afu_csr_bridge_master_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (matmul_afu_csr_bridge_master_byteenable),                                         //   input,   width = 8,                          .byteenable
		.av_read                (matmul_afu_csr_bridge_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (matmul_afu_csr_bridge_master_readdata),                                           //  output,  width = 64,                          .readdata
		.av_readdatavalid       (matmul_afu_csr_bridge_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (matmul_afu_csr_bridge_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (matmul_afu_csr_bridge_master_writedata),                                          //   input,  width = 64,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                            // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                            // (terminated),                                        
		.av_chipselect          (1'b0),                                                                            // (terminated),                                        
		.av_lock                (1'b0),                                                                            // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                            // (terminated),                                        
		.uav_clken              (),                                                                                // (terminated),                                        
		.av_clken               (1'b1),                                                                            // (terminated),                                        
		.uav_response           (2'b00),                                                                           // (terminated),                                        
		.av_response            (),                                                                                // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                            // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                 // (terminated),                                        
	);

	matmul_afu_system_fixed_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (48),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) matmul_afu_id_afu_afu_cfg_slave_translator (
		.clk                    (matmul_afu_dma_clock_out_clk_clk),                        //   input,   width = 1,                      clk.clk
		.reset                  (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (matmul_afu_id_afu_afu_cfg_slave_agent_m0_address),        //   input,  width = 48, avalon_universal_slave_0.address
		.uav_burstcount         (matmul_afu_id_afu_afu_cfg_slave_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (matmul_afu_id_afu_afu_cfg_slave_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (matmul_afu_id_afu_afu_cfg_slave_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (matmul_afu_id_afu_afu_cfg_slave_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (matmul_afu_id_afu_afu_cfg_slave_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (matmul_afu_id_afu_afu_cfg_slave_agent_m0_byteenable),     //   input,   width = 8,                         .byteenable
		.uav_readdata           (matmul_afu_id_afu_afu_cfg_slave_agent_m0_readdata),       //  output,  width = 64,                         .readdata
		.uav_writedata          (matmul_afu_id_afu_afu_cfg_slave_agent_m0_writedata),      //   input,  width = 64,                         .writedata
		.uav_lock               (matmul_afu_id_afu_afu_cfg_slave_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (matmul_afu_id_afu_afu_cfg_slave_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (matmul_afu_id_afu_afu_cfg_slave_address),                 //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (matmul_afu_id_afu_afu_cfg_slave_write),                   //  output,   width = 1,                         .write
		.av_read                (matmul_afu_id_afu_afu_cfg_slave_read),                    //  output,   width = 1,                         .read
		.av_readdata            (matmul_afu_id_afu_afu_cfg_slave_readdata),                //   input,  width = 64,                         .readdata
		.av_writedata           (matmul_afu_id_afu_afu_cfg_slave_writedata),               //  output,  width = 64,                         .writedata
		.av_begintransfer       (),                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                        // (terminated),                                       
		.av_burstcount          (),                                                        // (terminated),                                       
		.av_byteenable          (),                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                    // (terminated),                                       
		.av_waitrequest         (1'b0),                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                        // (terminated),                                       
		.av_lock                (),                                                        // (terminated),                                       
		.av_chipselect          (),                                                        // (terminated),                                       
		.av_clken               (),                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                    // (terminated),                                       
		.av_debugaccess         (),                                                        // (terminated),                                       
		.av_outputenable        (),                                                        // (terminated),                                       
		.uav_response           (),                                                        // (terminated),                                       
		.av_response            (2'b00),                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                     // (terminated),                                       
	);

	matmul_afu_system_fixed_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (48),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) matmul_afu_id_matmul_afu_cfg_slave_translator (
		.clk                    (matmul_afu_dma_clock_out_clk_clk),                          //   input,   width = 1,                      clk.clk
		.reset                  (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),   //   input,   width = 1,                    reset.reset
		.uav_address            (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_address),       //   input,  width = 48, avalon_universal_slave_0.address
		.uav_burstcount         (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (matmul_afu_id_matmul_afu_cfg_slave_address),                //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (matmul_afu_id_matmul_afu_cfg_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (matmul_afu_id_matmul_afu_cfg_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (matmul_afu_id_matmul_afu_cfg_slave_readdata),               //   input,  width = 64,                         .readdata
		.av_writedata           (matmul_afu_id_matmul_afu_cfg_slave_writedata),              //  output,  width = 64,                         .writedata
		.av_begintransfer       (),                                                          // (terminated),                                       
		.av_beginbursttransfer  (),                                                          // (terminated),                                       
		.av_burstcount          (),                                                          // (terminated),                                       
		.av_byteenable          (),                                                          // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                      // (terminated),                                       
		.av_waitrequest         (1'b0),                                                      // (terminated),                                       
		.av_writebyteenable     (),                                                          // (terminated),                                       
		.av_lock                (),                                                          // (terminated),                                       
		.av_chipselect          (),                                                          // (terminated),                                       
		.av_clken               (),                                                          // (terminated),                                       
		.uav_clken              (1'b0),                                                      // (terminated),                                       
		.av_debugaccess         (),                                                          // (terminated),                                       
		.av_outputenable        (),                                                          // (terminated),                                       
		.uav_response           (),                                                          // (terminated),                                       
		.av_response            (2'b00),                                                     // (terminated),                                       
		.uav_writeresponsevalid (),                                                          // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                       // (terminated),                                       
	);

	matmul_afu_system_fixed_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (48),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) matmul_afu_id_dma_afu_cfg_slave_translator (
		.clk                    (matmul_afu_dma_clock_out_clk_clk),                        //   input,   width = 1,                      clk.clk
		.reset                  (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (matmul_afu_id_dma_afu_cfg_slave_agent_m0_address),        //   input,  width = 48, avalon_universal_slave_0.address
		.uav_burstcount         (matmul_afu_id_dma_afu_cfg_slave_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (matmul_afu_id_dma_afu_cfg_slave_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (matmul_afu_id_dma_afu_cfg_slave_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (matmul_afu_id_dma_afu_cfg_slave_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (matmul_afu_id_dma_afu_cfg_slave_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (matmul_afu_id_dma_afu_cfg_slave_agent_m0_byteenable),     //   input,   width = 8,                         .byteenable
		.uav_readdata           (matmul_afu_id_dma_afu_cfg_slave_agent_m0_readdata),       //  output,  width = 64,                         .readdata
		.uav_writedata          (matmul_afu_id_dma_afu_cfg_slave_agent_m0_writedata),      //   input,  width = 64,                         .writedata
		.uav_lock               (matmul_afu_id_dma_afu_cfg_slave_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (matmul_afu_id_dma_afu_cfg_slave_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (matmul_afu_id_dma_afu_cfg_slave_address),                 //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (matmul_afu_id_dma_afu_cfg_slave_write),                   //  output,   width = 1,                         .write
		.av_read                (matmul_afu_id_dma_afu_cfg_slave_read),                    //  output,   width = 1,                         .read
		.av_readdata            (matmul_afu_id_dma_afu_cfg_slave_readdata),                //   input,  width = 64,                         .readdata
		.av_writedata           (matmul_afu_id_dma_afu_cfg_slave_writedata),               //  output,  width = 64,                         .writedata
		.av_begintransfer       (),                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                        // (terminated),                                       
		.av_burstcount          (),                                                        // (terminated),                                       
		.av_byteenable          (),                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                    // (terminated),                                       
		.av_waitrequest         (1'b0),                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                        // (terminated),                                       
		.av_lock                (),                                                        // (terminated),                                       
		.av_chipselect          (),                                                        // (terminated),                                       
		.av_clken               (),                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                    // (terminated),                                       
		.av_debugaccess         (),                                                        // (terminated),                                       
		.av_outputenable        (),                                                        // (terminated),                                       
		.uav_response           (),                                                        // (terminated),                                       
		.av_response            (2'b00),                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                     // (terminated),                                       
	);

	matmul_afu_system_fixed_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (48),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) msgdma_bbb_csr_translator (
		.clk                    (matmul_afu_dma_clock_out_clk_clk),                        //   input,   width = 1,                      clk.clk
		.reset                  (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (msgdma_bbb_csr_agent_m0_address),                         //   input,  width = 48, avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_bbb_csr_agent_m0_burstcount),                      //   input,   width = 4,                         .burstcount
		.uav_read               (msgdma_bbb_csr_agent_m0_read),                            //   input,   width = 1,                         .read
		.uav_write              (msgdma_bbb_csr_agent_m0_write),                           //   input,   width = 1,                         .write
		.uav_waitrequest        (msgdma_bbb_csr_agent_m0_waitrequest),                     //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (msgdma_bbb_csr_agent_m0_readdatavalid),                   //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (msgdma_bbb_csr_agent_m0_byteenable),                      //   input,   width = 8,                         .byteenable
		.uav_readdata           (msgdma_bbb_csr_agent_m0_readdata),                        //  output,  width = 64,                         .readdata
		.uav_writedata          (msgdma_bbb_csr_agent_m0_writedata),                       //   input,  width = 64,                         .writedata
		.uav_lock               (msgdma_bbb_csr_agent_m0_lock),                            //   input,   width = 1,                         .lock
		.uav_debugaccess        (msgdma_bbb_csr_agent_m0_debugaccess),                     //   input,   width = 1,                         .debugaccess
		.av_address             (msgdma_bbb_csr_address),                                  //  output,   width = 8,      avalon_anti_slave_0.address
		.av_write               (msgdma_bbb_csr_write),                                    //  output,   width = 1,                         .write
		.av_read                (msgdma_bbb_csr_read),                                     //  output,   width = 1,                         .read
		.av_readdata            (msgdma_bbb_csr_readdata),                                 //   input,  width = 64,                         .readdata
		.av_writedata           (msgdma_bbb_csr_writedata),                                //  output,  width = 64,                         .writedata
		.av_burstcount          (msgdma_bbb_csr_burstcount),                               //  output,   width = 1,                         .burstcount
		.av_byteenable          (msgdma_bbb_csr_byteenable),                               //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (msgdma_bbb_csr_readdatavalid),                            //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (msgdma_bbb_csr_waitrequest),                              //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                        // (terminated),                                       
		.av_writebyteenable     (),                                                        // (terminated),                                       
		.av_lock                (),                                                        // (terminated),                                       
		.av_chipselect          (),                                                        // (terminated),                                       
		.av_clken               (),                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                    // (terminated),                                       
		.av_debugaccess         (),                                                        // (terminated),                                       
		.av_outputenable        (),                                                        // (terminated),                                       
		.uav_response           (),                                                        // (terminated),                                       
		.av_response            (2'b00),                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                     // (terminated),                                       
	);

	matmul_afu_system_fixed_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (48),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) matmul_afu_start_matmul_s1_translator (
		.clk                    (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (matmul_afu_start_matmul_s1_agent_m0_address),                             //   input,  width = 48, avalon_universal_slave_0.address
		.uav_burstcount         (matmul_afu_start_matmul_s1_agent_m0_burstcount),                          //   input,   width = 3,                         .burstcount
		.uav_read               (matmul_afu_start_matmul_s1_agent_m0_read),                                //   input,   width = 1,                         .read
		.uav_write              (matmul_afu_start_matmul_s1_agent_m0_write),                               //   input,   width = 1,                         .write
		.uav_waitrequest        (matmul_afu_start_matmul_s1_agent_m0_waitrequest),                         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (matmul_afu_start_matmul_s1_agent_m0_readdatavalid),                       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (matmul_afu_start_matmul_s1_agent_m0_byteenable),                          //   input,   width = 4,                         .byteenable
		.uav_readdata           (matmul_afu_start_matmul_s1_agent_m0_readdata),                            //  output,  width = 32,                         .readdata
		.uav_writedata          (matmul_afu_start_matmul_s1_agent_m0_writedata),                           //   input,  width = 32,                         .writedata
		.uav_lock               (matmul_afu_start_matmul_s1_agent_m0_lock),                                //   input,   width = 1,                         .lock
		.uav_debugaccess        (matmul_afu_start_matmul_s1_agent_m0_debugaccess),                         //   input,   width = 1,                         .debugaccess
		.av_address             (matmul_afu_start_matmul_s1_address),                                      //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (matmul_afu_start_matmul_s1_write),                                        //  output,   width = 1,                         .write
		.av_readdata            (matmul_afu_start_matmul_s1_readdata),                                     //   input,  width = 32,                         .readdata
		.av_writedata           (matmul_afu_start_matmul_s1_writedata),                                    //  output,  width = 32,                         .writedata
		.av_chipselect          (matmul_afu_start_matmul_s1_chipselect),                                   //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                        // (terminated),                                       
		.av_begintransfer       (),                                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                                        // (terminated),                                       
		.av_burstcount          (),                                                                        // (terminated),                                       
		.av_byteenable          (),                                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                    // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                                        // (terminated),                                       
		.av_lock                (),                                                                        // (terminated),                                       
		.av_clken               (),                                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                                    // (terminated),                                       
		.av_debugaccess         (),                                                                        // (terminated),                                       
		.av_outputenable        (),                                                                        // (terminated),                                       
		.uav_response           (),                                                                        // (terminated),                                       
		.av_response            (2'b00),                                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                     // (terminated),                                       
	);

	matmul_afu_system_fixed_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (48),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) matmul_afu_matmul_ready_s1_translator (
		.clk                    (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (matmul_afu_matmul_ready_s1_agent_m0_address),                             //   input,  width = 48, avalon_universal_slave_0.address
		.uav_burstcount         (matmul_afu_matmul_ready_s1_agent_m0_burstcount),                          //   input,   width = 3,                         .burstcount
		.uav_read               (matmul_afu_matmul_ready_s1_agent_m0_read),                                //   input,   width = 1,                         .read
		.uav_write              (matmul_afu_matmul_ready_s1_agent_m0_write),                               //   input,   width = 1,                         .write
		.uav_waitrequest        (matmul_afu_matmul_ready_s1_agent_m0_waitrequest),                         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (matmul_afu_matmul_ready_s1_agent_m0_readdatavalid),                       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (matmul_afu_matmul_ready_s1_agent_m0_byteenable),                          //   input,   width = 4,                         .byteenable
		.uav_readdata           (matmul_afu_matmul_ready_s1_agent_m0_readdata),                            //  output,  width = 32,                         .readdata
		.uav_writedata          (matmul_afu_matmul_ready_s1_agent_m0_writedata),                           //   input,  width = 32,                         .writedata
		.uav_lock               (matmul_afu_matmul_ready_s1_agent_m0_lock),                                //   input,   width = 1,                         .lock
		.uav_debugaccess        (matmul_afu_matmul_ready_s1_agent_m0_debugaccess),                         //   input,   width = 1,                         .debugaccess
		.av_address             (matmul_afu_matmul_ready_s1_address),                                      //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (matmul_afu_matmul_ready_s1_write),                                        //  output,   width = 1,                         .write
		.av_readdata            (matmul_afu_matmul_ready_s1_readdata),                                     //   input,  width = 32,                         .readdata
		.av_writedata           (matmul_afu_matmul_ready_s1_writedata),                                    //  output,  width = 32,                         .writedata
		.av_chipselect          (matmul_afu_matmul_ready_s1_chipselect),                                   //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                        // (terminated),                                       
		.av_begintransfer       (),                                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                                        // (terminated),                                       
		.av_burstcount          (),                                                                        // (terminated),                                       
		.av_byteenable          (),                                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                    // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                                        // (terminated),                                       
		.av_lock                (),                                                                        // (terminated),                                       
		.av_clken               (),                                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                                    // (terminated),                                       
		.av_debugaccess         (),                                                                        // (terminated),                                       
		.av_outputenable        (),                                                                        // (terminated),                                       
		.uav_response           (),                                                                        // (terminated),                                       
		.av_response            (2'b00),                                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                     // (terminated),                                       
	);

	matmul_afu_system_fixed_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (48),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) matmul_afu_pgm_ram_s1_translator (
		.clk                    (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (matmul_afu_pgm_ram_s1_agent_m0_address),                                  //   input,  width = 48, avalon_universal_slave_0.address
		.uav_burstcount         (matmul_afu_pgm_ram_s1_agent_m0_burstcount),                               //   input,   width = 4,                         .burstcount
		.uav_read               (matmul_afu_pgm_ram_s1_agent_m0_read),                                     //   input,   width = 1,                         .read
		.uav_write              (matmul_afu_pgm_ram_s1_agent_m0_write),                                    //   input,   width = 1,                         .write
		.uav_waitrequest        (matmul_afu_pgm_ram_s1_agent_m0_waitrequest),                              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (matmul_afu_pgm_ram_s1_agent_m0_readdatavalid),                            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (matmul_afu_pgm_ram_s1_agent_m0_byteenable),                               //   input,   width = 8,                         .byteenable
		.uav_readdata           (matmul_afu_pgm_ram_s1_agent_m0_readdata),                                 //  output,  width = 64,                         .readdata
		.uav_writedata          (matmul_afu_pgm_ram_s1_agent_m0_writedata),                                //   input,  width = 64,                         .writedata
		.uav_lock               (matmul_afu_pgm_ram_s1_agent_m0_lock),                                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (matmul_afu_pgm_ram_s1_agent_m0_debugaccess),                              //   input,   width = 1,                         .debugaccess
		.av_address             (matmul_afu_pgm_ram_s1_address),                                           //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write               (matmul_afu_pgm_ram_s1_write),                                             //  output,   width = 1,                         .write
		.av_readdata            (matmul_afu_pgm_ram_s1_readdata),                                          //   input,  width = 64,                         .readdata
		.av_writedata           (matmul_afu_pgm_ram_s1_writedata),                                         //  output,  width = 64,                         .writedata
		.av_byteenable          (matmul_afu_pgm_ram_s1_byteenable),                                        //  output,   width = 8,                         .byteenable
		.av_chipselect          (matmul_afu_pgm_ram_s1_chipselect),                                        //  output,   width = 1,                         .chipselect
		.av_clken               (matmul_afu_pgm_ram_s1_clken),                                             //  output,   width = 1,                         .clken
		.av_read                (),                                                                        // (terminated),                                       
		.av_begintransfer       (),                                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                                        // (terminated),                                       
		.av_burstcount          (),                                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                    // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                                        // (terminated),                                       
		.av_lock                (),                                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                                    // (terminated),                                       
		.av_debugaccess         (),                                                                        // (terminated),                                       
		.av_outputenable        (),                                                                        // (terminated),                                       
		.uav_response           (),                                                                        // (terminated),                                       
		.av_response            (2'b00),                                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                     // (terminated),                                       
	);

	matmul_afu_system_fixed_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (178),
		.PKT_DOMAIN_H              (177),
		.PKT_DOMAIN_L              (176),
		.PKT_SNOOP_H               (175),
		.PKT_SNOOP_L               (172),
		.PKT_BARRIER_H             (171),
		.PKT_BARRIER_L             (170),
		.PKT_ORI_BURST_SIZE_H      (169),
		.PKT_ORI_BURST_SIZE_L      (167),
		.PKT_RESPONSE_STATUS_H     (166),
		.PKT_RESPONSE_STATUS_L     (165),
		.PKT_QOS_H                 (150),
		.PKT_QOS_L                 (150),
		.PKT_DATA_SIDEBAND_H       (148),
		.PKT_DATA_SIDEBAND_L       (148),
		.PKT_ADDR_SIDEBAND_H       (147),
		.PKT_ADDR_SIDEBAND_L       (147),
		.PKT_BURST_TYPE_H          (146),
		.PKT_BURST_TYPE_L          (145),
		.PKT_CACHE_H               (164),
		.PKT_CACHE_L               (161),
		.PKT_THREAD_ID_H           (157),
		.PKT_THREAD_ID_L           (157),
		.PKT_BURST_SIZE_H          (144),
		.PKT_BURST_SIZE_L          (142),
		.PKT_TRANS_EXCLUSIVE       (125),
		.PKT_TRANS_LOCK            (124),
		.PKT_BEGIN_BURST           (149),
		.PKT_PROTECTION_H          (160),
		.PKT_PROTECTION_L          (158),
		.PKT_BURSTWRAP_H           (141),
		.PKT_BURSTWRAP_L           (134),
		.PKT_BYTE_CNT_H            (133),
		.PKT_BYTE_CNT_L            (126),
		.PKT_ADDR_H                (119),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (120),
		.PKT_TRANS_POSTED          (121),
		.PKT_TRANS_WRITE           (122),
		.PKT_TRANS_READ            (123),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (153),
		.PKT_SRC_ID_L              (151),
		.PKT_DEST_ID_H             (156),
		.PKT_DEST_ID_L             (154),
		.ST_DATA_W                 (179),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) matmul_afu_csr_bridge_master_agent (
		.clk                   (matmul_afu_dma_clock_out_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset                 (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.av_address            (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_address),       //   input,   width = 48,        av.address
		.av_write              (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 64,          .writedata
		.av_readdata           (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 64,          .readdata
		.av_waitrequest        (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 8,          .byteenable
		.av_burstcount         (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 4,          .burstcount
		.av_debugaccess        (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (matmul_afu_csr_bridge_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (matmul_afu_csr_bridge_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (matmul_afu_csr_bridge_master_agent_cp_data),                                      //  output,  width = 179,          .data
		.cp_startofpacket      (matmul_afu_csr_bridge_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (matmul_afu_csr_bridge_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (matmul_afu_csr_bridge_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (matmul_afu_csr_bridge_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (matmul_afu_csr_bridge_master_limiter_rsp_src_data),                               //   input,  width = 179,          .data
		.rp_channel            (matmul_afu_csr_bridge_master_limiter_rsp_src_channel),                            //   input,    width = 9,          .channel
		.rp_startofpacket      (matmul_afu_csr_bridge_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (matmul_afu_csr_bridge_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (matmul_afu_csr_bridge_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                                // (terminated),                         
		.av_writeresponsevalid ()                                                                                 // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_axi_slave_ni_191_5s235oq #(
		.PKT_QOS_H                   (150),
		.PKT_QOS_L                   (150),
		.PKT_THREAD_ID_H             (157),
		.PKT_THREAD_ID_L             (157),
		.PKT_RESPONSE_STATUS_H       (166),
		.PKT_RESPONSE_STATUS_L       (165),
		.PKT_BEGIN_BURST             (149),
		.PKT_CACHE_H                 (164),
		.PKT_CACHE_L                 (161),
		.PKT_DATA_SIDEBAND_H         (148),
		.PKT_DATA_SIDEBAND_L         (148),
		.PKT_ADDR_SIDEBAND_H         (147),
		.PKT_ADDR_SIDEBAND_L         (147),
		.PKT_BURST_TYPE_H            (146),
		.PKT_BURST_TYPE_L            (145),
		.PKT_PROTECTION_H            (160),
		.PKT_PROTECTION_L            (158),
		.PKT_BURST_SIZE_H            (144),
		.PKT_BURST_SIZE_L            (142),
		.PKT_BURSTWRAP_H             (141),
		.PKT_BURSTWRAP_L             (134),
		.PKT_BYTE_CNT_H              (133),
		.PKT_BYTE_CNT_L              (126),
		.PKT_ADDR_H                  (119),
		.PKT_ADDR_L                  (72),
		.PKT_TRANS_EXCLUSIVE         (125),
		.PKT_TRANS_LOCK              (124),
		.PKT_TRANS_COMPRESSED_READ   (120),
		.PKT_TRANS_POSTED            (121),
		.PKT_TRANS_WRITE             (122),
		.PKT_TRANS_READ              (123),
		.PKT_DATA_H                  (63),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (71),
		.PKT_BYTEEN_L                (64),
		.PKT_SRC_ID_H                (153),
		.PKT_SRC_ID_L                (151),
		.PKT_DEST_ID_H               (156),
		.PKT_DEST_ID_L               (154),
		.PKT_ORI_BURST_SIZE_L        (167),
		.PKT_ORI_BURST_SIZE_H        (169),
		.PKT_DOMAIN_L                (176),
		.PKT_DOMAIN_H                (177),
		.PKT_SNOOP_L                 (172),
		.PKT_SNOOP_H                 (175),
		.PKT_BARRIER_L               (170),
		.PKT_BARRIER_H               (171),
		.PKT_WUNIQUE                 (178),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (179),
		.ADDR_WIDTH                  (48),
		.RDATA_WIDTH                 (64),
		.WDATA_WIDTH                 (64),
		.ST_CHANNEL_W                (9),
		.AXI_SLAVE_ID_W              (4),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1)
	) domain_0_default_slave_axi_error_if_agent (
		.aclk                   (matmul_afu_dma_clock_out_clk_clk),                                    //   input,    width = 1,        clock_sink.clk
		.aresetn                (~matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                               //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                               //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                                //   input,  width = 179,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                             //   input,    width = 9,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                       //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                         //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                                   //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                                   //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                                    //   input,  width = 179,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                                 //   input,    width = 9,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                           //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                             //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (domain_0_default_slave_axi_error_if_agent_read_rp_ready),             //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (domain_0_default_slave_axi_error_if_agent_read_rp_valid),             //  output,    width = 1,                  .valid
		.read_rp_data           (domain_0_default_slave_axi_error_if_agent_read_rp_data),              //  output,  width = 179,                  .data
		.read_rp_startofpacket  (domain_0_default_slave_axi_error_if_agent_read_rp_startofpacket),     //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (domain_0_default_slave_axi_error_if_agent_read_rp_endofpacket),       //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (domain_0_default_slave_axi_error_if_agent_write_rp_ready),            //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (domain_0_default_slave_axi_error_if_agent_write_rp_valid),            //  output,    width = 1,                  .valid
		.write_rp_data          (domain_0_default_slave_axi_error_if_agent_write_rp_data),             //  output,  width = 179,                  .data
		.write_rp_startofpacket (domain_0_default_slave_axi_error_if_agent_write_rp_startofpacket),    //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (domain_0_default_slave_axi_error_if_agent_write_rp_endofpacket),      //  output,    width = 1,                  .endofpacket
		.awid                   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awid),    //  output,    width = 4, altera_axi_master.awid
		.awaddr                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awaddr),  //  output,   width = 48,                  .awaddr
		.awlen                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlen),   //  output,    width = 4,                  .awlen
		.awsize                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awsize),  //  output,    width = 3,                  .awsize
		.awburst                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awburst), //  output,    width = 2,                  .awburst
		.awlock                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awlock),  //  output,    width = 2,                  .awlock
		.awcache                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awcache), //  output,    width = 4,                  .awcache
		.awprot                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awprot),  //  output,    width = 3,                  .awprot
		.awvalid                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awvalid), //  output,    width = 1,                  .awvalid
		.awready                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_awready), //   input,    width = 1,                  .awready
		.wid                    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wid),     //  output,    width = 4,                  .wid
		.wdata                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wdata),   //  output,   width = 64,                  .wdata
		.wstrb                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wstrb),   //  output,    width = 8,                  .wstrb
		.wlast                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wlast),   //  output,    width = 1,                  .wlast
		.wvalid                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wvalid),  //  output,    width = 1,                  .wvalid
		.wready                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_wready),  //   input,    width = 1,                  .wready
		.bid                    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bid),     //   input,    width = 4,                  .bid
		.bresp                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bresp),   //   input,    width = 2,                  .bresp
		.bvalid                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bvalid),  //   input,    width = 1,                  .bvalid
		.bready                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_bready),  //  output,    width = 1,                  .bready
		.arid                   (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arid),    //  output,    width = 4,                  .arid
		.araddr                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_araddr),  //  output,   width = 48,                  .araddr
		.arlen                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlen),   //  output,    width = 4,                  .arlen
		.arsize                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arsize),  //  output,    width = 3,                  .arsize
		.arburst                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arburst), //  output,    width = 2,                  .arburst
		.arlock                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arlock),  //  output,    width = 2,                  .arlock
		.arcache                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arcache), //  output,    width = 4,                  .arcache
		.arprot                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arprot),  //  output,    width = 3,                  .arprot
		.arvalid                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arvalid), //  output,    width = 1,                  .arvalid
		.arready                (domain_0_default_slave_axi_error_if_agent_altera_axi_master_arready), //   input,    width = 1,                  .arready
		.rid                    (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rid),     //   input,    width = 4,                  .rid
		.rdata                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rdata),   //   input,   width = 64,                  .rdata
		.rresp                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rresp),   //   input,    width = 2,                  .rresp
		.rlast                  (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rlast),   //   input,    width = 1,                  .rlast
		.rvalid                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rvalid),  //   input,    width = 1,                  .rvalid
		.rready                 (domain_0_default_slave_axi_error_if_agent_altera_axi_master_rready),  //  output,    width = 1,                  .rready
		.awuser                 (),                                                                    // (terminated),                                 
		.aruser                 (),                                                                    // (terminated),                                 
		.wuser                  (),                                                                    // (terminated),                                 
		.ruser                  (1'b0),                                                                // (terminated),                                 
		.buser                  (1'b0)                                                                 // (terminated),                                 
	);

	matmul_afu_system_fixed_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (169),
		.PKT_ORI_BURST_SIZE_L      (167),
		.PKT_RESPONSE_STATUS_H     (166),
		.PKT_RESPONSE_STATUS_L     (165),
		.PKT_BURST_SIZE_H          (144),
		.PKT_BURST_SIZE_L          (142),
		.PKT_TRANS_LOCK            (124),
		.PKT_BEGIN_BURST           (149),
		.PKT_PROTECTION_H          (160),
		.PKT_PROTECTION_L          (158),
		.PKT_BURSTWRAP_H           (141),
		.PKT_BURSTWRAP_L           (134),
		.PKT_BYTE_CNT_H            (133),
		.PKT_BYTE_CNT_L            (126),
		.PKT_ADDR_H                (119),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (120),
		.PKT_TRANS_POSTED          (121),
		.PKT_TRANS_WRITE           (122),
		.PKT_TRANS_READ            (123),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (153),
		.PKT_SRC_ID_L              (151),
		.PKT_DEST_ID_H             (156),
		.PKT_DEST_ID_L             (154),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (179),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) matmul_afu_id_afu_afu_cfg_slave_agent (
		.clk                     (matmul_afu_dma_clock_out_clk_clk),                                 //   input,    width = 1,             clk.clk
		.reset                   (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (matmul_afu_id_afu_afu_cfg_slave_agent_m0_address),                 //  output,   width = 48,              m0.address
		.m0_burstcount           (matmul_afu_id_afu_afu_cfg_slave_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (matmul_afu_id_afu_afu_cfg_slave_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (matmul_afu_id_afu_afu_cfg_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (matmul_afu_id_afu_afu_cfg_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (matmul_afu_id_afu_afu_cfg_slave_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (matmul_afu_id_afu_afu_cfg_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (matmul_afu_id_afu_afu_cfg_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (matmul_afu_id_afu_afu_cfg_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (matmul_afu_id_afu_afu_cfg_slave_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (matmul_afu_id_afu_afu_cfg_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (matmul_afu_id_afu_afu_cfg_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (matmul_afu_id_afu_afu_cfg_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (matmul_afu_id_afu_afu_cfg_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (matmul_afu_id_afu_afu_cfg_slave_agent_rp_data),                    //  output,  width = 179,                .data
		.rp_startofpacket        (matmul_afu_id_afu_afu_cfg_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                            //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                            //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                                             //   input,  width = 179,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                    //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                      //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                          //   input,    width = 9,                .channel
		.rf_sink_ready           (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_data),          //   input,  width = 180,                .data
		.rf_source_ready         (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_data),             //  output,  width = 180,                .data
		.rdata_fifo_sink_ready   (matmul_afu_id_afu_afu_cfg_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (matmul_afu_id_afu_afu_cfg_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (matmul_afu_id_afu_afu_cfg_slave_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (matmul_afu_id_afu_afu_cfg_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (matmul_afu_id_afu_afu_cfg_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (matmul_afu_id_afu_afu_cfg_slave_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                              // (terminated),                               
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (180),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                                                     //   input,    width = 1,       clk.clk
		.reset             (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_data),                                 //   input,  width = 180,        in.data
		.in_valid          (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_valid),                                //   input,    width = 1,          .valid
		.in_ready          (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_ready),                                //  output,    width = 1,          .ready
		.in_startofpacket  (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (matmul_afu_id_afu_afu_cfg_slave_agent_rf_source_endofpacket),                          //   input,    width = 1,          .endofpacket
		.out_data          (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_data),                              //  output,  width = 180,       out.data
		.out_valid         (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_valid),                             //  output,    width = 1,          .valid
		.out_ready         (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),                       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                                // (terminated),                         
		.csr_read          (1'b0),                                                                                 // (terminated),                         
		.csr_write         (1'b0),                                                                                 // (terminated),                         
		.csr_readdata      (),                                                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated),                         
		.almost_full_data  (),                                                                                     // (terminated),                         
		.almost_empty_data (),                                                                                     // (terminated),                         
		.in_empty          (1'b0),                                                                                 // (terminated),                         
		.out_empty         (),                                                                                     // (terminated),                         
		.in_error          (1'b0),                                                                                 // (terminated),                         
		.out_error         (),                                                                                     // (terminated),                         
		.in_channel        (1'b0),                                                                                 // (terminated),                         
		.out_channel       ()                                                                                      // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (169),
		.PKT_ORI_BURST_SIZE_L      (167),
		.PKT_RESPONSE_STATUS_H     (166),
		.PKT_RESPONSE_STATUS_L     (165),
		.PKT_BURST_SIZE_H          (144),
		.PKT_BURST_SIZE_L          (142),
		.PKT_TRANS_LOCK            (124),
		.PKT_BEGIN_BURST           (149),
		.PKT_PROTECTION_H          (160),
		.PKT_PROTECTION_L          (158),
		.PKT_BURSTWRAP_H           (141),
		.PKT_BURSTWRAP_L           (134),
		.PKT_BYTE_CNT_H            (133),
		.PKT_BYTE_CNT_L            (126),
		.PKT_ADDR_H                (119),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (120),
		.PKT_TRANS_POSTED          (121),
		.PKT_TRANS_WRITE           (122),
		.PKT_TRANS_READ            (123),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (153),
		.PKT_SRC_ID_L              (151),
		.PKT_DEST_ID_H             (156),
		.PKT_DEST_ID_L             (154),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (179),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) matmul_afu_id_matmul_afu_cfg_slave_agent (
		.clk                     (matmul_afu_dma_clock_out_clk_clk),                                    //   input,    width = 1,             clk.clk
		.reset                   (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_address),                 //  output,   width = 48,              m0.address
		.m0_burstcount           (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (matmul_afu_id_matmul_afu_cfg_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_data),                    //  output,  width = 179,                .data
		.rp_startofpacket        (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                               //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                               //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                //   input,  width = 179,                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                       //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                         //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                             //   input,    width = 9,                .channel
		.rf_sink_ready           (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_data),          //   input,  width = 180,                .data
		.rf_source_ready         (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_data),             //  output,  width = 180,                .data
		.rdata_fifo_sink_ready   (matmul_afu_id_matmul_afu_cfg_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (matmul_afu_id_matmul_afu_cfg_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (matmul_afu_id_matmul_afu_cfg_slave_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (matmul_afu_id_matmul_afu_cfg_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (matmul_afu_id_matmul_afu_cfg_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (matmul_afu_id_matmul_afu_cfg_slave_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (180),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                                                     //   input,    width = 1,       clk.clk
		.reset             (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_data),                              //   input,  width = 180,        in.data
		.in_valid          (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_valid),                             //   input,    width = 1,          .valid
		.in_ready          (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_ready),                             //  output,    width = 1,          .ready
		.in_startofpacket  (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (matmul_afu_id_matmul_afu_cfg_slave_agent_rf_source_endofpacket),                       //   input,    width = 1,          .endofpacket
		.out_data          (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_data),                           //  output,  width = 180,       out.data
		.out_valid         (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_valid),                          //  output,    width = 1,          .valid
		.out_ready         (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_ready),                          //   input,    width = 1,          .ready
		.out_startofpacket (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_startofpacket),                  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (matmul_afu_id_matmul_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),                    //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                                // (terminated),                         
		.csr_read          (1'b0),                                                                                 // (terminated),                         
		.csr_write         (1'b0),                                                                                 // (terminated),                         
		.csr_readdata      (),                                                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated),                         
		.almost_full_data  (),                                                                                     // (terminated),                         
		.almost_empty_data (),                                                                                     // (terminated),                         
		.in_empty          (1'b0),                                                                                 // (terminated),                         
		.out_empty         (),                                                                                     // (terminated),                         
		.in_error          (1'b0),                                                                                 // (terminated),                         
		.out_error         (),                                                                                     // (terminated),                         
		.in_channel        (1'b0),                                                                                 // (terminated),                         
		.out_channel       ()                                                                                      // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (169),
		.PKT_ORI_BURST_SIZE_L      (167),
		.PKT_RESPONSE_STATUS_H     (166),
		.PKT_RESPONSE_STATUS_L     (165),
		.PKT_BURST_SIZE_H          (144),
		.PKT_BURST_SIZE_L          (142),
		.PKT_TRANS_LOCK            (124),
		.PKT_BEGIN_BURST           (149),
		.PKT_PROTECTION_H          (160),
		.PKT_PROTECTION_L          (158),
		.PKT_BURSTWRAP_H           (141),
		.PKT_BURSTWRAP_L           (134),
		.PKT_BYTE_CNT_H            (133),
		.PKT_BYTE_CNT_L            (126),
		.PKT_ADDR_H                (119),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (120),
		.PKT_TRANS_POSTED          (121),
		.PKT_TRANS_WRITE           (122),
		.PKT_TRANS_READ            (123),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (153),
		.PKT_SRC_ID_L              (151),
		.PKT_DEST_ID_H             (156),
		.PKT_DEST_ID_L             (154),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (179),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) matmul_afu_id_dma_afu_cfg_slave_agent (
		.clk                     (matmul_afu_dma_clock_out_clk_clk),                                 //   input,    width = 1,             clk.clk
		.reset                   (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (matmul_afu_id_dma_afu_cfg_slave_agent_m0_address),                 //  output,   width = 48,              m0.address
		.m0_burstcount           (matmul_afu_id_dma_afu_cfg_slave_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (matmul_afu_id_dma_afu_cfg_slave_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (matmul_afu_id_dma_afu_cfg_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (matmul_afu_id_dma_afu_cfg_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (matmul_afu_id_dma_afu_cfg_slave_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (matmul_afu_id_dma_afu_cfg_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (matmul_afu_id_dma_afu_cfg_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (matmul_afu_id_dma_afu_cfg_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (matmul_afu_id_dma_afu_cfg_slave_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (matmul_afu_id_dma_afu_cfg_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (matmul_afu_id_dma_afu_cfg_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (matmul_afu_id_dma_afu_cfg_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (matmul_afu_id_dma_afu_cfg_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (matmul_afu_id_dma_afu_cfg_slave_agent_rp_data),                    //  output,  width = 179,                .data
		.rp_startofpacket        (matmul_afu_id_dma_afu_cfg_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                            //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                            //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_004_src_data),                                             //   input,  width = 179,                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                    //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                      //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                          //   input,    width = 9,                .channel
		.rf_sink_ready           (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_data),          //   input,  width = 180,                .data
		.rf_source_ready         (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_data),             //  output,  width = 180,                .data
		.rdata_fifo_sink_ready   (matmul_afu_id_dma_afu_cfg_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (matmul_afu_id_dma_afu_cfg_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (matmul_afu_id_dma_afu_cfg_slave_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (matmul_afu_id_dma_afu_cfg_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (matmul_afu_id_dma_afu_cfg_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (matmul_afu_id_dma_afu_cfg_slave_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                              // (terminated),                               
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (180),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                                                     //   input,    width = 1,       clk.clk
		.reset             (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_data),                                 //   input,  width = 180,        in.data
		.in_valid          (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_valid),                                //   input,    width = 1,          .valid
		.in_ready          (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_ready),                                //  output,    width = 1,          .ready
		.in_startofpacket  (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (matmul_afu_id_dma_afu_cfg_slave_agent_rf_source_endofpacket),                          //   input,    width = 1,          .endofpacket
		.out_data          (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_data),                              //  output,  width = 180,       out.data
		.out_valid         (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_valid),                             //  output,    width = 1,          .valid
		.out_ready         (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (matmul_afu_id_dma_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),                       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                                // (terminated),                         
		.csr_read          (1'b0),                                                                                 // (terminated),                         
		.csr_write         (1'b0),                                                                                 // (terminated),                         
		.csr_readdata      (),                                                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated),                         
		.almost_full_data  (),                                                                                     // (terminated),                         
		.almost_empty_data (),                                                                                     // (terminated),                         
		.in_empty          (1'b0),                                                                                 // (terminated),                         
		.out_empty         (),                                                                                     // (terminated),                         
		.in_error          (1'b0),                                                                                 // (terminated),                         
		.out_error         (),                                                                                     // (terminated),                         
		.in_channel        (1'b0),                                                                                 // (terminated),                         
		.out_channel       ()                                                                                      // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (169),
		.PKT_ORI_BURST_SIZE_L      (167),
		.PKT_RESPONSE_STATUS_H     (166),
		.PKT_RESPONSE_STATUS_L     (165),
		.PKT_BURST_SIZE_H          (144),
		.PKT_BURST_SIZE_L          (142),
		.PKT_TRANS_LOCK            (124),
		.PKT_BEGIN_BURST           (149),
		.PKT_PROTECTION_H          (160),
		.PKT_PROTECTION_L          (158),
		.PKT_BURSTWRAP_H           (141),
		.PKT_BURSTWRAP_L           (134),
		.PKT_BYTE_CNT_H            (133),
		.PKT_BYTE_CNT_L            (126),
		.PKT_ADDR_H                (119),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (120),
		.PKT_TRANS_POSTED          (121),
		.PKT_TRANS_WRITE           (122),
		.PKT_TRANS_READ            (123),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (153),
		.PKT_SRC_ID_L              (151),
		.PKT_DEST_ID_H             (156),
		.PKT_DEST_ID_L             (154),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (179),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) msgdma_bbb_csr_agent (
		.clk                     (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,             clk.clk
		.reset                   (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (msgdma_bbb_csr_agent_m0_address),                         //  output,   width = 48,              m0.address
		.m0_burstcount           (msgdma_bbb_csr_agent_m0_burstcount),                      //  output,    width = 4,                .burstcount
		.m0_byteenable           (msgdma_bbb_csr_agent_m0_byteenable),                      //  output,    width = 8,                .byteenable
		.m0_debugaccess          (msgdma_bbb_csr_agent_m0_debugaccess),                     //  output,    width = 1,                .debugaccess
		.m0_lock                 (msgdma_bbb_csr_agent_m0_lock),                            //  output,    width = 1,                .lock
		.m0_readdata             (msgdma_bbb_csr_agent_m0_readdata),                        //   input,   width = 64,                .readdata
		.m0_readdatavalid        (msgdma_bbb_csr_agent_m0_readdatavalid),                   //   input,    width = 1,                .readdatavalid
		.m0_read                 (msgdma_bbb_csr_agent_m0_read),                            //  output,    width = 1,                .read
		.m0_waitrequest          (msgdma_bbb_csr_agent_m0_waitrequest),                     //   input,    width = 1,                .waitrequest
		.m0_writedata            (msgdma_bbb_csr_agent_m0_writedata),                       //  output,   width = 64,                .writedata
		.m0_write                (msgdma_bbb_csr_agent_m0_write),                           //  output,    width = 1,                .write
		.rp_endofpacket          (msgdma_bbb_csr_agent_rp_endofpacket),                     //  output,    width = 1,              rp.endofpacket
		.rp_ready                (msgdma_bbb_csr_agent_rp_ready),                           //   input,    width = 1,                .ready
		.rp_valid                (msgdma_bbb_csr_agent_rp_valid),                           //  output,    width = 1,                .valid
		.rp_data                 (msgdma_bbb_csr_agent_rp_data),                            //  output,  width = 179,                .data
		.rp_startofpacket        (msgdma_bbb_csr_agent_rp_startofpacket),                   //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                   //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                   //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_005_src_data),                                    //   input,  width = 179,                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                           //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                             //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                 //   input,    width = 9,                .channel
		.rf_sink_ready           (msgdma_bbb_csr_agent_rsp_fifo_out_ready),                 //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (msgdma_bbb_csr_agent_rsp_fifo_out_valid),                 //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (msgdma_bbb_csr_agent_rsp_fifo_out_startofpacket),         //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (msgdma_bbb_csr_agent_rsp_fifo_out_endofpacket),           //   input,    width = 1,                .endofpacket
		.rf_sink_data            (msgdma_bbb_csr_agent_rsp_fifo_out_data),                  //   input,  width = 180,                .data
		.rf_source_ready         (msgdma_bbb_csr_agent_rf_source_ready),                    //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (msgdma_bbb_csr_agent_rf_source_valid),                    //  output,    width = 1,                .valid
		.rf_source_startofpacket (msgdma_bbb_csr_agent_rf_source_startofpacket),            //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (msgdma_bbb_csr_agent_rf_source_endofpacket),              //  output,    width = 1,                .endofpacket
		.rf_source_data          (msgdma_bbb_csr_agent_rf_source_data),                     //  output,  width = 180,                .data
		.rdata_fifo_sink_ready   (msgdma_bbb_csr_agent_rdata_fifo_src_ready),               //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (msgdma_bbb_csr_agent_rdata_fifo_src_valid),               //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (msgdma_bbb_csr_agent_rdata_fifo_src_data),                //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (msgdma_bbb_csr_agent_rdata_fifo_src_ready),               //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_bbb_csr_agent_rdata_fifo_src_valid),               //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (msgdma_bbb_csr_agent_rdata_fifo_src_data),                //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                     // (terminated),                               
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (180),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) msgdma_bbb_csr_agent_rsp_fifo (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                                                     //   input,    width = 1,       clk.clk
		.reset             (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (msgdma_bbb_csr_agent_rf_source_data),                                                  //   input,  width = 180,        in.data
		.in_valid          (msgdma_bbb_csr_agent_rf_source_valid),                                                 //   input,    width = 1,          .valid
		.in_ready          (msgdma_bbb_csr_agent_rf_source_ready),                                                 //  output,    width = 1,          .ready
		.in_startofpacket  (msgdma_bbb_csr_agent_rf_source_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (msgdma_bbb_csr_agent_rf_source_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.out_data          (msgdma_bbb_csr_agent_rsp_fifo_out_data),                                               //  output,  width = 180,       out.data
		.out_valid         (msgdma_bbb_csr_agent_rsp_fifo_out_valid),                                              //  output,    width = 1,          .valid
		.out_ready         (msgdma_bbb_csr_agent_rsp_fifo_out_ready),                                              //   input,    width = 1,          .ready
		.out_startofpacket (msgdma_bbb_csr_agent_rsp_fifo_out_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (msgdma_bbb_csr_agent_rsp_fifo_out_endofpacket),                                        //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                                // (terminated),                         
		.csr_read          (1'b0),                                                                                 // (terminated),                         
		.csr_write         (1'b0),                                                                                 // (terminated),                         
		.csr_readdata      (),                                                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated),                         
		.almost_full_data  (),                                                                                     // (terminated),                         
		.almost_empty_data (),                                                                                     // (terminated),                         
		.in_empty          (1'b0),                                                                                 // (terminated),                         
		.out_empty         (),                                                                                     // (terminated),                         
		.in_error          (1'b0),                                                                                 // (terminated),                         
		.out_error         (),                                                                                     // (terminated),                         
		.in_channel        (1'b0),                                                                                 // (terminated),                         
		.out_channel       ()                                                                                      // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (108),
		.PKT_BURST_SIZE_L          (106),
		.PKT_TRANS_LOCK            (88),
		.PKT_BEGIN_BURST           (113),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (105),
		.PKT_BURSTWRAP_L           (98),
		.PKT_BYTE_CNT_H            (97),
		.PKT_BYTE_CNT_L            (90),
		.PKT_ADDR_H                (83),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (84),
		.PKT_TRANS_POSTED          (85),
		.PKT_TRANS_WRITE           (86),
		.PKT_TRANS_READ            (87),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (117),
		.PKT_SRC_ID_L              (115),
		.PKT_DEST_ID_H             (120),
		.PKT_DEST_ID_L             (118),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (143),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) matmul_afu_start_matmul_s1_agent (
		.clk                     (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (matmul_afu_start_matmul_s1_agent_m0_address),                             //  output,   width = 48,              m0.address
		.m0_burstcount           (matmul_afu_start_matmul_s1_agent_m0_burstcount),                          //  output,    width = 3,                .burstcount
		.m0_byteenable           (matmul_afu_start_matmul_s1_agent_m0_byteenable),                          //  output,    width = 4,                .byteenable
		.m0_debugaccess          (matmul_afu_start_matmul_s1_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (matmul_afu_start_matmul_s1_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (matmul_afu_start_matmul_s1_agent_m0_readdata),                            //   input,   width = 32,                .readdata
		.m0_readdatavalid        (matmul_afu_start_matmul_s1_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (matmul_afu_start_matmul_s1_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (matmul_afu_start_matmul_s1_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (matmul_afu_start_matmul_s1_agent_m0_writedata),                           //  output,   width = 32,                .writedata
		.m0_write                (matmul_afu_start_matmul_s1_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (matmul_afu_start_matmul_s1_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (matmul_afu_start_matmul_s1_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (matmul_afu_start_matmul_s1_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (matmul_afu_start_matmul_s1_agent_rp_data),                                //  output,  width = 143,                .data
		.rp_startofpacket        (matmul_afu_start_matmul_s1_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (matmul_afu_start_matmul_s1_burst_adapter_source0_ready),                  //  output,    width = 1,              cp.ready
		.cp_valid                (matmul_afu_start_matmul_s1_burst_adapter_source0_valid),                  //   input,    width = 1,                .valid
		.cp_data                 (matmul_afu_start_matmul_s1_burst_adapter_source0_data),                   //   input,  width = 143,                .data
		.cp_startofpacket        (matmul_afu_start_matmul_s1_burst_adapter_source0_startofpacket),          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (matmul_afu_start_matmul_s1_burst_adapter_source0_endofpacket),            //   input,    width = 1,                .endofpacket
		.cp_channel              (matmul_afu_start_matmul_s1_burst_adapter_source0_channel),                //   input,    width = 9,                .channel
		.rf_sink_ready           (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_data),                      //   input,  width = 144,                .data
		.rf_source_ready         (matmul_afu_start_matmul_s1_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (matmul_afu_start_matmul_s1_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (matmul_afu_start_matmul_s1_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (matmul_afu_start_matmul_s1_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (matmul_afu_start_matmul_s1_agent_rf_source_data),                         //  output,  width = 144,                .data
		.rdata_fifo_sink_ready   (matmul_afu_start_matmul_s1_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (matmul_afu_start_matmul_s1_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (matmul_afu_start_matmul_s1_agent_rdata_fifo_out_data),                    //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (matmul_afu_start_matmul_s1_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (matmul_afu_start_matmul_s1_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (matmul_afu_start_matmul_s1_agent_rdata_fifo_src_data),                    //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                     // (terminated),                               
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (144),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_start_matmul_s1_agent_rsp_fifo (
		.clk               (matmul_afu_matmul_clock_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset             (matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (matmul_afu_start_matmul_s1_agent_rf_source_data),             //   input,  width = 144,        in.data
		.in_valid          (matmul_afu_start_matmul_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (matmul_afu_start_matmul_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (matmul_afu_start_matmul_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (matmul_afu_start_matmul_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_data),          //  output,  width = 144,       out.data
		.out_valid         (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (matmul_afu_start_matmul_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_start_matmul_s1_agent_rdata_fifo (
		.clk               (matmul_afu_matmul_clock_out_clk_clk),                       //   input,   width = 1,       clk.clk
		.reset             (matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (matmul_afu_start_matmul_s1_agent_rdata_fifo_src_data),      //   input,  width = 34,        in.data
		.in_valid          (matmul_afu_start_matmul_s1_agent_rdata_fifo_src_valid),     //   input,   width = 1,          .valid
		.in_ready          (matmul_afu_start_matmul_s1_agent_rdata_fifo_src_ready),     //  output,   width = 1,          .ready
		.out_data          (matmul_afu_start_matmul_s1_agent_rdata_fifo_out_data),      //  output,  width = 34,       out.data
		.out_valid         (matmul_afu_start_matmul_s1_agent_rdata_fifo_out_valid),     //  output,   width = 1,          .valid
		.out_ready         (matmul_afu_start_matmul_s1_agent_rdata_fifo_out_ready),     //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                     // (terminated),                        
		.csr_read          (1'b0),                                                      // (terminated),                        
		.csr_write         (1'b0),                                                      // (terminated),                        
		.csr_readdata      (),                                                          // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated),                        
		.almost_full_data  (),                                                          // (terminated),                        
		.almost_empty_data (),                                                          // (terminated),                        
		.in_startofpacket  (1'b0),                                                      // (terminated),                        
		.in_endofpacket    (1'b0),                                                      // (terminated),                        
		.out_startofpacket (),                                                          // (terminated),                        
		.out_endofpacket   (),                                                          // (terminated),                        
		.in_empty          (1'b0),                                                      // (terminated),                        
		.out_empty         (),                                                          // (terminated),                        
		.in_error          (1'b0),                                                      // (terminated),                        
		.out_error         (),                                                          // (terminated),                        
		.in_channel        (1'b0),                                                      // (terminated),                        
		.out_channel       ()                                                           // (terminated),                        
	);

	matmul_afu_system_fixed_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (108),
		.PKT_BURST_SIZE_L          (106),
		.PKT_TRANS_LOCK            (88),
		.PKT_BEGIN_BURST           (113),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (105),
		.PKT_BURSTWRAP_L           (98),
		.PKT_BYTE_CNT_H            (97),
		.PKT_BYTE_CNT_L            (90),
		.PKT_ADDR_H                (83),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (84),
		.PKT_TRANS_POSTED          (85),
		.PKT_TRANS_WRITE           (86),
		.PKT_TRANS_READ            (87),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (117),
		.PKT_SRC_ID_L              (115),
		.PKT_DEST_ID_H             (120),
		.PKT_DEST_ID_L             (118),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (143),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) matmul_afu_matmul_ready_s1_agent (
		.clk                     (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (matmul_afu_matmul_ready_s1_agent_m0_address),                             //  output,   width = 48,              m0.address
		.m0_burstcount           (matmul_afu_matmul_ready_s1_agent_m0_burstcount),                          //  output,    width = 3,                .burstcount
		.m0_byteenable           (matmul_afu_matmul_ready_s1_agent_m0_byteenable),                          //  output,    width = 4,                .byteenable
		.m0_debugaccess          (matmul_afu_matmul_ready_s1_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (matmul_afu_matmul_ready_s1_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (matmul_afu_matmul_ready_s1_agent_m0_readdata),                            //   input,   width = 32,                .readdata
		.m0_readdatavalid        (matmul_afu_matmul_ready_s1_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (matmul_afu_matmul_ready_s1_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (matmul_afu_matmul_ready_s1_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (matmul_afu_matmul_ready_s1_agent_m0_writedata),                           //  output,   width = 32,                .writedata
		.m0_write                (matmul_afu_matmul_ready_s1_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (matmul_afu_matmul_ready_s1_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (matmul_afu_matmul_ready_s1_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (matmul_afu_matmul_ready_s1_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (matmul_afu_matmul_ready_s1_agent_rp_data),                                //  output,  width = 143,                .data
		.rp_startofpacket        (matmul_afu_matmul_ready_s1_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (matmul_afu_matmul_ready_s1_burst_adapter_source0_ready),                  //  output,    width = 1,              cp.ready
		.cp_valid                (matmul_afu_matmul_ready_s1_burst_adapter_source0_valid),                  //   input,    width = 1,                .valid
		.cp_data                 (matmul_afu_matmul_ready_s1_burst_adapter_source0_data),                   //   input,  width = 143,                .data
		.cp_startofpacket        (matmul_afu_matmul_ready_s1_burst_adapter_source0_startofpacket),          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (matmul_afu_matmul_ready_s1_burst_adapter_source0_endofpacket),            //   input,    width = 1,                .endofpacket
		.cp_channel              (matmul_afu_matmul_ready_s1_burst_adapter_source0_channel),                //   input,    width = 9,                .channel
		.rf_sink_ready           (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_data),                      //   input,  width = 144,                .data
		.rf_source_ready         (matmul_afu_matmul_ready_s1_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (matmul_afu_matmul_ready_s1_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (matmul_afu_matmul_ready_s1_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (matmul_afu_matmul_ready_s1_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (matmul_afu_matmul_ready_s1_agent_rf_source_data),                         //  output,  width = 144,                .data
		.rdata_fifo_sink_ready   (matmul_afu_matmul_ready_s1_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (matmul_afu_matmul_ready_s1_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (matmul_afu_matmul_ready_s1_agent_rdata_fifo_out_data),                    //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (matmul_afu_matmul_ready_s1_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (matmul_afu_matmul_ready_s1_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (matmul_afu_matmul_ready_s1_agent_rdata_fifo_src_data),                    //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                     // (terminated),                               
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (144),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_matmul_ready_s1_agent_rsp_fifo (
		.clk               (matmul_afu_matmul_clock_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset             (matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (matmul_afu_matmul_ready_s1_agent_rf_source_data),             //   input,  width = 144,        in.data
		.in_valid          (matmul_afu_matmul_ready_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (matmul_afu_matmul_ready_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (matmul_afu_matmul_ready_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (matmul_afu_matmul_ready_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_data),          //  output,  width = 144,       out.data
		.out_valid         (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (matmul_afu_matmul_ready_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_matmul_ready_s1_agent_rdata_fifo (
		.clk               (matmul_afu_matmul_clock_out_clk_clk),                       //   input,   width = 1,       clk.clk
		.reset             (matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (matmul_afu_matmul_ready_s1_agent_rdata_fifo_src_data),      //   input,  width = 34,        in.data
		.in_valid          (matmul_afu_matmul_ready_s1_agent_rdata_fifo_src_valid),     //   input,   width = 1,          .valid
		.in_ready          (matmul_afu_matmul_ready_s1_agent_rdata_fifo_src_ready),     //  output,   width = 1,          .ready
		.out_data          (matmul_afu_matmul_ready_s1_agent_rdata_fifo_out_data),      //  output,  width = 34,       out.data
		.out_valid         (matmul_afu_matmul_ready_s1_agent_rdata_fifo_out_valid),     //  output,   width = 1,          .valid
		.out_ready         (matmul_afu_matmul_ready_s1_agent_rdata_fifo_out_ready),     //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                     // (terminated),                        
		.csr_read          (1'b0),                                                      // (terminated),                        
		.csr_write         (1'b0),                                                      // (terminated),                        
		.csr_readdata      (),                                                          // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated),                        
		.almost_full_data  (),                                                          // (terminated),                        
		.almost_empty_data (),                                                          // (terminated),                        
		.in_startofpacket  (1'b0),                                                      // (terminated),                        
		.in_endofpacket    (1'b0),                                                      // (terminated),                        
		.out_startofpacket (),                                                          // (terminated),                        
		.out_endofpacket   (),                                                          // (terminated),                        
		.in_empty          (1'b0),                                                      // (terminated),                        
		.out_empty         (),                                                          // (terminated),                        
		.in_error          (1'b0),                                                      // (terminated),                        
		.out_error         (),                                                          // (terminated),                        
		.in_channel        (1'b0),                                                      // (terminated),                        
		.out_channel       ()                                                           // (terminated),                        
	);

	matmul_afu_system_fixed_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (169),
		.PKT_ORI_BURST_SIZE_L      (167),
		.PKT_RESPONSE_STATUS_H     (166),
		.PKT_RESPONSE_STATUS_L     (165),
		.PKT_BURST_SIZE_H          (144),
		.PKT_BURST_SIZE_L          (142),
		.PKT_TRANS_LOCK            (124),
		.PKT_BEGIN_BURST           (149),
		.PKT_PROTECTION_H          (160),
		.PKT_PROTECTION_L          (158),
		.PKT_BURSTWRAP_H           (141),
		.PKT_BURSTWRAP_L           (134),
		.PKT_BYTE_CNT_H            (133),
		.PKT_BYTE_CNT_L            (126),
		.PKT_ADDR_H                (119),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (120),
		.PKT_TRANS_POSTED          (121),
		.PKT_TRANS_WRITE           (122),
		.PKT_TRANS_READ            (123),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (153),
		.PKT_SRC_ID_L              (151),
		.PKT_DEST_ID_H             (156),
		.PKT_DEST_ID_L             (154),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (179),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) matmul_afu_pgm_ram_s1_agent (
		.clk                     (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (matmul_afu_pgm_ram_s1_agent_m0_address),                                  //  output,   width = 48,              m0.address
		.m0_burstcount           (matmul_afu_pgm_ram_s1_agent_m0_burstcount),                               //  output,    width = 4,                .burstcount
		.m0_byteenable           (matmul_afu_pgm_ram_s1_agent_m0_byteenable),                               //  output,    width = 8,                .byteenable
		.m0_debugaccess          (matmul_afu_pgm_ram_s1_agent_m0_debugaccess),                              //  output,    width = 1,                .debugaccess
		.m0_lock                 (matmul_afu_pgm_ram_s1_agent_m0_lock),                                     //  output,    width = 1,                .lock
		.m0_readdata             (matmul_afu_pgm_ram_s1_agent_m0_readdata),                                 //   input,   width = 64,                .readdata
		.m0_readdatavalid        (matmul_afu_pgm_ram_s1_agent_m0_readdatavalid),                            //   input,    width = 1,                .readdatavalid
		.m0_read                 (matmul_afu_pgm_ram_s1_agent_m0_read),                                     //  output,    width = 1,                .read
		.m0_waitrequest          (matmul_afu_pgm_ram_s1_agent_m0_waitrequest),                              //   input,    width = 1,                .waitrequest
		.m0_writedata            (matmul_afu_pgm_ram_s1_agent_m0_writedata),                                //  output,   width = 64,                .writedata
		.m0_write                (matmul_afu_pgm_ram_s1_agent_m0_write),                                    //  output,    width = 1,                .write
		.rp_endofpacket          (matmul_afu_pgm_ram_s1_agent_rp_endofpacket),                              //  output,    width = 1,              rp.endofpacket
		.rp_ready                (matmul_afu_pgm_ram_s1_agent_rp_ready),                                    //   input,    width = 1,                .ready
		.rp_valid                (matmul_afu_pgm_ram_s1_agent_rp_valid),                                    //  output,    width = 1,                .valid
		.rp_data                 (matmul_afu_pgm_ram_s1_agent_rp_data),                                     //  output,  width = 179,                .data
		.rp_startofpacket        (matmul_afu_pgm_ram_s1_agent_rp_startofpacket),                            //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                                   //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                                   //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_008_src_data),                                                    //   input,  width = 179,                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                           //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                             //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                                 //   input,    width = 9,                .channel
		.rf_sink_ready           (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_ready),                          //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_valid),                          //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_startofpacket),                  //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_endofpacket),                    //   input,    width = 1,                .endofpacket
		.rf_sink_data            (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_data),                           //   input,  width = 180,                .data
		.rf_source_ready         (matmul_afu_pgm_ram_s1_agent_rf_source_ready),                             //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (matmul_afu_pgm_ram_s1_agent_rf_source_valid),                             //  output,    width = 1,                .valid
		.rf_source_startofpacket (matmul_afu_pgm_ram_s1_agent_rf_source_startofpacket),                     //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (matmul_afu_pgm_ram_s1_agent_rf_source_endofpacket),                       //  output,    width = 1,                .endofpacket
		.rf_source_data          (matmul_afu_pgm_ram_s1_agent_rf_source_data),                              //  output,  width = 180,                .data
		.rdata_fifo_sink_ready   (matmul_afu_pgm_ram_s1_agent_rdata_fifo_out_ready),                        //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (matmul_afu_pgm_ram_s1_agent_rdata_fifo_out_valid),                        //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (matmul_afu_pgm_ram_s1_agent_rdata_fifo_out_data),                         //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (matmul_afu_pgm_ram_s1_agent_rdata_fifo_src_ready),                        //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (matmul_afu_pgm_ram_s1_agent_rdata_fifo_src_valid),                        //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (matmul_afu_pgm_ram_s1_agent_rdata_fifo_src_data),                         //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                     // (terminated),                               
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (180),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_pgm_ram_s1_agent_rsp_fifo (
		.clk               (matmul_afu_matmul_clock_out_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset             (matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (matmul_afu_pgm_ram_s1_agent_rf_source_data),                //   input,  width = 180,        in.data
		.in_valid          (matmul_afu_pgm_ram_s1_agent_rf_source_valid),               //   input,    width = 1,          .valid
		.in_ready          (matmul_afu_pgm_ram_s1_agent_rf_source_ready),               //  output,    width = 1,          .ready
		.in_startofpacket  (matmul_afu_pgm_ram_s1_agent_rf_source_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (matmul_afu_pgm_ram_s1_agent_rf_source_endofpacket),         //   input,    width = 1,          .endofpacket
		.out_data          (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_data),             //  output,  width = 180,       out.data
		.out_valid         (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_valid),            //  output,    width = 1,          .valid
		.out_ready         (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_ready),            //   input,    width = 1,          .ready
		.out_startofpacket (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_startofpacket),    //  output,    width = 1,          .startofpacket
		.out_endofpacket   (matmul_afu_pgm_ram_s1_agent_rsp_fifo_out_endofpacket),      //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated),                         
		.csr_read          (1'b0),                                                      // (terminated),                         
		.csr_write         (1'b0),                                                      // (terminated),                         
		.csr_readdata      (),                                                          // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated),                         
		.almost_full_data  (),                                                          // (terminated),                         
		.almost_empty_data (),                                                          // (terminated),                         
		.in_empty          (1'b0),                                                      // (terminated),                         
		.out_empty         (),                                                          // (terminated),                         
		.in_error          (1'b0),                                                      // (terminated),                         
		.out_error         (),                                                          // (terminated),                         
		.in_channel        (1'b0),                                                      // (terminated),                         
		.out_channel       ()                                                           // (terminated),                         
	);

	matmul_afu_system_fixed_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) matmul_afu_pgm_ram_s1_agent_rdata_fifo (
		.clk               (matmul_afu_matmul_clock_out_clk_clk),                       //   input,   width = 1,       clk.clk
		.reset             (matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (matmul_afu_pgm_ram_s1_agent_rdata_fifo_src_data),           //   input,  width = 66,        in.data
		.in_valid          (matmul_afu_pgm_ram_s1_agent_rdata_fifo_src_valid),          //   input,   width = 1,          .valid
		.in_ready          (matmul_afu_pgm_ram_s1_agent_rdata_fifo_src_ready),          //  output,   width = 1,          .ready
		.out_data          (matmul_afu_pgm_ram_s1_agent_rdata_fifo_out_data),           //  output,  width = 66,       out.data
		.out_valid         (matmul_afu_pgm_ram_s1_agent_rdata_fifo_out_valid),          //  output,   width = 1,          .valid
		.out_ready         (matmul_afu_pgm_ram_s1_agent_rdata_fifo_out_ready),          //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                     // (terminated),                        
		.csr_read          (1'b0),                                                      // (terminated),                        
		.csr_write         (1'b0),                                                      // (terminated),                        
		.csr_readdata      (),                                                          // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated),                        
		.almost_full_data  (),                                                          // (terminated),                        
		.almost_empty_data (),                                                          // (terminated),                        
		.in_startofpacket  (1'b0),                                                      // (terminated),                        
		.in_endofpacket    (1'b0),                                                      // (terminated),                        
		.out_startofpacket (),                                                          // (terminated),                        
		.out_endofpacket   (),                                                          // (terminated),                        
		.in_empty          (1'b0),                                                      // (terminated),                        
		.out_empty         (),                                                          // (terminated),                        
		.in_error          (1'b0),                                                      // (terminated),                        
		.out_error         (),                                                          // (terminated),                        
		.in_channel        (1'b0),                                                      // (terminated),                        
		.out_channel       ()                                                           // (terminated),                        
	);

	matmul_afu_system_fixed_altera_merlin_router_191_76clwha router (
		.sink_ready         (matmul_afu_csr_bridge_master_agent_cp_ready),             //  output,    width = 1,      sink.ready
		.sink_valid         (matmul_afu_csr_bridge_master_agent_cp_valid),             //   input,    width = 1,          .valid
		.sink_data          (matmul_afu_csr_bridge_master_agent_cp_data),              //   input,  width = 179,          .data
		.sink_startofpacket (matmul_afu_csr_bridge_master_agent_cp_startofpacket),     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_csr_bridge_master_agent_cp_endofpacket),       //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                        //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                         //  output,  width = 179,          .data
		.src_channel        (router_src_channel),                                      //  output,    width = 9,          .channel
		.src_startofpacket  (router_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_whf7wzi router_001 (
		.sink_ready         (domain_0_default_slave_axi_error_if_agent_write_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (domain_0_default_slave_axi_error_if_agent_write_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (domain_0_default_slave_axi_error_if_agent_write_rp_data),          //   input,  width = 179,          .data
		.sink_startofpacket (domain_0_default_slave_axi_error_if_agent_write_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (domain_0_default_slave_axi_error_if_agent_write_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                              //  output,  width = 179,          .data
		.src_channel        (router_001_src_channel),                                           //  output,    width = 9,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_whf7wzi router_002 (
		.sink_ready         (domain_0_default_slave_axi_error_if_agent_read_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (domain_0_default_slave_axi_error_if_agent_read_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (domain_0_default_slave_axi_error_if_agent_read_rp_data),          //   input,  width = 179,          .data
		.sink_startofpacket (domain_0_default_slave_axi_error_if_agent_read_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (domain_0_default_slave_axi_error_if_agent_read_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                             //  output,  width = 179,          .data
		.src_channel        (router_002_src_channel),                                          //  output,    width = 9,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_whf7wzi router_003 (
		.sink_ready         (matmul_afu_id_afu_afu_cfg_slave_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (matmul_afu_id_afu_afu_cfg_slave_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (matmul_afu_id_afu_afu_cfg_slave_agent_rp_data),           //   input,  width = 179,          .data
		.sink_startofpacket (matmul_afu_id_afu_afu_cfg_slave_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_id_afu_afu_cfg_slave_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                     //  output,  width = 179,          .data
		.src_channel        (router_003_src_channel),                                  //  output,    width = 9,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_whf7wzi router_004 (
		.sink_ready         (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_data),          //   input,  width = 179,          .data
		.sink_startofpacket (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_id_matmul_afu_cfg_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                      //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                      //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                       //  output,  width = 179,          .data
		.src_channel        (router_004_src_channel),                                    //  output,    width = 9,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                 //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_whf7wzi router_005 (
		.sink_ready         (matmul_afu_id_dma_afu_cfg_slave_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (matmul_afu_id_dma_afu_cfg_slave_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (matmul_afu_id_dma_afu_cfg_slave_agent_rp_data),           //   input,  width = 179,          .data
		.sink_startofpacket (matmul_afu_id_dma_afu_cfg_slave_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_id_dma_afu_cfg_slave_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                     //  output,  width = 179,          .data
		.src_channel        (router_005_src_channel),                                  //  output,    width = 9,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_whf7wzi router_006 (
		.sink_ready         (msgdma_bbb_csr_agent_rp_ready),                           //  output,    width = 1,      sink.ready
		.sink_valid         (msgdma_bbb_csr_agent_rp_valid),                           //   input,    width = 1,          .valid
		.sink_data          (msgdma_bbb_csr_agent_rp_data),                            //   input,  width = 179,          .data
		.sink_startofpacket (msgdma_bbb_csr_agent_rp_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (msgdma_bbb_csr_agent_rp_endofpacket),                     //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                     //  output,  width = 179,          .data
		.src_channel        (router_006_src_channel),                                  //  output,    width = 9,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_lxffnty router_007 (
		.sink_ready         (matmul_afu_start_matmul_s1_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (matmul_afu_start_matmul_s1_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (matmul_afu_start_matmul_s1_agent_rp_data),                                //   input,  width = 143,          .data
		.sink_startofpacket (matmul_afu_start_matmul_s1_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_start_matmul_s1_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                                     //  output,  width = 143,          .data
		.src_channel        (router_007_src_channel),                                                  //  output,    width = 9,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_lxffnty router_008 (
		.sink_ready         (matmul_afu_matmul_ready_s1_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (matmul_afu_matmul_ready_s1_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (matmul_afu_matmul_ready_s1_agent_rp_data),                                //   input,  width = 143,          .data
		.sink_startofpacket (matmul_afu_matmul_ready_s1_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_matmul_ready_s1_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                                                     //  output,  width = 143,          .data
		.src_channel        (router_008_src_channel),                                                  //  output,    width = 9,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_router_191_whf7wzi router_009 (
		.sink_ready         (matmul_afu_pgm_ram_s1_agent_rp_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (matmul_afu_pgm_ram_s1_agent_rp_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (matmul_afu_pgm_ram_s1_agent_rp_data),                                     //   input,  width = 179,          .data
		.sink_startofpacket (matmul_afu_pgm_ram_s1_agent_rp_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_pgm_ram_s1_agent_rp_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                                                     //  output,  width = 179,          .data
		.src_channel        (router_009_src_channel),                                                  //  output,    width = 9,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                (1),
		.PKT_DEST_ID_H             (156),
		.PKT_DEST_ID_L             (154),
		.PKT_SRC_ID_H              (153),
		.PKT_SRC_ID_L              (151),
		.PKT_BYTE_CNT_H            (133),
		.PKT_BYTE_CNT_L            (126),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (121),
		.PKT_TRANS_WRITE           (122),
		.MAX_OUTSTANDING_RESPONSES (26),
		.PIPELINED                 (0),
		.ST_DATA_W                 (179),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) matmul_afu_csr_bridge_master_limiter (
		.clk                    (matmul_afu_dma_clock_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset                  (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                           //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                           //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                            //   input,  width = 179,          .data
		.cmd_sink_channel       (router_src_channel),                                         //   input,    width = 9,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (matmul_afu_csr_bridge_master_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (matmul_afu_csr_bridge_master_limiter_cmd_src_data),          //  output,  width = 179,          .data
		.cmd_src_channel        (matmul_afu_csr_bridge_master_limiter_cmd_src_channel),       //  output,    width = 9,          .channel
		.cmd_src_startofpacket  (matmul_afu_csr_bridge_master_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (matmul_afu_csr_bridge_master_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (matmul_afu_csr_bridge_master_limiter_cmd_src_valid),         //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                         //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                         //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                       //   input,    width = 9,          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                          //   input,  width = 179,          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (matmul_afu_csr_bridge_master_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (matmul_afu_csr_bridge_master_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (matmul_afu_csr_bridge_master_limiter_rsp_src_data),          //  output,  width = 179,          .data
		.rsp_src_channel        (matmul_afu_csr_bridge_master_limiter_rsp_src_channel),       //  output,    width = 9,          .channel
		.rsp_src_startofpacket  (matmul_afu_csr_bridge_master_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (matmul_afu_csr_bridge_master_limiter_rsp_src_endofpacket)    //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_burst_adapter_191_qryo62a #(
		.PKT_ADDR_H                (83),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (113),
		.PKT_BYTE_CNT_H            (97),
		.PKT_BYTE_CNT_L            (90),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (108),
		.PKT_BURST_SIZE_L          (106),
		.PKT_BURST_TYPE_H          (110),
		.PKT_BURST_TYPE_L          (109),
		.PKT_BURSTWRAP_H           (105),
		.PKT_BURSTWRAP_L           (98),
		.PKT_TRANS_COMPRESSED_READ (84),
		.PKT_TRANS_WRITE           (86),
		.PKT_TRANS_READ            (87),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (92),
		.OUT_BURSTWRAP_H           (105),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (255),
		.BURSTWRAP_CONST_VALUE     (255),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) matmul_afu_start_matmul_s1_burst_adapter (
		.clk                   (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       cr0.clk
		.reset                 (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (matmul_afu_start_matmul_s1_cmd_width_adapter_src_valid),                  //   input,    width = 1,     sink0.valid
		.sink0_data            (matmul_afu_start_matmul_s1_cmd_width_adapter_src_data),                   //   input,  width = 143,          .data
		.sink0_channel         (matmul_afu_start_matmul_s1_cmd_width_adapter_src_channel),                //   input,    width = 9,          .channel
		.sink0_startofpacket   (matmul_afu_start_matmul_s1_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (matmul_afu_start_matmul_s1_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink0_ready           (matmul_afu_start_matmul_s1_cmd_width_adapter_src_ready),                  //  output,    width = 1,          .ready
		.source0_valid         (matmul_afu_start_matmul_s1_burst_adapter_source0_valid),                  //  output,    width = 1,   source0.valid
		.source0_data          (matmul_afu_start_matmul_s1_burst_adapter_source0_data),                   //  output,  width = 143,          .data
		.source0_channel       (matmul_afu_start_matmul_s1_burst_adapter_source0_channel),                //  output,    width = 9,          .channel
		.source0_startofpacket (matmul_afu_start_matmul_s1_burst_adapter_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (matmul_afu_start_matmul_s1_burst_adapter_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.source0_ready         (matmul_afu_start_matmul_s1_burst_adapter_source0_ready)                   //   input,    width = 1,          .ready
	);

	matmul_afu_system_fixed_altera_merlin_burst_adapter_191_qryo62a #(
		.PKT_ADDR_H                (83),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (113),
		.PKT_BYTE_CNT_H            (97),
		.PKT_BYTE_CNT_L            (90),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (108),
		.PKT_BURST_SIZE_L          (106),
		.PKT_BURST_TYPE_H          (110),
		.PKT_BURST_TYPE_L          (109),
		.PKT_BURSTWRAP_H           (105),
		.PKT_BURSTWRAP_L           (98),
		.PKT_TRANS_COMPRESSED_READ (84),
		.PKT_TRANS_WRITE           (86),
		.PKT_TRANS_READ            (87),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (92),
		.OUT_BURSTWRAP_H           (105),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (255),
		.BURSTWRAP_CONST_VALUE     (255),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) matmul_afu_matmul_ready_s1_burst_adapter (
		.clk                   (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       cr0.clk
		.reset                 (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_valid),                  //   input,    width = 1,     sink0.valid
		.sink0_data            (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_data),                   //   input,  width = 143,          .data
		.sink0_channel         (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_channel),                //   input,    width = 9,          .channel
		.sink0_startofpacket   (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink0_ready           (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_ready),                  //  output,    width = 1,          .ready
		.source0_valid         (matmul_afu_matmul_ready_s1_burst_adapter_source0_valid),                  //  output,    width = 1,   source0.valid
		.source0_data          (matmul_afu_matmul_ready_s1_burst_adapter_source0_data),                   //  output,  width = 143,          .data
		.source0_channel       (matmul_afu_matmul_ready_s1_burst_adapter_source0_channel),                //  output,    width = 9,          .channel
		.source0_startofpacket (matmul_afu_matmul_ready_s1_burst_adapter_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (matmul_afu_matmul_ready_s1_burst_adapter_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.source0_ready         (matmul_afu_matmul_ready_s1_burst_adapter_source0_ready)                   //   input,    width = 1,          .ready
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_zropqmi cmd_demux (
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                        //   input,    width = 9,          .channel
		.sink_data          (limiter_pipeline_source0_data),                           //   input,  width = 179,          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                    //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                    //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                     //  output,  width = 179,          .data
		.src0_channel       (cmd_demux_src0_channel),                                  //  output,    width = 9,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                              //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                    //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                    //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                     //  output,  width = 179,          .data
		.src1_channel       (cmd_demux_src1_channel),                                  //  output,    width = 9,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                              //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                    //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                    //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                                     //  output,  width = 179,          .data
		.src2_channel       (cmd_demux_src2_channel),                                  //  output,    width = 9,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                              //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                    //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                    //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_src3_data),                                     //  output,  width = 179,          .data
		.src3_channel       (cmd_demux_src3_channel),                                  //  output,    width = 9,          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                              //  output,    width = 1,          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                    //   input,    width = 1,      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                    //  output,    width = 1,          .valid
		.src4_data          (cmd_demux_src4_data),                                     //  output,  width = 179,          .data
		.src4_channel       (cmd_demux_src4_channel),                                  //  output,    width = 9,          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                              //  output,    width = 1,          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                    //   input,    width = 1,      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                    //  output,    width = 1,          .valid
		.src5_data          (cmd_demux_src5_data),                                     //  output,  width = 179,          .data
		.src5_channel       (cmd_demux_src5_channel),                                  //  output,    width = 9,          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                              //  output,    width = 1,          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                    //   input,    width = 1,      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                    //  output,    width = 1,          .valid
		.src6_data          (cmd_demux_src6_data),                                     //  output,  width = 179,          .data
		.src6_channel       (cmd_demux_src6_channel),                                  //  output,    width = 9,          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                              //  output,    width = 1,          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                    //   input,    width = 1,      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                    //  output,    width = 1,          .valid
		.src7_data          (cmd_demux_src7_data),                                     //  output,  width = 179,          .data
		.src7_channel       (cmd_demux_src7_channel),                                  //  output,    width = 9,          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                              //  output,    width = 1,          .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                    //   input,    width = 1,      src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                    //  output,    width = 1,          .valid
		.src8_data          (cmd_demux_src8_data),                                     //  output,  width = 179,          .data
		.src8_channel       (cmd_demux_src8_channel),                                  //  output,    width = 9,          .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_3oqb4la cmd_mux (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                        //  output,  width = 179,          .data
		.src_channel         (cmd_mux_src_channel),                                     //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                  //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src0_data),                                     //   input,  width = 179,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_3oqb4la cmd_mux_001 (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                    //  output,  width = 179,          .data
		.src_channel         (cmd_mux_001_src_channel),                                 //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                  //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src1_data),                                     //   input,  width = 179,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_3oqb4la cmd_mux_002 (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                    //  output,  width = 179,          .data
		.src_channel         (cmd_mux_002_src_channel),                                 //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                  //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src2_data),                                     //   input,  width = 179,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_3oqb4la cmd_mux_003 (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                    //  output,  width = 179,          .data
		.src_channel         (cmd_mux_003_src_channel),                                 //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                  //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src3_data),                                     //   input,  width = 179,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_3oqb4la cmd_mux_004 (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                    //  output,  width = 179,          .data
		.src_channel         (cmd_mux_004_src_channel),                                 //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                  //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src4_data),                                     //   input,  width = 179,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_3oqb4la cmd_mux_005 (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                                    //  output,  width = 179,          .data
		.src_channel         (cmd_mux_005_src_channel),                                 //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                  //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src5_data),                                     //   input,  width = 179,          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_3oqb4la cmd_mux_006 (
		.clk                 (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                                                    //  output,  width = 179,          .data
		.src_channel         (cmd_mux_006_src_channel),                                                 //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (async_fifo_out_ready),                                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (async_fifo_out_valid),                                                    //   input,    width = 1,          .valid
		.sink0_channel       (async_fifo_out_channel),                                                  //   input,    width = 9,          .channel
		.sink0_data          (async_fifo_out_data),                                                     //   input,  width = 179,          .data
		.sink0_startofpacket (async_fifo_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (async_fifo_out_endofpacket)                                               //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_3oqb4la cmd_mux_007 (
		.clk                 (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                                                    //  output,  width = 179,          .data
		.src_channel         (cmd_mux_007_src_channel),                                                 //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (async_fifo_001_out_ready),                                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (async_fifo_001_out_valid),                                                //   input,    width = 1,          .valid
		.sink0_channel       (async_fifo_001_out_channel),                                              //   input,    width = 9,          .channel
		.sink0_data          (async_fifo_001_out_data),                                                 //   input,  width = 179,          .data
		.sink0_startofpacket (async_fifo_001_out_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (async_fifo_001_out_endofpacket)                                           //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_3oqb4la cmd_mux_008 (
		.clk                 (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_008_src_data),                                                    //  output,  width = 179,          .data
		.src_channel         (cmd_mux_008_src_channel),                                                 //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (async_fifo_002_out_ready),                                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (async_fifo_002_out_valid),                                                //   input,    width = 1,          .valid
		.sink0_channel       (async_fifo_002_out_channel),                                              //   input,    width = 9,          .channel
		.sink0_data          (async_fifo_002_out_data),                                                 //   input,  width = 179,          .data
		.sink0_startofpacket (async_fifo_002_out_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (async_fifo_002_out_endofpacket)                                           //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_i3hjgky rsp_demux (
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                  //   input,    width = 9,          .channel
		.sink_data          (router_001_src_data),                                     //   input,  width = 179,          .data
		.sink_startofpacket (router_001_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                     //  output,  width = 179,          .data
		.src0_channel       (rsp_demux_src0_channel),                                  //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_i3hjgky rsp_demux_001 (
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                  //   input,    width = 9,          .channel
		.sink_data          (router_002_src_data),                                     //   input,  width = 179,          .data
		.sink_startofpacket (router_002_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                 //  output,  width = 179,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                              //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_i3hjgky rsp_demux_002 (
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                  //   input,    width = 9,          .channel
		.sink_data          (router_003_src_data),                                     //   input,  width = 179,          .data
		.sink_startofpacket (router_003_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                 //  output,  width = 179,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                              //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_i3hjgky rsp_demux_003 (
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                                  //   input,    width = 9,          .channel
		.sink_data          (router_004_src_data),                                     //   input,  width = 179,          .data
		.sink_startofpacket (router_004_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                 //  output,  width = 179,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                              //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_i3hjgky rsp_demux_004 (
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                                  //   input,    width = 9,          .channel
		.sink_data          (router_005_src_data),                                     //   input,  width = 179,          .data
		.sink_startofpacket (router_005_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                                 //  output,  width = 179,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                              //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_i3hjgky rsp_demux_005 (
		.clk                (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                                  //   input,    width = 9,          .channel
		.sink_data          (router_006_src_data),                                     //   input,  width = 179,          .data
		.sink_startofpacket (router_006_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                                 //  output,  width = 179,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                              //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_i3hjgky rsp_demux_006 (
		.clk                (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (matmul_afu_start_matmul_s1_rsp_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (matmul_afu_start_matmul_s1_rsp_width_adapter_src_channel),                //   input,    width = 9,          .channel
		.sink_data          (matmul_afu_start_matmul_s1_rsp_width_adapter_src_data),                   //   input,  width = 179,          .data
		.sink_startofpacket (matmul_afu_start_matmul_s1_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_start_matmul_s1_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (matmul_afu_start_matmul_s1_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                                                 //  output,  width = 179,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                              //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_i3hjgky rsp_demux_007 (
		.clk                (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_channel),                //   input,    width = 9,          .channel
		.sink_data          (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_data),                   //   input,  width = 179,          .data
		.sink_startofpacket (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                                                 //  output,  width = 179,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                              //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_demultiplexer_191_i3hjgky rsp_demux_008 (
		.clk                (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                                                  //   input,    width = 9,          .channel
		.sink_data          (router_009_src_data),                                                     //   input,  width = 179,          .data
		.sink_startofpacket (router_009_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                                                    //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_008_src0_data),                                                 //  output,  width = 179,          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                              //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_multiplexer_191_6sqw4ly rsp_mux (
		.clk                 (matmul_afu_dma_clock_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset               (matmul_afu_csr_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                       //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                        //  output,  width = 179,          .data
		.src_channel         (rsp_mux_src_channel),                                     //  output,    width = 9,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                  //   input,    width = 9,          .channel
		.sink0_data          (rsp_demux_src0_data),                                     //   input,  width = 179,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                              //   input,    width = 9,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                 //   input,  width = 179,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                              //   input,    width = 9,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                 //   input,  width = 179,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                              //   input,    width = 9,          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                 //   input,  width = 179,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                              //   input,    width = 9,          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                 //   input,  width = 179,          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                //  output,    width = 1,     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                //   input,    width = 1,          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                              //   input,    width = 9,          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                 //   input,  width = 179,          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink6_ready         (async_fifo_003_out_ready),                                //  output,    width = 1,     sink6.ready
		.sink6_valid         (async_fifo_003_out_valid),                                //   input,    width = 1,          .valid
		.sink6_channel       (async_fifo_003_out_channel),                              //   input,    width = 9,          .channel
		.sink6_data          (async_fifo_003_out_data),                                 //   input,  width = 179,          .data
		.sink6_startofpacket (async_fifo_003_out_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink6_endofpacket   (async_fifo_003_out_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink7_ready         (async_fifo_004_out_ready),                                //  output,    width = 1,     sink7.ready
		.sink7_valid         (async_fifo_004_out_valid),                                //   input,    width = 1,          .valid
		.sink7_channel       (async_fifo_004_out_channel),                              //   input,    width = 9,          .channel
		.sink7_data          (async_fifo_004_out_data),                                 //   input,  width = 179,          .data
		.sink7_startofpacket (async_fifo_004_out_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink7_endofpacket   (async_fifo_004_out_endofpacket),                          //   input,    width = 1,          .endofpacket
		.sink8_ready         (async_fifo_005_out_ready),                                //  output,    width = 1,     sink8.ready
		.sink8_valid         (async_fifo_005_out_valid),                                //   input,    width = 1,          .valid
		.sink8_channel       (async_fifo_005_out_channel),                              //   input,    width = 9,          .channel
		.sink8_data          (async_fifo_005_out_data),                                 //   input,  width = 179,          .data
		.sink8_startofpacket (async_fifo_005_out_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink8_endofpacket   (async_fifo_005_out_endofpacket)                           //   input,    width = 1,          .endofpacket
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_mejykna #(
		.IN_PKT_ADDR_H                 (83),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (97),
		.IN_PKT_BYTE_CNT_L             (90),
		.IN_PKT_TRANS_COMPRESSED_READ  (84),
		.IN_PKT_TRANS_WRITE            (86),
		.IN_PKT_BURSTWRAP_H            (105),
		.IN_PKT_BURSTWRAP_L            (98),
		.IN_PKT_BURST_SIZE_H           (108),
		.IN_PKT_BURST_SIZE_L           (106),
		.IN_PKT_RESPONSE_STATUS_H      (130),
		.IN_PKT_RESPONSE_STATUS_L      (129),
		.IN_PKT_TRANS_EXCLUSIVE        (89),
		.IN_PKT_BURST_TYPE_H           (110),
		.IN_PKT_BURST_TYPE_L           (109),
		.IN_PKT_ORI_BURST_SIZE_L       (131),
		.IN_PKT_ORI_BURST_SIZE_H       (133),
		.IN_ST_DATA_W                  (143),
		.OUT_PKT_ADDR_H                (119),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (133),
		.OUT_PKT_BYTE_CNT_L            (126),
		.OUT_PKT_TRANS_COMPRESSED_READ (120),
		.OUT_PKT_BURST_SIZE_H          (144),
		.OUT_PKT_BURST_SIZE_L          (142),
		.OUT_PKT_RESPONSE_STATUS_H     (166),
		.OUT_PKT_RESPONSE_STATUS_L     (165),
		.OUT_PKT_TRANS_EXCLUSIVE       (125),
		.OUT_PKT_BURST_TYPE_H          (146),
		.OUT_PKT_BURST_TYPE_L          (145),
		.OUT_PKT_ORI_BURST_SIZE_L      (167),
		.OUT_PKT_ORI_BURST_SIZE_H      (169),
		.OUT_ST_DATA_W                 (179),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) matmul_afu_start_matmul_s1_rsp_width_adapter (
		.clk                  (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_007_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (router_007_src_channel),                                                  //   input,    width = 9,          .channel
		.in_startofpacket     (router_007_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (router_007_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (router_007_src_data),                                                     //   input,  width = 143,          .data
		.out_endofpacket      (matmul_afu_start_matmul_s1_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (matmul_afu_start_matmul_s1_rsp_width_adapter_src_data),                   //  output,  width = 179,          .data
		.out_channel          (matmul_afu_start_matmul_s1_rsp_width_adapter_src_channel),                //  output,    width = 9,          .channel
		.out_valid            (matmul_afu_start_matmul_s1_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (matmul_afu_start_matmul_s1_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (matmul_afu_start_matmul_s1_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_mejykna #(
		.IN_PKT_ADDR_H                 (83),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (97),
		.IN_PKT_BYTE_CNT_L             (90),
		.IN_PKT_TRANS_COMPRESSED_READ  (84),
		.IN_PKT_TRANS_WRITE            (86),
		.IN_PKT_BURSTWRAP_H            (105),
		.IN_PKT_BURSTWRAP_L            (98),
		.IN_PKT_BURST_SIZE_H           (108),
		.IN_PKT_BURST_SIZE_L           (106),
		.IN_PKT_RESPONSE_STATUS_H      (130),
		.IN_PKT_RESPONSE_STATUS_L      (129),
		.IN_PKT_TRANS_EXCLUSIVE        (89),
		.IN_PKT_BURST_TYPE_H           (110),
		.IN_PKT_BURST_TYPE_L           (109),
		.IN_PKT_ORI_BURST_SIZE_L       (131),
		.IN_PKT_ORI_BURST_SIZE_H       (133),
		.IN_ST_DATA_W                  (143),
		.OUT_PKT_ADDR_H                (119),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (133),
		.OUT_PKT_BYTE_CNT_L            (126),
		.OUT_PKT_TRANS_COMPRESSED_READ (120),
		.OUT_PKT_BURST_SIZE_H          (144),
		.OUT_PKT_BURST_SIZE_L          (142),
		.OUT_PKT_RESPONSE_STATUS_H     (166),
		.OUT_PKT_RESPONSE_STATUS_L     (165),
		.OUT_PKT_TRANS_EXCLUSIVE       (125),
		.OUT_PKT_BURST_TYPE_H          (146),
		.OUT_PKT_BURST_TYPE_L          (145),
		.OUT_PKT_ORI_BURST_SIZE_L      (167),
		.OUT_PKT_ORI_BURST_SIZE_H      (169),
		.OUT_ST_DATA_W                 (179),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) matmul_afu_matmul_ready_s1_rsp_width_adapter (
		.clk                  (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_008_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (router_008_src_channel),                                                  //   input,    width = 9,          .channel
		.in_startofpacket     (router_008_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (router_008_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (router_008_src_data),                                                     //   input,  width = 143,          .data
		.out_endofpacket      (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_data),                   //  output,  width = 179,          .data
		.out_channel          (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_channel),                //  output,    width = 9,          .channel
		.out_valid            (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (matmul_afu_matmul_ready_s1_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_y2s3wda #(
		.IN_PKT_ADDR_H                 (119),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (133),
		.IN_PKT_BYTE_CNT_L             (126),
		.IN_PKT_TRANS_COMPRESSED_READ  (120),
		.IN_PKT_TRANS_WRITE            (122),
		.IN_PKT_BURSTWRAP_H            (141),
		.IN_PKT_BURSTWRAP_L            (134),
		.IN_PKT_BURST_SIZE_H           (144),
		.IN_PKT_BURST_SIZE_L           (142),
		.IN_PKT_RESPONSE_STATUS_H      (166),
		.IN_PKT_RESPONSE_STATUS_L      (165),
		.IN_PKT_TRANS_EXCLUSIVE        (125),
		.IN_PKT_BURST_TYPE_H           (146),
		.IN_PKT_BURST_TYPE_L           (145),
		.IN_PKT_ORI_BURST_SIZE_L       (167),
		.IN_PKT_ORI_BURST_SIZE_H       (169),
		.IN_ST_DATA_W                  (179),
		.OUT_PKT_ADDR_H                (83),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (97),
		.OUT_PKT_BYTE_CNT_L            (90),
		.OUT_PKT_TRANS_COMPRESSED_READ (84),
		.OUT_PKT_BURST_SIZE_H          (108),
		.OUT_PKT_BURST_SIZE_L          (106),
		.OUT_PKT_RESPONSE_STATUS_H     (130),
		.OUT_PKT_RESPONSE_STATUS_L     (129),
		.OUT_PKT_TRANS_EXCLUSIVE       (89),
		.OUT_PKT_BURST_TYPE_H          (110),
		.OUT_PKT_BURST_TYPE_L          (109),
		.OUT_PKT_ORI_BURST_SIZE_L      (131),
		.OUT_PKT_ORI_BURST_SIZE_H      (133),
		.OUT_ST_DATA_W                 (143),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) matmul_afu_start_matmul_s1_cmd_width_adapter (
		.clk                  (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_006_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_006_src_channel),                                                 //   input,    width = 9,          .channel
		.in_startofpacket     (cmd_mux_006_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_006_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_006_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_mux_006_src_data),                                                    //   input,  width = 179,          .data
		.out_endofpacket      (matmul_afu_start_matmul_s1_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (matmul_afu_start_matmul_s1_cmd_width_adapter_src_data),                   //  output,  width = 143,          .data
		.out_channel          (matmul_afu_start_matmul_s1_cmd_width_adapter_src_channel),                //  output,    width = 9,          .channel
		.out_valid            (matmul_afu_start_matmul_s1_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (matmul_afu_start_matmul_s1_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (matmul_afu_start_matmul_s1_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	matmul_afu_system_fixed_altera_merlin_width_adapter_191_y2s3wda #(
		.IN_PKT_ADDR_H                 (119),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (133),
		.IN_PKT_BYTE_CNT_L             (126),
		.IN_PKT_TRANS_COMPRESSED_READ  (120),
		.IN_PKT_TRANS_WRITE            (122),
		.IN_PKT_BURSTWRAP_H            (141),
		.IN_PKT_BURSTWRAP_L            (134),
		.IN_PKT_BURST_SIZE_H           (144),
		.IN_PKT_BURST_SIZE_L           (142),
		.IN_PKT_RESPONSE_STATUS_H      (166),
		.IN_PKT_RESPONSE_STATUS_L      (165),
		.IN_PKT_TRANS_EXCLUSIVE        (125),
		.IN_PKT_BURST_TYPE_H           (146),
		.IN_PKT_BURST_TYPE_L           (145),
		.IN_PKT_ORI_BURST_SIZE_L       (167),
		.IN_PKT_ORI_BURST_SIZE_H       (169),
		.IN_ST_DATA_W                  (179),
		.OUT_PKT_ADDR_H                (83),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (97),
		.OUT_PKT_BYTE_CNT_L            (90),
		.OUT_PKT_TRANS_COMPRESSED_READ (84),
		.OUT_PKT_BURST_SIZE_H          (108),
		.OUT_PKT_BURST_SIZE_L          (106),
		.OUT_PKT_RESPONSE_STATUS_H     (130),
		.OUT_PKT_RESPONSE_STATUS_L     (129),
		.OUT_PKT_TRANS_EXCLUSIVE       (89),
		.OUT_PKT_BURST_TYPE_H          (110),
		.OUT_PKT_BURST_TYPE_L          (109),
		.OUT_PKT_ORI_BURST_SIZE_L      (131),
		.OUT_PKT_ORI_BURST_SIZE_H      (133),
		.OUT_ST_DATA_W                 (143),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) matmul_afu_matmul_ready_s1_cmd_width_adapter (
		.clk                  (matmul_afu_matmul_clock_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                (matmul_afu_start_matmul_s1_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                                                 //   input,    width = 9,          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_mux_007_src_data),                                                    //   input,  width = 179,          .data
		.out_endofpacket      (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_data),                   //  output,  width = 143,          .data
		.out_channel          (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_channel),                //  output,    width = 9,          .channel
		.out_valid            (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (matmul_afu_matmul_ready_s1_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (179),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (9),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo (
		.in_clk             (matmul_afu_dma_clock_out_clk_clk),                                                      //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_matmul_clock_out_clk_clk),                                                   //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (cmd_demux_src6_data),                                                                   //   input,  width = 179,            in.data
		.in_valid           (cmd_demux_src6_valid),                                                                  //   input,    width = 1,              .valid
		.in_ready           (cmd_demux_src6_ready),                                                                  //  output,    width = 1,              .ready
		.in_startofpacket   (cmd_demux_src6_startofpacket),                                                          //   input,    width = 1,              .startofpacket
		.in_endofpacket     (cmd_demux_src6_endofpacket),                                                            //   input,    width = 1,              .endofpacket
		.in_channel         (cmd_demux_src6_channel),                                                                //   input,    width = 9,              .channel
		.out_data           (async_fifo_out_data),                                                                   //  output,  width = 179,           out.data
		.out_valid          (async_fifo_out_valid),                                                                  //  output,    width = 1,              .valid
		.out_ready          (async_fifo_out_ready),                                                                  //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_out_startofpacket),                                                          //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_out_endofpacket),                                                            //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_out_channel),                                                                //  output,    width = 9,              .channel
		.in_csr_address     (1'b0),                                                                                  // (terminated),                             
		.in_csr_read        (1'b0),                                                                                  // (terminated),                             
		.in_csr_write       (1'b0),                                                                                  // (terminated),                             
		.in_csr_readdata    (),                                                                                      // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.out_csr_address    (1'b0),                                                                                  // (terminated),                             
		.out_csr_read       (1'b0),                                                                                  // (terminated),                             
		.out_csr_write      (1'b0),                                                                                  // (terminated),                             
		.out_csr_readdata   (),                                                                                      // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.in_empty           (1'b0),                                                                                  // (terminated),                             
		.out_empty          (),                                                                                      // (terminated),                             
		.in_error           (1'b0),                                                                                  // (terminated),                             
		.out_error          (),                                                                                      // (terminated),                             
		.space_avail_data   (),                                                                                      // (terminated),                             
		.almost_full_valid  (),                                                                                      // (terminated),                             
		.almost_full_data   (),                                                                                      // (terminated),                             
		.almost_empty_valid (),                                                                                      // (terminated),                             
		.almost_empty_data  ()                                                                                       // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (179),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (9),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_001 (
		.in_clk             (matmul_afu_dma_clock_out_clk_clk),                                                      //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_matmul_clock_out_clk_clk),                                                   //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (cmd_demux_src7_data),                                                                   //   input,  width = 179,            in.data
		.in_valid           (cmd_demux_src7_valid),                                                                  //   input,    width = 1,              .valid
		.in_ready           (cmd_demux_src7_ready),                                                                  //  output,    width = 1,              .ready
		.in_startofpacket   (cmd_demux_src7_startofpacket),                                                          //   input,    width = 1,              .startofpacket
		.in_endofpacket     (cmd_demux_src7_endofpacket),                                                            //   input,    width = 1,              .endofpacket
		.in_channel         (cmd_demux_src7_channel),                                                                //   input,    width = 9,              .channel
		.out_data           (async_fifo_001_out_data),                                                               //  output,  width = 179,           out.data
		.out_valid          (async_fifo_001_out_valid),                                                              //  output,    width = 1,              .valid
		.out_ready          (async_fifo_001_out_ready),                                                              //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_001_out_startofpacket),                                                      //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_001_out_endofpacket),                                                        //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_001_out_channel),                                                            //  output,    width = 9,              .channel
		.in_csr_address     (1'b0),                                                                                  // (terminated),                             
		.in_csr_read        (1'b0),                                                                                  // (terminated),                             
		.in_csr_write       (1'b0),                                                                                  // (terminated),                             
		.in_csr_readdata    (),                                                                                      // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.out_csr_address    (1'b0),                                                                                  // (terminated),                             
		.out_csr_read       (1'b0),                                                                                  // (terminated),                             
		.out_csr_write      (1'b0),                                                                                  // (terminated),                             
		.out_csr_readdata   (),                                                                                      // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.in_empty           (1'b0),                                                                                  // (terminated),                             
		.out_empty          (),                                                                                      // (terminated),                             
		.in_error           (1'b0),                                                                                  // (terminated),                             
		.out_error          (),                                                                                      // (terminated),                             
		.space_avail_data   (),                                                                                      // (terminated),                             
		.almost_full_valid  (),                                                                                      // (terminated),                             
		.almost_full_data   (),                                                                                      // (terminated),                             
		.almost_empty_valid (),                                                                                      // (terminated),                             
		.almost_empty_data  ()                                                                                       // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (179),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (9),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_002 (
		.in_clk             (matmul_afu_dma_clock_out_clk_clk),                                                      //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_matmul_clock_out_clk_clk),                                                   //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (cmd_demux_src8_data),                                                                   //   input,  width = 179,            in.data
		.in_valid           (cmd_demux_src8_valid),                                                                  //   input,    width = 1,              .valid
		.in_ready           (cmd_demux_src8_ready),                                                                  //  output,    width = 1,              .ready
		.in_startofpacket   (cmd_demux_src8_startofpacket),                                                          //   input,    width = 1,              .startofpacket
		.in_endofpacket     (cmd_demux_src8_endofpacket),                                                            //   input,    width = 1,              .endofpacket
		.in_channel         (cmd_demux_src8_channel),                                                                //   input,    width = 9,              .channel
		.out_data           (async_fifo_002_out_data),                                                               //  output,  width = 179,           out.data
		.out_valid          (async_fifo_002_out_valid),                                                              //  output,    width = 1,              .valid
		.out_ready          (async_fifo_002_out_ready),                                                              //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_002_out_startofpacket),                                                      //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_002_out_endofpacket),                                                        //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_002_out_channel),                                                            //  output,    width = 9,              .channel
		.in_csr_address     (1'b0),                                                                                  // (terminated),                             
		.in_csr_read        (1'b0),                                                                                  // (terminated),                             
		.in_csr_write       (1'b0),                                                                                  // (terminated),                             
		.in_csr_readdata    (),                                                                                      // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.out_csr_address    (1'b0),                                                                                  // (terminated),                             
		.out_csr_read       (1'b0),                                                                                  // (terminated),                             
		.out_csr_write      (1'b0),                                                                                  // (terminated),                             
		.out_csr_readdata   (),                                                                                      // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.in_empty           (1'b0),                                                                                  // (terminated),                             
		.out_empty          (),                                                                                      // (terminated),                             
		.in_error           (1'b0),                                                                                  // (terminated),                             
		.out_error          (),                                                                                      // (terminated),                             
		.space_avail_data   (),                                                                                      // (terminated),                             
		.almost_full_valid  (),                                                                                      // (terminated),                             
		.almost_full_data   (),                                                                                      // (terminated),                             
		.almost_empty_valid (),                                                                                      // (terminated),                             
		.almost_empty_data  ()                                                                                       // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (179),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (9),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_003 (
		.in_clk             (matmul_afu_matmul_clock_out_clk_clk),                                                   //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_dma_clock_out_clk_clk),                                                      //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (rsp_demux_006_src0_data),                                                               //   input,  width = 179,            in.data
		.in_valid           (rsp_demux_006_src0_valid),                                                              //   input,    width = 1,              .valid
		.in_ready           (rsp_demux_006_src0_ready),                                                              //  output,    width = 1,              .ready
		.in_startofpacket   (rsp_demux_006_src0_startofpacket),                                                      //   input,    width = 1,              .startofpacket
		.in_endofpacket     (rsp_demux_006_src0_endofpacket),                                                        //   input,    width = 1,              .endofpacket
		.in_channel         (rsp_demux_006_src0_channel),                                                            //   input,    width = 9,              .channel
		.out_data           (async_fifo_003_out_data),                                                               //  output,  width = 179,           out.data
		.out_valid          (async_fifo_003_out_valid),                                                              //  output,    width = 1,              .valid
		.out_ready          (async_fifo_003_out_ready),                                                              //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_003_out_startofpacket),                                                      //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_003_out_endofpacket),                                                        //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_003_out_channel),                                                            //  output,    width = 9,              .channel
		.in_csr_address     (1'b0),                                                                                  // (terminated),                             
		.in_csr_read        (1'b0),                                                                                  // (terminated),                             
		.in_csr_write       (1'b0),                                                                                  // (terminated),                             
		.in_csr_readdata    (),                                                                                      // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.out_csr_address    (1'b0),                                                                                  // (terminated),                             
		.out_csr_read       (1'b0),                                                                                  // (terminated),                             
		.out_csr_write      (1'b0),                                                                                  // (terminated),                             
		.out_csr_readdata   (),                                                                                      // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.in_empty           (1'b0),                                                                                  // (terminated),                             
		.out_empty          (),                                                                                      // (terminated),                             
		.in_error           (1'b0),                                                                                  // (terminated),                             
		.out_error          (),                                                                                      // (terminated),                             
		.space_avail_data   (),                                                                                      // (terminated),                             
		.almost_full_valid  (),                                                                                      // (terminated),                             
		.almost_full_data   (),                                                                                      // (terminated),                             
		.almost_empty_valid (),                                                                                      // (terminated),                             
		.almost_empty_data  ()                                                                                       // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (179),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (9),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_004 (
		.in_clk             (matmul_afu_matmul_clock_out_clk_clk),                                                   //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_dma_clock_out_clk_clk),                                                      //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (rsp_demux_007_src0_data),                                                               //   input,  width = 179,            in.data
		.in_valid           (rsp_demux_007_src0_valid),                                                              //   input,    width = 1,              .valid
		.in_ready           (rsp_demux_007_src0_ready),                                                              //  output,    width = 1,              .ready
		.in_startofpacket   (rsp_demux_007_src0_startofpacket),                                                      //   input,    width = 1,              .startofpacket
		.in_endofpacket     (rsp_demux_007_src0_endofpacket),                                                        //   input,    width = 1,              .endofpacket
		.in_channel         (rsp_demux_007_src0_channel),                                                            //   input,    width = 9,              .channel
		.out_data           (async_fifo_004_out_data),                                                               //  output,  width = 179,           out.data
		.out_valid          (async_fifo_004_out_valid),                                                              //  output,    width = 1,              .valid
		.out_ready          (async_fifo_004_out_ready),                                                              //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_004_out_startofpacket),                                                      //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_004_out_endofpacket),                                                        //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_004_out_channel),                                                            //  output,    width = 9,              .channel
		.in_csr_address     (1'b0),                                                                                  // (terminated),                             
		.in_csr_read        (1'b0),                                                                                  // (terminated),                             
		.in_csr_write       (1'b0),                                                                                  // (terminated),                             
		.in_csr_readdata    (),                                                                                      // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.out_csr_address    (1'b0),                                                                                  // (terminated),                             
		.out_csr_read       (1'b0),                                                                                  // (terminated),                             
		.out_csr_write      (1'b0),                                                                                  // (terminated),                             
		.out_csr_readdata   (),                                                                                      // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.in_empty           (1'b0),                                                                                  // (terminated),                             
		.out_empty          (),                                                                                      // (terminated),                             
		.in_error           (1'b0),                                                                                  // (terminated),                             
		.out_error          (),                                                                                      // (terminated),                             
		.space_avail_data   (),                                                                                      // (terminated),                             
		.almost_full_valid  (),                                                                                      // (terminated),                             
		.almost_full_data   (),                                                                                      // (terminated),                             
		.almost_empty_valid (),                                                                                      // (terminated),                             
		.almost_empty_data  ()                                                                                       // (terminated),                             
	);

	matmul_afu_system_fixed_altera_avalon_dc_fifo_191_uyqms3q #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (179),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (9),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3),
		.SYNC_RESET         (1)
	) async_fifo_005 (
		.in_clk             (matmul_afu_matmul_clock_out_clk_clk),                                                   //   input,    width = 1,        in_clk.clk
		.in_reset_n         (~matmul_afu_start_matmul_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,  in_clk_reset.reset_n
		.out_clk            (matmul_afu_dma_clock_out_clk_clk),                                                      //   input,    width = 1,       out_clk.clk
		.out_reset_n        (~matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset_n
		.in_data            (rsp_demux_008_src0_data),                                                               //   input,  width = 179,            in.data
		.in_valid           (rsp_demux_008_src0_valid),                                                              //   input,    width = 1,              .valid
		.in_ready           (rsp_demux_008_src0_ready),                                                              //  output,    width = 1,              .ready
		.in_startofpacket   (rsp_demux_008_src0_startofpacket),                                                      //   input,    width = 1,              .startofpacket
		.in_endofpacket     (rsp_demux_008_src0_endofpacket),                                                        //   input,    width = 1,              .endofpacket
		.in_channel         (rsp_demux_008_src0_channel),                                                            //   input,    width = 9,              .channel
		.out_data           (async_fifo_005_out_data),                                                               //  output,  width = 179,           out.data
		.out_valid          (async_fifo_005_out_valid),                                                              //  output,    width = 1,              .valid
		.out_ready          (async_fifo_005_out_ready),                                                              //   input,    width = 1,              .ready
		.out_startofpacket  (async_fifo_005_out_startofpacket),                                                      //  output,    width = 1,              .startofpacket
		.out_endofpacket    (async_fifo_005_out_endofpacket),                                                        //  output,    width = 1,              .endofpacket
		.out_channel        (async_fifo_005_out_channel),                                                            //  output,    width = 9,              .channel
		.in_csr_address     (1'b0),                                                                                  // (terminated),                             
		.in_csr_read        (1'b0),                                                                                  // (terminated),                             
		.in_csr_write       (1'b0),                                                                                  // (terminated),                             
		.in_csr_readdata    (),                                                                                      // (terminated),                             
		.in_csr_writedata   (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.out_csr_address    (1'b0),                                                                                  // (terminated),                             
		.out_csr_read       (1'b0),                                                                                  // (terminated),                             
		.out_csr_write      (1'b0),                                                                                  // (terminated),                             
		.out_csr_readdata   (),                                                                                      // (terminated),                             
		.out_csr_writedata  (32'b00000000000000000000000000000000),                                                  // (terminated),                             
		.in_empty           (1'b0),                                                                                  // (terminated),                             
		.out_empty          (),                                                                                      // (terminated),                             
		.in_error           (1'b0),                                                                                  // (terminated),                             
		.out_error          (),                                                                                      // (terminated),                             
		.space_avail_data   (),                                                                                      // (terminated),                             
		.almost_full_valid  (),                                                                                      // (terminated),                             
		.almost_full_data   (),                                                                                      // (terminated),                             
		.almost_empty_valid (),                                                                                      // (terminated),                             
		.almost_empty_data  ()                                                                                       // (terminated),                             
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (179),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (9),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) limiter_pipeline (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                                                     //   input,    width = 1,       cr0.clk
		.reset             (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (matmul_afu_csr_bridge_master_limiter_cmd_src_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (matmul_afu_csr_bridge_master_limiter_cmd_src_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (matmul_afu_csr_bridge_master_limiter_cmd_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (matmul_afu_csr_bridge_master_limiter_cmd_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (matmul_afu_csr_bridge_master_limiter_cmd_src_data),                                    //   input,  width = 179,          .data
		.in_channel        (matmul_afu_csr_bridge_master_limiter_cmd_src_channel),                                 //   input,    width = 9,          .channel
		.out_ready         (limiter_pipeline_source0_ready),                                                       //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                                                       //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                                                 //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                                                        //  output,  width = 179,          .data
		.out_channel       (limiter_pipeline_source0_channel),                                                     //  output,    width = 9,          .channel
		.in_empty          (1'b0),                                                                                 // (terminated),                         
		.out_empty         (),                                                                                     // (terminated),                         
		.out_error         (),                                                                                     // (terminated),                         
		.in_error          (1'b0)                                                                                  // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (179),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (9),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) limiter_pipeline_001 (
		.clk               (matmul_afu_dma_clock_out_clk_clk),                                                     //   input,    width = 1,       cr0.clk
		.reset             (matmul_afu_id_afu_afu_cfg_slave_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                                                    //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                                                    //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                                              //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_src_data),                                                                     //   input,  width = 179,          .data
		.in_channel        (rsp_mux_src_channel),                                                                  //   input,    width = 9,          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                                                   //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                                                   //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                                                    //  output,  width = 179,          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                                                 //  output,    width = 9,          .channel
		.in_empty          (1'b0),                                                                                 // (terminated),                         
		.out_empty         (),                                                                                     // (terminated),                         
		.out_error         (),                                                                                     // (terminated),                         
		.in_error          (1'b0)                                                                                  // (terminated),                         
	);

endmodule
