// mu_afu_matrix_unit.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module mu_afu_matrix_unit (
		input  wire [7:0]  avmm_a_csr_address_i,       //    avmm_a_csr.address
		input  wire        avmm_a_csr_chipselect_i,    //              .chipselect
		input  wire        avmm_a_csr_write_i,         //              .write
		input  wire [31:0] avmm_a_csr_writedata_i,     //              .writedata
		output wire [31:0] avmm_a_csr_readdata_o,      //              .readdata
		input  wire        clk_i,                      //    user_clock.clk
		input  wire        rst_n_i,                    //       reset_n.reset_n
		input  wire [7:0]  avmm_h_ddr_readdata_i,      //    avmm_h_ddr.readdata
		input  wire        avmm_h_ddr_readdatavalid_i, //              .readdatavalid
		input  wire        avmm_h_ddr_waitreq_i,       //              .waitrequest
		output wire [7:0]  avmm_h_ddr_writedata_o,     //              .writedata
		output wire [32:0] avmm_h_ddr_address_o,       //              .address
		output wire        avmm_h_ddr_write_o,         //              .write
		output wire        avmm_h_ddr_read_o,          //              .read
		output wire [5:0]  avmm_h_imem_address_o,      // avalon_a_imem.address
		output wire        avmm_h_imem_chipselect_o,   //              .chipselect
		output wire        avmm_h_imem_write_o,        //              .write
		output wire [63:0] avmm_h_imem_writedata_o,    //              .writedata
		input  wire [63:0] avmm_h_imem_readdata_i      //              .readdata
	);

	matrix_unit_wrapper #(
		.ddr_addr_w   (33),
		.ddr_data_w   (8),
		.csr_addr_w   (8),
		.csr_data_w   (32),
		.imem_w_instr (64),
		.imem_w_addr  (6)
	) mu_afu_matrix_unit (
		.avmm_a_csr_address_i       (avmm_a_csr_address_i),       //   input,   width = 8,    avmm_a_csr.address
		.avmm_a_csr_chipselect_i    (avmm_a_csr_chipselect_i),    //   input,   width = 1,              .chipselect
		.avmm_a_csr_write_i         (avmm_a_csr_write_i),         //   input,   width = 1,              .write
		.avmm_a_csr_writedata_i     (avmm_a_csr_writedata_i),     //   input,  width = 32,              .writedata
		.avmm_a_csr_readdata_o      (avmm_a_csr_readdata_o),      //  output,  width = 32,              .readdata
		.clk_i                      (clk_i),                      //   input,   width = 1,    user_clock.clk
		.rst_n_i                    (rst_n_i),                    //   input,   width = 1,       reset_n.reset_n
		.avmm_h_ddr_readdata_i      (avmm_h_ddr_readdata_i),      //   input,   width = 8,    avmm_h_ddr.readdata
		.avmm_h_ddr_readdatavalid_i (avmm_h_ddr_readdatavalid_i), //   input,   width = 1,              .readdatavalid
		.avmm_h_ddr_waitreq_i       (avmm_h_ddr_waitreq_i),       //   input,   width = 1,              .waitrequest
		.avmm_h_ddr_writedata_o     (avmm_h_ddr_writedata_o),     //  output,   width = 8,              .writedata
		.avmm_h_ddr_address_o       (avmm_h_ddr_address_o),       //  output,  width = 33,              .address
		.avmm_h_ddr_write_o         (avmm_h_ddr_write_o),         //  output,   width = 1,              .write
		.avmm_h_ddr_read_o          (avmm_h_ddr_read_o),          //  output,   width = 1,              .read
		.avmm_h_imem_address_o      (avmm_h_imem_address_o),      //  output,   width = 6, avalon_a_imem.address
		.avmm_h_imem_chipselect_o   (avmm_h_imem_chipselect_o),   //  output,   width = 1,              .chipselect
		.avmm_h_imem_write_o        (avmm_h_imem_write_o),        //  output,   width = 1,              .write
		.avmm_h_imem_writedata_o    (avmm_h_imem_writedata_o),    //  output,  width = 64,              .writedata
		.avmm_h_imem_readdata_i     (avmm_h_imem_readdata_i)      //   input,  width = 64,              .readdata
	);

endmodule
